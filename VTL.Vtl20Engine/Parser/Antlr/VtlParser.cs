//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Vtl.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class VtlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, QLPAREN=3, QRPAREN=4, GLPAREN=5, GRPAREN=6, EQ=7, 
		LT=8, MT=9, ME=10, NEQ=11, LE=12, PLUS=13, MINUS=14, MUL=15, DIV=16, COMMA=17, 
		POINTER=18, COLON=19, ASSIGN=20, MEMBERSHIP=21, EVAL=22, IF=23, THEN=24, 
		ELSE=25, USING=26, WITH=27, CURRENT_DATE=28, ON=29, DROP=30, KEEP=31, 
		CALC=32, ATTRCALC=33, RENAME=34, AS=35, AND=36, OR=37, XOR=38, NOT=39, 
		BETWEEN=40, IN=41, NOT_IN=42, NULL_CONSTANT=43, ISNULL=44, EX=45, UNION=46, 
		DIFF=47, SYMDIFF=48, INTERSECT=49, KEYS=50, INTYEAR=51, INTMONTH=52, INTDAY=53, 
		CHECK=54, EXISTS_IN=55, TO=56, RETURN=57, IMBALANCE=58, ERRORCODE=59, 
		ALL=60, AGGREGATE=61, ERRORLEVEL=62, ORDER=63, BY=64, RANK=65, ASC=66, 
		DESC=67, MIN=68, MAX=69, FIRST=70, LAST=71, INDEXOF=72, ABS=73, KEY=74, 
		LN=75, LOG=76, TRUNC=77, ROUND=78, POWER=79, MOD=80, LEN=81, CONCAT=82, 
		TRIM=83, UCASE=84, LCASE=85, SUBSTR=86, SUM=87, AVG=88, MEDIAN=89, COUNT=90, 
		DIMENSION=91, MEASURE=92, ATTRIBUTE=93, FILTER=94, MERGE=95, EXP=96, ROLE=97, 
		VIRAL=98, CHARSET_MATCH=99, TYPE=100, NVL=101, HIERARCHY=102, OPTIONAL=103, 
		INVALID=104, VALUE_DOMAIN=105, VARIABLE=106, DATA=107, STRUCTURE=108, 
		DATASET=109, OPERATOR=110, DEFINE=111, PUT_SYMBOL=112, DATAPOINT=113, 
		HIERARCHICAL=114, RULESET=115, RULE=116, END=117, ALTER_DATASET=118, LTRIM=119, 
		RTRIM=120, INSTR=121, REPLACE=122, CEIL=123, FLOOR=124, SQRT=125, ANY=126, 
		SETDIFF=127, STDDEV_POP=128, STDDEV_SAMP=129, VAR_POP=130, VAR_SAMP=131, 
		GROUP=132, EXCEPT=133, HAVING=134, FIRST_VALUE=135, LAST_VALUE=136, LAG=137, 
		LEAD=138, RATIO_TO_REPORT=139, OVER=140, PRECEDING=141, FOLLOWING=142, 
		UNBOUNDED=143, PARTITION=144, ROWS=145, RANGE=146, CURRENT=147, VALID=148, 
		FILL_TIME_SERIES=149, FLOW_TO_STOCK=150, STOCK_TO_FLOW=151, TIMESHIFT=152, 
		MEASURES=153, NO_MEASURES=154, CONDITION=155, BOOLEAN=156, DATE=157, TIME_PERIOD=158, 
		NUMBER=159, STRING=160, TIME=161, INTEGER=162, FLOAT=163, LIST=164, RECORD=165, 
		RESTRICT=166, YYYY=167, MM=168, DD=169, MAX_LENGTH=170, REGEXP=171, IS=172, 
		WHEN=173, FROM=174, AGGREGATES=175, POINTS=176, POINT=177, TOTAL=178, 
		PARTIAL=179, ALWAYS=180, INNER_JOIN=181, LEFT_JOIN=182, CROSS_JOIN=183, 
		FULL_JOIN=184, MAPS_FROM=185, MAPS_TO=186, MAP_TO=187, MAP_FROM=188, RETURNS=189, 
		PIVOT=190, CUSTOMPIVOT=191, UNPIVOT=192, SUBSPACE=193, APPLY=194, CONDITIONED=195, 
		PERIOD_INDICATOR=196, SINGLE=197, DURATION=198, TIME_AGG=199, UNIT=200, 
		VALUE=201, VALUEDOMAINS=202, VARIABLES=203, INPUT=204, OUTPUT=205, CAST=206, 
		RULE_PRIORITY=207, DATASET_PRIORITY=208, DEFAULT=209, CHECK_DATAPOINT=210, 
		CHECK_HIERARCHY=211, COMPUTED=212, NON_NULL=213, NON_ZERO=214, PARTIAL_NULL=215, 
		PARTIAL_ZERO=216, ALWAYS_NULL=217, ALWAYS_ZERO=218, COMPONENTS=219, ALL_MEASURES=220, 
		SCALAR=221, COMPONENT=222, DATAPOINT_ON_VD=223, DATAPOINT_ON_VAR=224, 
		HIERARCHICAL_ON_VD=225, HIERARCHICAL_ON_VAR=226, SET=227, LANGUAGE=228, 
		INTEGER_CONSTANT=229, NUMBER_CONSTANT=230, BOOLEAN_CONSTANT=231, STRING_CONSTANT=232, 
		IDENTIFIER=233, WS=234, EOL=235, ML_COMMENT=236, SL_COMMENT=237;
	public const int
		RULE_start = 0, RULE_statement = 1, RULE_expr = 2, RULE_exprComponent = 3, 
		RULE_functionsComponents = 4, RULE_functions = 5, RULE_datasetClause = 6, 
		RULE_renameClause = 7, RULE_aggrClause = 8, RULE_filterClause = 9, RULE_calcClause = 10, 
		RULE_keepOrDropClause = 11, RULE_pivotOrUnpivotClause = 12, RULE_customPivotClause = 13, 
		RULE_subspaceClause = 14, RULE_joinOperators = 15, RULE_defOperators = 16, 
		RULE_genericOperators = 17, RULE_genericOperatorsComponent = 18, RULE_parameterComponent = 19, 
		RULE_parameter = 20, RULE_stringOperators = 21, RULE_stringOperatorsComponent = 22, 
		RULE_numericOperators = 23, RULE_numericOperatorsComponent = 24, RULE_comparisonOperators = 25, 
		RULE_comparisonOperatorsComponent = 26, RULE_timeOperators = 27, RULE_timeOperatorsComponent = 28, 
		RULE_setOperators = 29, RULE_hierarchyOperators = 30, RULE_validationOperators = 31, 
		RULE_conditionalOperators = 32, RULE_conditionalOperatorsComponent = 33, 
		RULE_aggrOperators = 34, RULE_aggrOperatorsGrouping = 35, RULE_anFunction = 36, 
		RULE_anFunctionComponent = 37, RULE_renameClauseItem = 38, RULE_aggregateClause = 39, 
		RULE_aggrFunctionClause = 40, RULE_calcClauseItem = 41, RULE_subspaceClauseItem = 42, 
		RULE_scalarItem = 43, RULE_joinClauseWithoutUsing = 44, RULE_joinClause = 45, 
		RULE_joinClauseItem = 46, RULE_joinBody = 47, RULE_joinApplyClause = 48, 
		RULE_partitionByClause = 49, RULE_orderByClause = 50, RULE_orderByItem = 51, 
		RULE_windowingClause = 52, RULE_signedInteger = 53, RULE_limitClauseItem = 54, 
		RULE_groupingClause = 55, RULE_havingClause = 56, RULE_parameterItem = 57, 
		RULE_outputParameterType = 58, RULE_outputParameterTypeComponent = 59, 
		RULE_inputParameterType = 60, RULE_rulesetType = 61, RULE_scalarType = 62, 
		RULE_componentType = 63, RULE_datasetType = 64, RULE_evalDatasetType = 65, 
		RULE_scalarSetType = 66, RULE_dpRuleset = 67, RULE_hrRuleset = 68, RULE_valueDomainName = 69, 
		RULE_rulesetID = 70, RULE_rulesetSignature = 71, RULE_signature = 72, 
		RULE_ruleClauseDatapoint = 73, RULE_ruleItemDatapoint = 74, RULE_ruleClauseHierarchical = 75, 
		RULE_ruleItemHierarchical = 76, RULE_hierRuleSignature = 77, RULE_valueDomainSignature = 78, 
		RULE_codeItemRelation = 79, RULE_codeItemRelationClause = 80, RULE_valueDomainValue = 81, 
		RULE_scalarTypeConstraint = 82, RULE_compConstraint = 83, RULE_multModifier = 84, 
		RULE_validationOutput = 85, RULE_validationMode = 86, RULE_conditionClause = 87, 
		RULE_inputMode = 88, RULE_imbalanceExpr = 89, RULE_inputModeHierarchy = 90, 
		RULE_outputModeHierarchy = 91, RULE_alias = 92, RULE_varID = 93, RULE_simpleComponentId = 94, 
		RULE_componentID = 95, RULE_lists = 96, RULE_erCode = 97, RULE_erLevel = 98, 
		RULE_comparisonOperand = 99, RULE_optionalExpr = 100, RULE_optionalExprComponent = 101, 
		RULE_componentRole = 102, RULE_viralAttribute = 103, RULE_valueDomainID = 104, 
		RULE_operatorID = 105, RULE_routineName = 106, RULE_constant = 107, RULE_basicScalarType = 108, 
		RULE_retainType = 109;
	public static readonly string[] ruleNames = {
		"start", "statement", "expr", "exprComponent", "functionsComponents", 
		"functions", "datasetClause", "renameClause", "aggrClause", "filterClause", 
		"calcClause", "keepOrDropClause", "pivotOrUnpivotClause", "customPivotClause", 
		"subspaceClause", "joinOperators", "defOperators", "genericOperators", 
		"genericOperatorsComponent", "parameterComponent", "parameter", "stringOperators", 
		"stringOperatorsComponent", "numericOperators", "numericOperatorsComponent", 
		"comparisonOperators", "comparisonOperatorsComponent", "timeOperators", 
		"timeOperatorsComponent", "setOperators", "hierarchyOperators", "validationOperators", 
		"conditionalOperators", "conditionalOperatorsComponent", "aggrOperators", 
		"aggrOperatorsGrouping", "anFunction", "anFunctionComponent", "renameClauseItem", 
		"aggregateClause", "aggrFunctionClause", "calcClauseItem", "subspaceClauseItem", 
		"scalarItem", "joinClauseWithoutUsing", "joinClause", "joinClauseItem", 
		"joinBody", "joinApplyClause", "partitionByClause", "orderByClause", "orderByItem", 
		"windowingClause", "signedInteger", "limitClauseItem", "groupingClause", 
		"havingClause", "parameterItem", "outputParameterType", "outputParameterTypeComponent", 
		"inputParameterType", "rulesetType", "scalarType", "componentType", "datasetType", 
		"evalDatasetType", "scalarSetType", "dpRuleset", "hrRuleset", "valueDomainName", 
		"rulesetID", "rulesetSignature", "signature", "ruleClauseDatapoint", "ruleItemDatapoint", 
		"ruleClauseHierarchical", "ruleItemHierarchical", "hierRuleSignature", 
		"valueDomainSignature", "codeItemRelation", "codeItemRelationClause", 
		"valueDomainValue", "scalarTypeConstraint", "compConstraint", "multModifier", 
		"validationOutput", "validationMode", "conditionClause", "inputMode", 
		"imbalanceExpr", "inputModeHierarchy", "outputModeHierarchy", "alias", 
		"varID", "simpleComponentId", "componentID", "lists", "erCode", "erLevel", 
		"comparisonOperand", "optionalExpr", "optionalExprComponent", "componentRole", 
		"viralAttribute", "valueDomainID", "operatorID", "routineName", "constant", 
		"basicScalarType", "retainType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'<'", "'>'", "'>='", 
		"'<>'", "'<='", "'+'", "'-'", "'*'", "'/'", "','", "'->'", "':'", "':='", 
		"'#'", "'eval'", "'if'", "'then'", "'else'", "'using'", "'with'", "'current_date'", 
		"'on'", "'drop'", "'keep'", "'calc'", "'attrcalc'", "'rename'", "'as'", 
		"'and'", "'or'", "'xor'", "'not'", "'between'", "'in'", "'not_in'", "'null'", 
		"'isnull'", "'ex'", "'union'", "'diff'", "'symdiff'", "'intersect'", "'keys'", 
		"'intyear'", "'intmonth'", "'intday'", "'check'", "'exists_in'", "'to'", 
		"'return'", "'imbalance'", "'errorcode'", "'all'", "'aggr'", "'errorlevel'", 
		"'order'", "'by'", "'rank'", "'asc'", "'desc'", "'min'", "'max'", "'first'", 
		"'last'", "'indexof'", "'abs'", "'key'", "'ln'", "'log'", "'trunc'", "'round'", 
		"'power'", "'mod'", "'length'", "'||'", "'trim'", "'upper'", "'lower'", 
		"'substr'", "'sum'", "'avg'", "'median'", "'count'", "'identifier'", "'measure'", 
		"'attribute'", "'filter'", "'merge'", "'exp'", "'componentRole'", "'viral'", 
		"'match_characters'", "'type'", "'nvl'", "'hierarchy'", "'_'", "'invalid'", 
		"'valuedomain'", "'variable'", "'data'", "'structure'", "'dataset'", "'operator'", 
		"'define'", "'<-'", "'datapoint'", "'hierarchical'", "'ruleset'", "'rule'", 
		"'end'", "'alterDataset'", "'ltrim'", "'rtrim'", "'instr'", "'replace'", 
		"'ceil'", "'floor'", "'sqrt'", "'any'", "'setdiff'", "'stddev_pop'", "'stddev_samp'", 
		"'var_pop'", "'var_samp'", "'group'", "'except'", "'having'", "'first_value'", 
		"'last_value'", "'lag'", "'lead'", "'ratio_to_report'", "'over'", "'preceding'", 
		"'following'", "'unbounded'", "'partition'", "'rows'", "'range'", "'current'", 
		"'valid'", "'fill_time_series'", "'flow_to_stock'", "'stock_to_flow'", 
		"'timeshift'", "'measures'", "'no_measures'", "'condition'", "'boolean'", 
		"'date'", "'time_period'", "'number'", "'string'", "'time'", "'integer'", 
		"'float'", "'list'", "'record'", "'restrict'", "'yyyy'", "'mm'", "'dd'", 
		"'maxLength'", "'regexp'", "'is'", "'when'", "'from'", "'aggregates'", 
		"'points'", "'point'", "'total'", "'partial'", "'always'", "'inner_join'", 
		"'left_join'", "'cross_join'", "'full_join'", "'maps_from'", "'maps_to'", 
		"'map_to'", "'map_from'", "'returns'", "'pivot'", "'customPivot'", "'unpivot'", 
		"'sub'", "'apply'", "'conditioned'", "'period_indicator'", "'single'", 
		"'duration'", "'time_agg'", "'unit'", "'Value'", "'valuedomains'", "'variables'", 
		"'input'", "'output'", "'cast'", "'rule_priority'", "'dataset_priority'", 
		"'default'", "'check_datapoint'", "'check_hierarchy'", "'computed'", "'non_null'", 
		"'non_zero'", "'partial_null'", "'partial_zero'", "'always_null'", "'always_zero'", 
		"'components'", "'all_measures'", "'scalar'", "'component'", "'datapoint_on_valuedomains'", 
		"'datapoint_on_variables'", "'hierarchical_on_valuedomains'", "'hierarchical_on_variables'", 
		"'set'", "'language'", null, null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "QLPAREN", "QRPAREN", "GLPAREN", "GRPAREN", 
		"EQ", "LT", "MT", "ME", "NEQ", "LE", "PLUS", "MINUS", "MUL", "DIV", "COMMA", 
		"POINTER", "COLON", "ASSIGN", "MEMBERSHIP", "EVAL", "IF", "THEN", "ELSE", 
		"USING", "WITH", "CURRENT_DATE", "ON", "DROP", "KEEP", "CALC", "ATTRCALC", 
		"RENAME", "AS", "AND", "OR", "XOR", "NOT", "BETWEEN", "IN", "NOT_IN", 
		"NULL_CONSTANT", "ISNULL", "EX", "UNION", "DIFF", "SYMDIFF", "INTERSECT", 
		"KEYS", "INTYEAR", "INTMONTH", "INTDAY", "CHECK", "EXISTS_IN", "TO", "RETURN", 
		"IMBALANCE", "ERRORCODE", "ALL", "AGGREGATE", "ERRORLEVEL", "ORDER", "BY", 
		"RANK", "ASC", "DESC", "MIN", "MAX", "FIRST", "LAST", "INDEXOF", "ABS", 
		"KEY", "LN", "LOG", "TRUNC", "ROUND", "POWER", "MOD", "LEN", "CONCAT", 
		"TRIM", "UCASE", "LCASE", "SUBSTR", "SUM", "AVG", "MEDIAN", "COUNT", "DIMENSION", 
		"MEASURE", "ATTRIBUTE", "FILTER", "MERGE", "EXP", "ROLE", "VIRAL", "CHARSET_MATCH", 
		"TYPE", "NVL", "HIERARCHY", "OPTIONAL", "INVALID", "VALUE_DOMAIN", "VARIABLE", 
		"DATA", "STRUCTURE", "DATASET", "OPERATOR", "DEFINE", "PUT_SYMBOL", "DATAPOINT", 
		"HIERARCHICAL", "RULESET", "RULE", "END", "ALTER_DATASET", "LTRIM", "RTRIM", 
		"INSTR", "REPLACE", "CEIL", "FLOOR", "SQRT", "ANY", "SETDIFF", "STDDEV_POP", 
		"STDDEV_SAMP", "VAR_POP", "VAR_SAMP", "GROUP", "EXCEPT", "HAVING", "FIRST_VALUE", 
		"LAST_VALUE", "LAG", "LEAD", "RATIO_TO_REPORT", "OVER", "PRECEDING", "FOLLOWING", 
		"UNBOUNDED", "PARTITION", "ROWS", "RANGE", "CURRENT", "VALID", "FILL_TIME_SERIES", 
		"FLOW_TO_STOCK", "STOCK_TO_FLOW", "TIMESHIFT", "MEASURES", "NO_MEASURES", 
		"CONDITION", "BOOLEAN", "DATE", "TIME_PERIOD", "NUMBER", "STRING", "TIME", 
		"INTEGER", "FLOAT", "LIST", "RECORD", "RESTRICT", "YYYY", "MM", "DD", 
		"MAX_LENGTH", "REGEXP", "IS", "WHEN", "FROM", "AGGREGATES", "POINTS", 
		"POINT", "TOTAL", "PARTIAL", "ALWAYS", "INNER_JOIN", "LEFT_JOIN", "CROSS_JOIN", 
		"FULL_JOIN", "MAPS_FROM", "MAPS_TO", "MAP_TO", "MAP_FROM", "RETURNS", 
		"PIVOT", "CUSTOMPIVOT", "UNPIVOT", "SUBSPACE", "APPLY", "CONDITIONED", 
		"PERIOD_INDICATOR", "SINGLE", "DURATION", "TIME_AGG", "UNIT", "VALUE", 
		"VALUEDOMAINS", "VARIABLES", "INPUT", "OUTPUT", "CAST", "RULE_PRIORITY", 
		"DATASET_PRIORITY", "DEFAULT", "CHECK_DATAPOINT", "CHECK_HIERARCHY", "COMPUTED", 
		"NON_NULL", "NON_ZERO", "PARTIAL_NULL", "PARTIAL_ZERO", "ALWAYS_NULL", 
		"ALWAYS_ZERO", "COMPONENTS", "ALL_MEASURES", "SCALAR", "COMPONENT", "DATAPOINT_ON_VD", 
		"DATAPOINT_ON_VAR", "HIERARCHICAL_ON_VD", "HIERARCHICAL_ON_VAR", "SET", 
		"LANGUAGE", "INTEGER_CONSTANT", "NUMBER_CONSTANT", "BOOLEAN_CONSTANT", 
		"STRING_CONSTANT", "IDENTIFIER", "WS", "EOL", "ML_COMMENT", "SL_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vtl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VtlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VtlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VtlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(VtlParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] EOL() { return GetTokens(VtlParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(VtlParser.EOL, i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFINE || _la==IDENTIFIER) {
				{
				{
				State = 220; statement();
				State = 221; Match(EOL);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefineExpressionContext : StatementContext {
		public DefOperatorsContext defOperators() {
			return GetRuleContext<DefOperatorsContext>(0);
		}
		public DefineExpressionContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDefineExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDefineExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TemporaryAssignmentContext : StatementContext {
		public VarIDContext varID() {
			return GetRuleContext<VarIDContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VtlParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TemporaryAssignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTemporaryAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTemporaryAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporaryAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PersistAssignmentContext : StatementContext {
		public VarIDContext varID() {
			return GetRuleContext<VarIDContext>(0);
		}
		public ITerminalNode PUT_SYMBOL() { return GetToken(VtlParser.PUT_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PersistAssignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterPersistAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitPersistAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPersistAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new TemporaryAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 230; varID();
				State = 231; Match(ASSIGN);
				State = 232; expr(0);
				}
				break;
			case 2:
				_localctx = new PersistAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; varID();
				State = 235; Match(PUT_SYMBOL);
				State = 236; expr(0);
				}
				break;
			case 3:
				_localctx = new DefineExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 238; defOperators();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarIdExprContext : ExprContext {
		public VarIDContext varID() {
			return GetRuleContext<VarIDContext>(0);
		}
		public VarIdExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterVarIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitVarIdExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MembershipExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode MEMBERSHIP() { return GetToken(VtlParser.MEMBERSHIP, 0); }
		public SimpleComponentIdContext simpleComponentId() {
			return GetRuleContext<SimpleComponentIdContext>(0);
		}
		public MembershipExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterMembershipExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitMembershipExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMembershipExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InNotInExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VtlParser.IN, 0); }
		public ITerminalNode NOT_IN() { return GetToken(VtlParser.NOT_IN, 0); }
		public ListsContext lists() {
			return GetRuleContext<ListsContext>(0);
		}
		public ValueDomainIDContext valueDomainID() {
			return GetRuleContext<ValueDomainIDContext>(0);
		}
		public InNotInExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInNotInExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInNotInExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInNotInExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VtlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(VtlParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(VtlParser.XOR, 0); }
		public BooleanExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBooleanExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBooleanExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprContext : ExprContext {
		public ExprContext left;
		public ComparisonOperandContext op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonOperandContext comparisonOperand() {
			return GetRuleContext<ComparisonOperandContext>(0);
		}
		public ComparisonExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComparisonExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComparisonExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public IToken op;
		public ExprContext right;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VtlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VtlParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(VtlParser.NOT, 0); }
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionsExpressionContext : ExprContext {
		public FunctionsContext functions() {
			return GetRuleContext<FunctionsContext>(0);
		}
		public FunctionsExpressionContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFunctionsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFunctionsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : ExprContext {
		public ExprContext conditionalExpr;
		public ExprContext thenExpr;
		public ExprContext elseExpr;
		public ITerminalNode IF() { return GetToken(VtlParser.IF, 0); }
		public ITerminalNode THEN() { return GetToken(VtlParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(VtlParser.ELSE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClauseExprContext : ExprContext {
		public ExprContext dataset;
		public DatasetClauseContext clause;
		public ITerminalNode QLPAREN() { return GetToken(VtlParser.QLPAREN, 0); }
		public ITerminalNode QRPAREN() { return GetToken(VtlParser.QRPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DatasetClauseContext datasetClause() {
			return GetRuleContext<DatasetClauseContext>(0);
		}
		public ClauseExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterClauseExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitClauseExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClauseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(VtlParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(VtlParser.DIV, 0); }
		public ArithmeticExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterArithmeticExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitArithmeticExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExprContext : ExprContext {
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ParenthesisExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterParenthesisExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitParenthesisExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : ExprContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExprOrConcatContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VtlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VtlParser.MINUS, 0); }
		public ITerminalNode CONCAT() { return GetToken(VtlParser.CONCAT, 0); }
		public ArithmeticExprOrConcatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterArithmeticExprOrConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitArithmeticExprOrConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExprOrConcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 242; Match(LPAREN);
				State = 243; expr(0);
				State = 244; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new FunctionsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 246; functions();
				}
				break;
			case 3:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 247;
				((UnaryExprContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << NOT))) != 0)) ) {
					((UnaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 248; ((UnaryExprContext)_localctx).right = expr(10);
				}
				break;
			case 4:
				{
				_localctx = new IfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 249; Match(IF);
				State = 250; ((IfExprContext)_localctx).conditionalExpr = expr(0);
				State = 251; Match(THEN);
				State = 252; ((IfExprContext)_localctx).thenExpr = expr(0);
				State = 253; Match(ELSE);
				State = 254; ((IfExprContext)_localctx).elseExpr = expr(3);
				}
				break;
			case 5:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256; constant();
				}
				break;
			case 6:
				{
				_localctx = new VarIdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 257; varID();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 290;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExprContext(new ExprContext(_parentctx, _parentState));
						((ArithmeticExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 260;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 261;
						((ArithmeticExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((ArithmeticExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 262; ((ArithmeticExprContext)_localctx).right = expr(10);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExprOrConcatContext(new ExprContext(_parentctx, _parentState));
						((ArithmeticExprOrConcatContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 263;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 264;
						((ArithmeticExprOrConcatContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS || _la==CONCAT) ) {
							((ArithmeticExprOrConcatContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 265; ((ArithmeticExprOrConcatContext)_localctx).right = expr(9);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExprContext(new ExprContext(_parentctx, _parentState));
						((ComparisonExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 266;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 267; ((ComparisonExprContext)_localctx).op = comparisonOperand();
						State = 268; ((ComparisonExprContext)_localctx).right = expr(8);
						}
						break;
					case 4:
						{
						_localctx = new BooleanExprContext(new ExprContext(_parentctx, _parentState));
						((BooleanExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 270;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 271; ((BooleanExprContext)_localctx).op = Match(AND);
						State = 272; ((BooleanExprContext)_localctx).right = expr(6);
						}
						break;
					case 5:
						{
						_localctx = new BooleanExprContext(new ExprContext(_parentctx, _parentState));
						((BooleanExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 273;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 274;
						((BooleanExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==XOR) ) {
							((BooleanExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 275; ((BooleanExprContext)_localctx).right = expr(5);
						}
						break;
					case 6:
						{
						_localctx = new ClauseExprContext(new ExprContext(_parentctx, _parentState));
						((ClauseExprContext)_localctx).dataset = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 276;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 277; Match(QLPAREN);
						State = 278; ((ClauseExprContext)_localctx).clause = datasetClause();
						State = 279; Match(QRPAREN);
						}
						break;
					case 7:
						{
						_localctx = new MembershipExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 281;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 282; Match(MEMBERSHIP);
						State = 283; simpleComponentId();
						}
						break;
					case 8:
						{
						_localctx = new InNotInExprContext(new ExprContext(_parentctx, _parentState));
						((InNotInExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 284;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 285;
						((InNotInExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==IN || _la==NOT_IN) ) {
							((InNotInExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 288;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case GLPAREN:
							{
							State = 286; lists();
							}
							break;
						case IDENTIFIER:
							{
							State = 287; valueDomainID();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprComponentContext : ParserRuleContext {
		public ExprComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprComponent; } }
	 
		public ExprComponentContext() { }
		public virtual void CopyFrom(ExprComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArithmeticExprCompContext : ExprComponentContext {
		public ExprComponentContext left;
		public IToken op;
		public ExprComponentContext right;
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(VtlParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(VtlParser.DIV, 0); }
		public ArithmeticExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterArithmeticExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitArithmeticExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprCompContext : ExprComponentContext {
		public ExprComponentContext conditionalExpr;
		public ExprComponentContext thenExpr;
		public ExprComponentContext elseExpr;
		public ITerminalNode IF() { return GetToken(VtlParser.IF, 0); }
		public ITerminalNode THEN() { return GetToken(VtlParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(VtlParser.ELSE, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public IfExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterIfExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitIfExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExprCompContext : ExprComponentContext {
		public ExprComponentContext left;
		public ExprComponentContext right;
		public ComparisonOperandContext comparisonOperand() {
			return GetRuleContext<ComparisonOperandContext>(0);
		}
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ComparisonExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComparisonExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComparisonExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionsExpressionCompContext : ExprComponentContext {
		public FunctionsComponentsContext functionsComponents() {
			return GetRuleContext<FunctionsComponentsContext>(0);
		}
		public FunctionsExpressionCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFunctionsExpressionComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFunctionsExpressionComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionsExpressionComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompIdContext : ExprComponentContext {
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public CompIdContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCompId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCompId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprCompContext : ExprComponentContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConstantExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConstantExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExprOrConcatCompContext : ExprComponentContext {
		public ExprComponentContext left;
		public IToken op;
		public ExprComponentContext right;
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VtlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VtlParser.MINUS, 0); }
		public ITerminalNode CONCAT() { return GetToken(VtlParser.CONCAT, 0); }
		public ArithmeticExprOrConcatCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterArithmeticExprOrConcatComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitArithmeticExprOrConcatComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExprOrConcatComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExprCompContext : ExprComponentContext {
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ParenthesisExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterParenthesisExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitParenthesisExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InNotInExprCompContext : ExprComponentContext {
		public ExprComponentContext left;
		public IToken op;
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode IN() { return GetToken(VtlParser.IN, 0); }
		public ITerminalNode NOT_IN() { return GetToken(VtlParser.NOT_IN, 0); }
		public ListsContext lists() {
			return GetRuleContext<ListsContext>(0);
		}
		public ValueDomainIDContext valueDomainID() {
			return GetRuleContext<ValueDomainIDContext>(0);
		}
		public InNotInExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInNotInExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInNotInExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInNotInExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprCompContext : ExprComponentContext {
		public IToken op;
		public ExprComponentContext right;
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VtlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VtlParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(VtlParser.NOT, 0); }
		public UnaryExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExprCompContext : ExprComponentContext {
		public ExprComponentContext left;
		public IToken op;
		public ExprComponentContext right;
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode AND() { return GetToken(VtlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(VtlParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(VtlParser.XOR, 0); }
		public BooleanExprCompContext(ExprComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBooleanExprComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBooleanExprComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExprComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprComponentContext exprComponent() {
		return exprComponent(0);
	}

	private ExprComponentContext exprComponent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprComponentContext _localctx = new ExprComponentContext(Context, _parentState);
		ExprComponentContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_exprComponent, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExprCompContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 296; Match(LPAREN);
				State = 297; exprComponent(0);
				State = 298; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new FunctionsExpressionCompContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 300; functionsComponents();
				}
				break;
			case 3:
				{
				_localctx = new UnaryExprCompContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 301;
				((UnaryExprCompContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << NOT))) != 0)) ) {
					((UnaryExprCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 302; ((UnaryExprCompContext)_localctx).right = exprComponent(10);
				}
				break;
			case 4:
				{
				_localctx = new IfExprCompContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 303; Match(IF);
				State = 304; ((IfExprCompContext)_localctx).conditionalExpr = exprComponent(0);
				State = 305; Match(THEN);
				State = 306; ((IfExprCompContext)_localctx).thenExpr = exprComponent(0);
				State = 307; Match(ELSE);
				State = 308; ((IfExprCompContext)_localctx).elseExpr = exprComponent(3);
				}
				break;
			case 5:
				{
				_localctx = new ConstantExprCompContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 310; constant();
				}
				break;
			case 6:
				{
				_localctx = new CompIdContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 311; componentID();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 336;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExprCompContext(new ExprComponentContext(_parentctx, _parentState));
						((ArithmeticExprCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exprComponent);
						State = 314;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 315;
						((ArithmeticExprCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((ArithmeticExprCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 316; ((ArithmeticExprCompContext)_localctx).right = exprComponent(10);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExprOrConcatCompContext(new ExprComponentContext(_parentctx, _parentState));
						((ArithmeticExprOrConcatCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exprComponent);
						State = 317;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 318;
						((ArithmeticExprOrConcatCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS || _la==CONCAT) ) {
							((ArithmeticExprOrConcatCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 319; ((ArithmeticExprOrConcatCompContext)_localctx).right = exprComponent(9);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExprCompContext(new ExprComponentContext(_parentctx, _parentState));
						((ComparisonExprCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exprComponent);
						State = 320;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 321; comparisonOperand();
						State = 322; ((ComparisonExprCompContext)_localctx).right = exprComponent(8);
						}
						break;
					case 4:
						{
						_localctx = new BooleanExprCompContext(new ExprComponentContext(_parentctx, _parentState));
						((BooleanExprCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exprComponent);
						State = 324;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 325; ((BooleanExprCompContext)_localctx).op = Match(AND);
						State = 326; ((BooleanExprCompContext)_localctx).right = exprComponent(6);
						}
						break;
					case 5:
						{
						_localctx = new BooleanExprCompContext(new ExprComponentContext(_parentctx, _parentState));
						((BooleanExprCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exprComponent);
						State = 327;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 328;
						((BooleanExprCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==XOR) ) {
							((BooleanExprCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 329; ((BooleanExprCompContext)_localctx).right = exprComponent(5);
						}
						break;
					case 6:
						{
						_localctx = new InNotInExprCompContext(new ExprComponentContext(_parentctx, _parentState));
						((InNotInExprCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exprComponent);
						State = 330;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 331;
						((InNotInExprCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==IN || _la==NOT_IN) ) {
							((InNotInExprCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 334;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case GLPAREN:
							{
							State = 332; lists();
							}
							break;
						case IDENTIFIER:
							{
							State = 333; valueDomainID();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionsComponentsContext : ParserRuleContext {
		public FunctionsComponentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionsComponents; } }
	 
		public FunctionsComponentsContext() { }
		public virtual void CopyFrom(FunctionsComponentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumericFunctionsComponentsContext : FunctionsComponentsContext {
		public NumericOperatorsComponentContext numericOperatorsComponent() {
			return GetRuleContext<NumericOperatorsComponentContext>(0);
		}
		public NumericFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterNumericFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitNumericFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFunctionsComponentsContext : FunctionsComponentsContext {
		public StringOperatorsComponentContext stringOperatorsComponent() {
			return GetRuleContext<StringOperatorsComponentContext>(0);
		}
		public StringFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterStringFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitStringFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonFunctionsComponentsContext : FunctionsComponentsContext {
		public ComparisonOperatorsComponentContext comparisonOperatorsComponent() {
			return GetRuleContext<ComparisonOperatorsComponentContext>(0);
		}
		public ComparisonFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComparisonFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComparisonFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeFunctionsComponentsContext : FunctionsComponentsContext {
		public TimeOperatorsComponentContext timeOperatorsComponent() {
			return GetRuleContext<TimeOperatorsComponentContext>(0);
		}
		public TimeFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTimeFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTimeFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericFunctionsComponentsContext : FunctionsComponentsContext {
		public GenericOperatorsComponentContext genericOperatorsComponent() {
			return GetRuleContext<GenericOperatorsComponentContext>(0);
		}
		public GenericFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterGenericFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitGenericFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnalyticFunctionsComponentsContext : FunctionsComponentsContext {
		public AnFunctionComponentContext anFunctionComponent() {
			return GetRuleContext<AnFunctionComponentContext>(0);
		}
		public AnalyticFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAnalyticFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAnalyticFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyticFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalFunctionsComponentsContext : FunctionsComponentsContext {
		public ConditionalOperatorsComponentContext conditionalOperatorsComponent() {
			return GetRuleContext<ConditionalOperatorsComponentContext>(0);
		}
		public ConditionalFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConditionalFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConditionalFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionsComponentsContext : FunctionsComponentsContext {
		public AggrOperatorsContext aggrOperators() {
			return GetRuleContext<AggrOperatorsContext>(0);
		}
		public AggregateFunctionsComponentsContext(FunctionsComponentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggregateFunctionsComponents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggregateFunctionsComponents(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctionsComponents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsComponentsContext functionsComponents() {
		FunctionsComponentsContext _localctx = new FunctionsComponentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionsComponents);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new GenericFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 341; genericOperatorsComponent();
				}
				break;
			case 2:
				_localctx = new StringFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342; stringOperatorsComponent();
				}
				break;
			case 3:
				_localctx = new NumericFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 343; numericOperatorsComponent();
				}
				break;
			case 4:
				_localctx = new ComparisonFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 344; comparisonOperatorsComponent();
				}
				break;
			case 5:
				_localctx = new TimeFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 345; timeOperatorsComponent();
				}
				break;
			case 6:
				_localctx = new ConditionalFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 346; conditionalOperatorsComponent();
				}
				break;
			case 7:
				_localctx = new AggregateFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 347; aggrOperators();
				}
				break;
			case 8:
				_localctx = new AnalyticFunctionsComponentsContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 348; anFunctionComponent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsContext : ParserRuleContext {
		public FunctionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functions; } }
	 
		public FunctionsContext() { }
		public virtual void CopyFrom(FunctionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HierarchyFunctionsContext : FunctionsContext {
		public HierarchyOperatorsContext hierarchyOperators() {
			return GetRuleContext<HierarchyOperatorsContext>(0);
		}
		public HierarchyFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHierarchyFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHierarchyFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchyFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFunctionsContext : FunctionsContext {
		public StringOperatorsContext stringOperators() {
			return GetRuleContext<StringOperatorsContext>(0);
		}
		public StringFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterStringFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitStringFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValidationFunctionsContext : FunctionsContext {
		public ValidationOperatorsContext validationOperators() {
			return GetRuleContext<ValidationOperatorsContext>(0);
		}
		public ValidationFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValidationFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValidationFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidationFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GenericFunctionsContext : FunctionsContext {
		public GenericOperatorsContext genericOperators() {
			return GetRuleContext<GenericOperatorsContext>(0);
		}
		public GenericFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterGenericFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitGenericFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalFunctionsContext : FunctionsContext {
		public ConditionalOperatorsContext conditionalOperators() {
			return GetRuleContext<ConditionalOperatorsContext>(0);
		}
		public ConditionalFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConditionalFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConditionalFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionsContext : FunctionsContext {
		public AggrOperatorsGroupingContext aggrOperatorsGrouping() {
			return GetRuleContext<AggrOperatorsGroupingContext>(0);
		}
		public AggregateFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggregateFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggregateFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JoinFunctionsContext : FunctionsContext {
		public JoinOperatorsContext joinOperators() {
			return GetRuleContext<JoinOperatorsContext>(0);
		}
		public JoinFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonFunctionsContext : FunctionsContext {
		public ComparisonOperatorsContext comparisonOperators() {
			return GetRuleContext<ComparisonOperatorsContext>(0);
		}
		public ComparisonFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComparisonFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComparisonFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericFunctionsContext : FunctionsContext {
		public NumericOperatorsContext numericOperators() {
			return GetRuleContext<NumericOperatorsContext>(0);
		}
		public NumericFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterNumericFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitNumericFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeFunctionsContext : FunctionsContext {
		public TimeOperatorsContext timeOperators() {
			return GetRuleContext<TimeOperatorsContext>(0);
		}
		public TimeFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTimeFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTimeFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetFunctionsContext : FunctionsContext {
		public SetOperatorsContext setOperators() {
			return GetRuleContext<SetOperatorsContext>(0);
		}
		public SetFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSetFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSetFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnalyticFunctionsContext : FunctionsContext {
		public AnFunctionContext anFunction() {
			return GetRuleContext<AnFunctionContext>(0);
		}
		public AnalyticFunctionsContext(FunctionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAnalyticFunctions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAnalyticFunctions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyticFunctions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsContext functions() {
		FunctionsContext _localctx = new FunctionsContext(Context, State);
		EnterRule(_localctx, 10, RULE_functions);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new JoinFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 351; joinOperators();
				}
				break;
			case 2:
				_localctx = new GenericFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 352; genericOperators();
				}
				break;
			case 3:
				_localctx = new StringFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 353; stringOperators();
				}
				break;
			case 4:
				_localctx = new NumericFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 354; numericOperators();
				}
				break;
			case 5:
				_localctx = new ComparisonFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 355; comparisonOperators();
				}
				break;
			case 6:
				_localctx = new TimeFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 356; timeOperators();
				}
				break;
			case 7:
				_localctx = new SetFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 357; setOperators();
				}
				break;
			case 8:
				_localctx = new HierarchyFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 358; hierarchyOperators();
				}
				break;
			case 9:
				_localctx = new ValidationFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 359; validationOperators();
				}
				break;
			case 10:
				_localctx = new ConditionalFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 360; conditionalOperators();
				}
				break;
			case 11:
				_localctx = new AggregateFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 361; aggrOperatorsGrouping();
				}
				break;
			case 12:
				_localctx = new AnalyticFunctionsContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 362; anFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetClauseContext : ParserRuleContext {
		public RenameClauseContext renameClause() {
			return GetRuleContext<RenameClauseContext>(0);
		}
		public AggrClauseContext aggrClause() {
			return GetRuleContext<AggrClauseContext>(0);
		}
		public FilterClauseContext filterClause() {
			return GetRuleContext<FilterClauseContext>(0);
		}
		public CalcClauseContext calcClause() {
			return GetRuleContext<CalcClauseContext>(0);
		}
		public KeepOrDropClauseContext keepOrDropClause() {
			return GetRuleContext<KeepOrDropClauseContext>(0);
		}
		public PivotOrUnpivotClauseContext pivotOrUnpivotClause() {
			return GetRuleContext<PivotOrUnpivotClauseContext>(0);
		}
		public SubspaceClauseContext subspaceClause() {
			return GetRuleContext<SubspaceClauseContext>(0);
		}
		public DatasetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDatasetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDatasetClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetClauseContext datasetClause() {
		DatasetClauseContext _localctx = new DatasetClauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_datasetClause);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365; renameClause();
				}
				break;
			case AGGREGATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366; aggrClause();
				}
				break;
			case FILTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 367; filterClause();
				}
				break;
			case CALC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 368; calcClause();
				}
				break;
			case DROP:
			case KEEP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 369; keepOrDropClause();
				}
				break;
			case PIVOT:
			case UNPIVOT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 370; pivotOrUnpivotClause();
				}
				break;
			case SUBSPACE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 371; subspaceClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameClauseContext : ParserRuleContext {
		public ITerminalNode RENAME() { return GetToken(VtlParser.RENAME, 0); }
		public RenameClauseItemContext[] renameClauseItem() {
			return GetRuleContexts<RenameClauseItemContext>();
		}
		public RenameClauseItemContext renameClauseItem(int i) {
			return GetRuleContext<RenameClauseItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public RenameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRenameClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRenameClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameClauseContext renameClause() {
		RenameClauseContext _localctx = new RenameClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_renameClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(RENAME);
			State = 375; renameClauseItem();
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 376; Match(COMMA);
				State = 377; renameClauseItem();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrClauseContext : ParserRuleContext {
		public ITerminalNode AGGREGATE() { return GetToken(VtlParser.AGGREGATE, 0); }
		public AggregateClauseContext aggregateClause() {
			return GetRuleContext<AggregateClauseContext>(0);
		}
		public GroupingClauseContext groupingClause() {
			return GetRuleContext<GroupingClauseContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public AggrClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggrClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggrClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrClauseContext aggrClause() {
		AggrClauseContext _localctx = new AggrClauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_aggrClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(AGGREGATE);
			State = 384; aggregateClause();
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 385; groupingClause();
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 386; havingClause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterClauseContext : ParserRuleContext {
		public ITerminalNode FILTER() { return GetToken(VtlParser.FILTER, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public FilterClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFilterClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFilterClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterClauseContext filterClause() {
		FilterClauseContext _localctx = new FilterClauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_filterClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(FILTER);
			State = 392; exprComponent(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcClauseContext : ParserRuleContext {
		public ITerminalNode CALC() { return GetToken(VtlParser.CALC, 0); }
		public CalcClauseItemContext[] calcClauseItem() {
			return GetRuleContexts<CalcClauseItemContext>();
		}
		public CalcClauseItemContext calcClauseItem(int i) {
			return GetRuleContext<CalcClauseItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public CalcClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCalcClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCalcClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcClauseContext calcClause() {
		CalcClauseContext _localctx = new CalcClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_calcClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(CALC);
			State = 395; calcClauseItem();
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 396; Match(COMMA);
				State = 397; calcClauseItem();
				}
				}
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeepOrDropClauseContext : ParserRuleContext {
		public IToken op;
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ITerminalNode KEEP() { return GetToken(VtlParser.KEEP, 0); }
		public ITerminalNode DROP() { return GetToken(VtlParser.DROP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public KeepOrDropClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keepOrDropClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterKeepOrDropClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitKeepOrDropClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeepOrDropClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeepOrDropClauseContext keepOrDropClause() {
		KeepOrDropClauseContext _localctx = new KeepOrDropClauseContext(Context, State);
		EnterRule(_localctx, 22, RULE_keepOrDropClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==KEEP) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 404; componentID();
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 405; Match(COMMA);
				State = 406; componentID();
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PivotOrUnpivotClauseContext : ParserRuleContext {
		public IToken op;
		public ComponentIDContext id_;
		public ComponentIDContext mea;
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ITerminalNode PIVOT() { return GetToken(VtlParser.PIVOT, 0); }
		public ITerminalNode UNPIVOT() { return GetToken(VtlParser.UNPIVOT, 0); }
		public PivotOrUnpivotClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivotOrUnpivotClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterPivotOrUnpivotClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitPivotOrUnpivotClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivotOrUnpivotClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PivotOrUnpivotClauseContext pivotOrUnpivotClause() {
		PivotOrUnpivotClauseContext _localctx = new PivotOrUnpivotClauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_pivotOrUnpivotClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==PIVOT || _la==UNPIVOT) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 413; _localctx.id_ = componentID();
			State = 414; Match(COMMA);
			State = 415; _localctx.mea = componentID();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomPivotClauseContext : ParserRuleContext {
		public ComponentIDContext id_;
		public ComponentIDContext mea;
		public ITerminalNode CUSTOMPIVOT() { return GetToken(VtlParser.CUSTOMPIVOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(VtlParser.IN, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public CustomPivotClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customPivotClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCustomPivotClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCustomPivotClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomPivotClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomPivotClauseContext customPivotClause() {
		CustomPivotClauseContext _localctx = new CustomPivotClauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_customPivotClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(CUSTOMPIVOT);
			State = 418; _localctx.id_ = componentID();
			State = 419; Match(COMMA);
			State = 420; _localctx.mea = componentID();
			State = 421; Match(IN);
			State = 422; constant();
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 423; Match(COMMA);
				State = 424; constant();
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubspaceClauseContext : ParserRuleContext {
		public ITerminalNode SUBSPACE() { return GetToken(VtlParser.SUBSPACE, 0); }
		public SubspaceClauseItemContext[] subspaceClauseItem() {
			return GetRuleContexts<SubspaceClauseItemContext>();
		}
		public SubspaceClauseItemContext subspaceClauseItem(int i) {
			return GetRuleContext<SubspaceClauseItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public SubspaceClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subspaceClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSubspaceClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSubspaceClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubspaceClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubspaceClauseContext subspaceClause() {
		SubspaceClauseContext _localctx = new SubspaceClauseContext(Context, State);
		EnterRule(_localctx, 28, RULE_subspaceClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(SUBSPACE);
			State = 431; subspaceClauseItem();
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 432; Match(COMMA);
				State = 433; subspaceClauseItem();
				}
				}
				State = 438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinOperatorsContext : ParserRuleContext {
		public JoinOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinOperators; } }
	 
		public JoinOperatorsContext() { }
		public virtual void CopyFrom(JoinOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JoinExprContext : JoinOperatorsContext {
		public IToken joinKeyword;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public JoinClauseContext joinClause() {
			return GetRuleContext<JoinClauseContext>(0);
		}
		public JoinBodyContext joinBody() {
			return GetRuleContext<JoinBodyContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode INNER_JOIN() { return GetToken(VtlParser.INNER_JOIN, 0); }
		public ITerminalNode LEFT_JOIN() { return GetToken(VtlParser.LEFT_JOIN, 0); }
		public JoinClauseWithoutUsingContext joinClauseWithoutUsing() {
			return GetRuleContext<JoinClauseWithoutUsingContext>(0);
		}
		public ITerminalNode FULL_JOIN() { return GetToken(VtlParser.FULL_JOIN, 0); }
		public ITerminalNode CROSS_JOIN() { return GetToken(VtlParser.CROSS_JOIN, 0); }
		public JoinExprContext(JoinOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinOperatorsContext joinOperators() {
		JoinOperatorsContext _localctx = new JoinOperatorsContext(Context, State);
		EnterRule(_localctx, 30, RULE_joinOperators);
		int _la;
		try {
			State = 451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER_JOIN:
			case LEFT_JOIN:
				_localctx = new JoinExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 439;
				((JoinExprContext)_localctx).joinKeyword = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INNER_JOIN || _la==LEFT_JOIN) ) {
					((JoinExprContext)_localctx).joinKeyword = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 440; Match(LPAREN);
				State = 441; joinClause();
				State = 442; joinBody();
				State = 443; Match(RPAREN);
				}
				break;
			case CROSS_JOIN:
			case FULL_JOIN:
				_localctx = new JoinExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 445;
				((JoinExprContext)_localctx).joinKeyword = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CROSS_JOIN || _la==FULL_JOIN) ) {
					((JoinExprContext)_localctx).joinKeyword = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 446; Match(LPAREN);
				State = 447; joinClauseWithoutUsing();
				State = 448; joinBody();
				State = 449; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefOperatorsContext : ParserRuleContext {
		public DefOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defOperators; } }
	 
		public DefOperatorsContext() { }
		public virtual void CopyFrom(DefOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefOperatorContext : DefOperatorsContext {
		public ITerminalNode DEFINE() { return GetToken(VtlParser.DEFINE, 0); }
		public ITerminalNode[] OPERATOR() { return GetTokens(VtlParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(VtlParser.OPERATOR, i);
		}
		public OperatorIDContext operatorID() {
			return GetRuleContext<OperatorIDContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode IS() { return GetToken(VtlParser.IS, 0); }
		public ITerminalNode END() { return GetToken(VtlParser.END, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParameterItemContext[] parameterItem() {
			return GetRuleContexts<ParameterItemContext>();
		}
		public ParameterItemContext parameterItem(int i) {
			return GetRuleContext<ParameterItemContext>(i);
		}
		public ITerminalNode RETURNS() { return GetToken(VtlParser.RETURNS, 0); }
		public OutputParameterTypeContext outputParameterType() {
			return GetRuleContext<OutputParameterTypeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public DefOperatorContext(DefOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDefOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDefOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefHierarchicalContext : DefOperatorsContext {
		public ITerminalNode DEFINE() { return GetToken(VtlParser.DEFINE, 0); }
		public ITerminalNode[] HIERARCHICAL() { return GetTokens(VtlParser.HIERARCHICAL); }
		public ITerminalNode HIERARCHICAL(int i) {
			return GetToken(VtlParser.HIERARCHICAL, i);
		}
		public ITerminalNode[] RULESET() { return GetTokens(VtlParser.RULESET); }
		public ITerminalNode RULESET(int i) {
			return GetToken(VtlParser.RULESET, i);
		}
		public RulesetIDContext rulesetID() {
			return GetRuleContext<RulesetIDContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public HierRuleSignatureContext hierRuleSignature() {
			return GetRuleContext<HierRuleSignatureContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode IS() { return GetToken(VtlParser.IS, 0); }
		public RuleClauseHierarchicalContext ruleClauseHierarchical() {
			return GetRuleContext<RuleClauseHierarchicalContext>(0);
		}
		public ITerminalNode END() { return GetToken(VtlParser.END, 0); }
		public DefHierarchicalContext(DefOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDefHierarchical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDefHierarchical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefHierarchical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefDatapointRulesetContext : DefOperatorsContext {
		public ITerminalNode DEFINE() { return GetToken(VtlParser.DEFINE, 0); }
		public ITerminalNode[] DATAPOINT() { return GetTokens(VtlParser.DATAPOINT); }
		public ITerminalNode DATAPOINT(int i) {
			return GetToken(VtlParser.DATAPOINT, i);
		}
		public ITerminalNode[] RULESET() { return GetTokens(VtlParser.RULESET); }
		public ITerminalNode RULESET(int i) {
			return GetToken(VtlParser.RULESET, i);
		}
		public RulesetIDContext rulesetID() {
			return GetRuleContext<RulesetIDContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public RulesetSignatureContext rulesetSignature() {
			return GetRuleContext<RulesetSignatureContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode IS() { return GetToken(VtlParser.IS, 0); }
		public RuleClauseDatapointContext ruleClauseDatapoint() {
			return GetRuleContext<RuleClauseDatapointContext>(0);
		}
		public ITerminalNode END() { return GetToken(VtlParser.END, 0); }
		public DefDatapointRulesetContext(DefOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDefDatapointRuleset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDefDatapointRuleset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefDatapointRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefOperatorsContext defOperators() {
		DefOperatorsContext _localctx = new DefOperatorsContext(Context, State);
		EnterRule(_localctx, 32, RULE_defOperators);
		int _la;
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new DefOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 453; Match(DEFINE);
				State = 454; Match(OPERATOR);
				State = 455; operatorID();
				State = 456; Match(LPAREN);
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 457; parameterItem();
					State = 462;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 458; Match(COMMA);
						State = 459; parameterItem();
						}
						}
						State = 464;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 467; Match(RPAREN);
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNS) {
					{
					State = 468; Match(RETURNS);
					State = 469; outputParameterType();
					}
				}

				State = 472; Match(IS);
				{
				State = 473; expr(0);
				}
				State = 474; Match(END);
				State = 475; Match(OPERATOR);
				}
				break;
			case 2:
				_localctx = new DefDatapointRulesetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; Match(DEFINE);
				State = 478; Match(DATAPOINT);
				State = 479; Match(RULESET);
				State = 480; rulesetID();
				State = 481; Match(LPAREN);
				State = 482; rulesetSignature();
				State = 483; Match(RPAREN);
				State = 484; Match(IS);
				State = 485; ruleClauseDatapoint();
				State = 486; Match(END);
				State = 487; Match(DATAPOINT);
				State = 488; Match(RULESET);
				}
				break;
			case 3:
				_localctx = new DefHierarchicalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 490; Match(DEFINE);
				State = 491; Match(HIERARCHICAL);
				State = 492; Match(RULESET);
				State = 493; rulesetID();
				State = 494; Match(LPAREN);
				State = 495; hierRuleSignature();
				State = 496; Match(RPAREN);
				State = 497; Match(IS);
				State = 498; ruleClauseHierarchical();
				State = 499; Match(END);
				State = 500; Match(HIERARCHICAL);
				State = 501; Match(RULESET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericOperatorsContext : ParserRuleContext {
		public GenericOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericOperators; } }
	 
		public GenericOperatorsContext() { }
		public virtual void CopyFrom(GenericOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EvalAtomContext : GenericOperatorsContext {
		public ITerminalNode EVAL() { return GetToken(VtlParser.EVAL, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public RoutineNameContext routineName() {
			return GetRuleContext<RoutineNameContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public VarIDContext[] varID() {
			return GetRuleContexts<VarIDContext>();
		}
		public VarIDContext varID(int i) {
			return GetRuleContext<VarIDContext>(i);
		}
		public ScalarItemContext[] scalarItem() {
			return GetRuleContexts<ScalarItemContext>();
		}
		public ScalarItemContext scalarItem(int i) {
			return GetRuleContext<ScalarItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode LANGUAGE() { return GetToken(VtlParser.LANGUAGE, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(VtlParser.STRING_CONSTANT, 0); }
		public ITerminalNode RETURNS() { return GetToken(VtlParser.RETURNS, 0); }
		public EvalDatasetTypeContext evalDatasetType() {
			return GetRuleContext<EvalDatasetTypeContext>(0);
		}
		public EvalAtomContext(GenericOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterEvalAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitEvalAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExprDatasetContext : GenericOperatorsContext {
		public ITerminalNode CAST() { return GetToken(VtlParser.CAST, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public BasicScalarTypeContext basicScalarType() {
			return GetRuleContext<BasicScalarTypeContext>(0);
		}
		public ValueDomainNameContext valueDomainName() {
			return GetRuleContext<ValueDomainNameContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(VtlParser.STRING_CONSTANT, 0); }
		public CastExprDatasetContext(GenericOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCastExprDataset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCastExprDataset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExprDataset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallDatasetContext : GenericOperatorsContext {
		public OperatorIDContext operatorID() {
			return GetRuleContext<OperatorIDContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public CallDatasetContext(GenericOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCallDataset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCallDataset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallDataset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericOperatorsContext genericOperators() {
		GenericOperatorsContext _localctx = new GenericOperatorsContext(Context, State);
		EnterRule(_localctx, 34, RULE_genericOperators);
		int _la;
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new CallDatasetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; operatorID();
				State = 506; Match(LPAREN);
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << EVAL) | (1L << IF) | (1L << CURRENT_DATE) | (1L << NOT) | (1L << BETWEEN) | (1L << NULL_CONSTANT) | (1L << ISNULL) | (1L << UNION) | (1L << SYMDIFF) | (1L << INTERSECT) | (1L << CHECK) | (1L << EXISTS_IN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (MIN - 68)) | (1L << (MAX - 68)) | (1L << (ABS - 68)) | (1L << (LN - 68)) | (1L << (LOG - 68)) | (1L << (TRUNC - 68)) | (1L << (ROUND - 68)) | (1L << (POWER - 68)) | (1L << (MOD - 68)) | (1L << (LEN - 68)) | (1L << (TRIM - 68)) | (1L << (UCASE - 68)) | (1L << (LCASE - 68)) | (1L << (SUBSTR - 68)) | (1L << (SUM - 68)) | (1L << (AVG - 68)) | (1L << (MEDIAN - 68)) | (1L << (COUNT - 68)) | (1L << (EXP - 68)) | (1L << (CHARSET_MATCH - 68)) | (1L << (NVL - 68)) | (1L << (HIERARCHY - 68)) | (1L << (OPTIONAL - 68)) | (1L << (LTRIM - 68)) | (1L << (RTRIM - 68)) | (1L << (INSTR - 68)) | (1L << (REPLACE - 68)) | (1L << (CEIL - 68)) | (1L << (FLOOR - 68)) | (1L << (SQRT - 68)) | (1L << (SETDIFF - 68)) | (1L << (STDDEV_POP - 68)) | (1L << (STDDEV_SAMP - 68)) | (1L << (VAR_POP - 68)) | (1L << (VAR_SAMP - 68)))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (FIRST_VALUE - 135)) | (1L << (LAST_VALUE - 135)) | (1L << (LAG - 135)) | (1L << (LEAD - 135)) | (1L << (RATIO_TO_REPORT - 135)) | (1L << (FILL_TIME_SERIES - 135)) | (1L << (FLOW_TO_STOCK - 135)) | (1L << (STOCK_TO_FLOW - 135)) | (1L << (TIMESHIFT - 135)) | (1L << (INNER_JOIN - 135)) | (1L << (LEFT_JOIN - 135)) | (1L << (CROSS_JOIN - 135)) | (1L << (FULL_JOIN - 135)) | (1L << (PERIOD_INDICATOR - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (TIME_AGG - 199)) | (1L << (CAST - 199)) | (1L << (CHECK_DATAPOINT - 199)) | (1L << (CHECK_HIERARCHY - 199)) | (1L << (INTEGER_CONSTANT - 199)) | (1L << (NUMBER_CONSTANT - 199)) | (1L << (BOOLEAN_CONSTANT - 199)) | (1L << (STRING_CONSTANT - 199)) | (1L << (IDENTIFIER - 199)))) != 0)) {
					{
					State = 507; parameter();
					State = 512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 508; Match(COMMA);
						State = 509; parameter();
						}
						}
						State = 514;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 517; Match(RPAREN);
				}
				break;
			case EVAL:
				_localctx = new EvalAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; Match(EVAL);
				State = 520; Match(LPAREN);
				State = 521; routineName();
				State = 522; Match(LPAREN);
				State = 525;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 523; varID();
					}
					break;
				case NULL_CONSTANT:
				case CAST:
				case INTEGER_CONSTANT:
				case NUMBER_CONSTANT:
				case BOOLEAN_CONSTANT:
				case STRING_CONSTANT:
					{
					State = 524; scalarItem();
					}
					break;
				case RPAREN:
				case COMMA:
					break;
				default:
					break;
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 527; Match(COMMA);
					State = 530;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IDENTIFIER:
						{
						State = 528; varID();
						}
						break;
					case NULL_CONSTANT:
					case CAST:
					case INTEGER_CONSTANT:
					case NUMBER_CONSTANT:
					case BOOLEAN_CONSTANT:
					case STRING_CONSTANT:
						{
						State = 529; scalarItem();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 536;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 537; Match(RPAREN);
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LANGUAGE) {
					{
					State = 538; Match(LANGUAGE);
					State = 539; Match(STRING_CONSTANT);
					}
				}

				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNS) {
					{
					State = 542; Match(RETURNS);
					State = 543; evalDatasetType();
					}
				}

				State = 546; Match(RPAREN);
				}
				break;
			case CAST:
				_localctx = new CastExprDatasetContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 548; Match(CAST);
				State = 549; Match(LPAREN);
				State = 550; expr(0);
				State = 551; Match(COMMA);
				State = 554;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOLEAN:
				case DATE:
				case TIME_PERIOD:
				case NUMBER:
				case STRING:
				case TIME:
				case INTEGER:
				case DURATION:
				case SCALAR:
					{
					State = 552; basicScalarType();
					}
					break;
				case IDENTIFIER:
					{
					State = 553; valueDomainName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 556; Match(COMMA);
					State = 557; Match(STRING_CONSTANT);
					}
				}

				State = 560; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericOperatorsComponentContext : ParserRuleContext {
		public GenericOperatorsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericOperatorsComponent; } }
	 
		public GenericOperatorsComponentContext() { }
		public virtual void CopyFrom(GenericOperatorsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EvalAtomComponentContext : GenericOperatorsComponentContext {
		public ITerminalNode EVAL() { return GetToken(VtlParser.EVAL, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public RoutineNameContext routineName() {
			return GetRuleContext<RoutineNameContext>(0);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ScalarItemContext[] scalarItem() {
			return GetRuleContexts<ScalarItemContext>();
		}
		public ScalarItemContext scalarItem(int i) {
			return GetRuleContext<ScalarItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode LANGUAGE() { return GetToken(VtlParser.LANGUAGE, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(VtlParser.STRING_CONSTANT, 0); }
		public ITerminalNode RETURNS() { return GetToken(VtlParser.RETURNS, 0); }
		public OutputParameterTypeComponentContext outputParameterTypeComponent() {
			return GetRuleContext<OutputParameterTypeComponentContext>(0);
		}
		public EvalAtomComponentContext(GenericOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterEvalAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitEvalAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExprComponentContext : GenericOperatorsComponentContext {
		public ITerminalNode CAST() { return GetToken(VtlParser.CAST, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public BasicScalarTypeContext basicScalarType() {
			return GetRuleContext<BasicScalarTypeContext>(0);
		}
		public ValueDomainNameContext valueDomainName() {
			return GetRuleContext<ValueDomainNameContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(VtlParser.STRING_CONSTANT, 0); }
		public CastExprComponentContext(GenericOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCastExprComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCastExprComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExprComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallComponentContext : GenericOperatorsComponentContext {
		public OperatorIDContext operatorID() {
			return GetRuleContext<OperatorIDContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ParameterComponentContext[] parameterComponent() {
			return GetRuleContexts<ParameterComponentContext>();
		}
		public ParameterComponentContext parameterComponent(int i) {
			return GetRuleContext<ParameterComponentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public CallComponentContext(GenericOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCallComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCallComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericOperatorsComponentContext genericOperatorsComponent() {
		GenericOperatorsComponentContext _localctx = new GenericOperatorsComponentContext(Context, State);
		EnterRule(_localctx, 36, RULE_genericOperatorsComponent);
		int _la;
		try {
			State = 621;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new CallComponentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 564; operatorID();
				State = 565; Match(LPAREN);
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << EVAL) | (1L << IF) | (1L << CURRENT_DATE) | (1L << NOT) | (1L << BETWEEN) | (1L << NULL_CONSTANT) | (1L << ISNULL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (RANK - 65)) | (1L << (MIN - 65)) | (1L << (MAX - 65)) | (1L << (ABS - 65)) | (1L << (LN - 65)) | (1L << (LOG - 65)) | (1L << (TRUNC - 65)) | (1L << (ROUND - 65)) | (1L << (POWER - 65)) | (1L << (MOD - 65)) | (1L << (LEN - 65)) | (1L << (TRIM - 65)) | (1L << (UCASE - 65)) | (1L << (LCASE - 65)) | (1L << (SUBSTR - 65)) | (1L << (SUM - 65)) | (1L << (AVG - 65)) | (1L << (MEDIAN - 65)) | (1L << (COUNT - 65)) | (1L << (EXP - 65)) | (1L << (CHARSET_MATCH - 65)) | (1L << (NVL - 65)) | (1L << (OPTIONAL - 65)) | (1L << (LTRIM - 65)) | (1L << (RTRIM - 65)) | (1L << (INSTR - 65)) | (1L << (REPLACE - 65)) | (1L << (CEIL - 65)) | (1L << (FLOOR - 65)) | (1L << (SQRT - 65)) | (1L << (STDDEV_POP - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (STDDEV_SAMP - 129)) | (1L << (VAR_POP - 129)) | (1L << (VAR_SAMP - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (LAST_VALUE - 129)) | (1L << (LAG - 129)) | (1L << (LEAD - 129)) | (1L << (RATIO_TO_REPORT - 129)) | (1L << (FILL_TIME_SERIES - 129)) | (1L << (FLOW_TO_STOCK - 129)) | (1L << (STOCK_TO_FLOW - 129)) | (1L << (TIMESHIFT - 129)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (PERIOD_INDICATOR - 196)) | (1L << (TIME_AGG - 196)) | (1L << (CAST - 196)) | (1L << (INTEGER_CONSTANT - 196)) | (1L << (NUMBER_CONSTANT - 196)) | (1L << (BOOLEAN_CONSTANT - 196)) | (1L << (STRING_CONSTANT - 196)) | (1L << (IDENTIFIER - 196)))) != 0)) {
					{
					State = 566; parameterComponent();
					State = 571;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 567; Match(COMMA);
						State = 568; parameterComponent();
						}
						}
						State = 573;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 576; Match(RPAREN);
				}
				break;
			case CAST:
				_localctx = new CastExprComponentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 578; Match(CAST);
				State = 579; Match(LPAREN);
				State = 580; exprComponent(0);
				State = 581; Match(COMMA);
				State = 584;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOLEAN:
				case DATE:
				case TIME_PERIOD:
				case NUMBER:
				case STRING:
				case TIME:
				case INTEGER:
				case DURATION:
				case SCALAR:
					{
					State = 582; basicScalarType();
					}
					break;
				case IDENTIFIER:
					{
					State = 583; valueDomainName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 586; Match(COMMA);
					State = 587; Match(STRING_CONSTANT);
					}
				}

				State = 590; Match(RPAREN);
				}
				break;
			case EVAL:
				_localctx = new EvalAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 592; Match(EVAL);
				State = 593; Match(LPAREN);
				State = 594; routineName();
				State = 595; Match(LPAREN);
				State = 598;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 596; componentID();
					}
					break;
				case NULL_CONSTANT:
				case CAST:
				case INTEGER_CONSTANT:
				case NUMBER_CONSTANT:
				case BOOLEAN_CONSTANT:
				case STRING_CONSTANT:
					{
					State = 597; scalarItem();
					}
					break;
				case RPAREN:
				case COMMA:
					break;
				default:
					break;
				}
				State = 607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 600; Match(COMMA);
					State = 603;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IDENTIFIER:
						{
						State = 601; componentID();
						}
						break;
					case NULL_CONSTANT:
					case CAST:
					case INTEGER_CONSTANT:
					case NUMBER_CONSTANT:
					case BOOLEAN_CONSTANT:
					case STRING_CONSTANT:
						{
						State = 602; scalarItem();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 609;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 610; Match(RPAREN);
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LANGUAGE) {
					{
					State = 611; Match(LANGUAGE);
					State = 612; Match(STRING_CONSTANT);
					}
				}

				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNS) {
					{
					State = 615; Match(RETURNS);
					State = 616; outputParameterTypeComponent();
					}
				}

				State = 619; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterComponentContext : ParserRuleContext {
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public ParameterComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterParameterComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitParameterComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterComponentContext parameterComponent() {
		ParameterComponentContext _localctx = new ParameterComponentContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameterComponent);
		try {
			State = 625;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case EVAL:
			case IF:
			case CURRENT_DATE:
			case NOT:
			case BETWEEN:
			case NULL_CONSTANT:
			case ISNULL:
			case RANK:
			case MIN:
			case MAX:
			case ABS:
			case LN:
			case LOG:
			case TRUNC:
			case ROUND:
			case POWER:
			case MOD:
			case LEN:
			case TRIM:
			case UCASE:
			case LCASE:
			case SUBSTR:
			case SUM:
			case AVG:
			case MEDIAN:
			case COUNT:
			case EXP:
			case CHARSET_MATCH:
			case NVL:
			case LTRIM:
			case RTRIM:
			case INSTR:
			case REPLACE:
			case CEIL:
			case FLOOR:
			case SQRT:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case FIRST_VALUE:
			case LAST_VALUE:
			case LAG:
			case LEAD:
			case RATIO_TO_REPORT:
			case FILL_TIME_SERIES:
			case FLOW_TO_STOCK:
			case STOCK_TO_FLOW:
			case TIMESHIFT:
			case PERIOD_INDICATOR:
			case TIME_AGG:
			case CAST:
			case INTEGER_CONSTANT:
			case NUMBER_CONSTANT:
			case BOOLEAN_CONSTANT:
			case STRING_CONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 623; exprComponent(0);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 624; Match(OPTIONAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case EVAL:
			case IF:
			case CURRENT_DATE:
			case NOT:
			case BETWEEN:
			case NULL_CONSTANT:
			case ISNULL:
			case UNION:
			case SYMDIFF:
			case INTERSECT:
			case CHECK:
			case EXISTS_IN:
			case MIN:
			case MAX:
			case ABS:
			case LN:
			case LOG:
			case TRUNC:
			case ROUND:
			case POWER:
			case MOD:
			case LEN:
			case TRIM:
			case UCASE:
			case LCASE:
			case SUBSTR:
			case SUM:
			case AVG:
			case MEDIAN:
			case COUNT:
			case EXP:
			case CHARSET_MATCH:
			case NVL:
			case HIERARCHY:
			case LTRIM:
			case RTRIM:
			case INSTR:
			case REPLACE:
			case CEIL:
			case FLOOR:
			case SQRT:
			case SETDIFF:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case FIRST_VALUE:
			case LAST_VALUE:
			case LAG:
			case LEAD:
			case RATIO_TO_REPORT:
			case FILL_TIME_SERIES:
			case FLOW_TO_STOCK:
			case STOCK_TO_FLOW:
			case TIMESHIFT:
			case INNER_JOIN:
			case LEFT_JOIN:
			case CROSS_JOIN:
			case FULL_JOIN:
			case PERIOD_INDICATOR:
			case TIME_AGG:
			case CAST:
			case CHECK_DATAPOINT:
			case CHECK_HIERARCHY:
			case INTEGER_CONSTANT:
			case NUMBER_CONSTANT:
			case BOOLEAN_CONSTANT:
			case STRING_CONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 627; expr(0);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 628; Match(OPTIONAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringOperatorsContext : ParserRuleContext {
		public StringOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringOperators; } }
	 
		public StringOperatorsContext() { }
		public virtual void CopyFrom(StringOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrAtomContext : StringOperatorsContext {
		public ExprContext pattern;
		public OptionalExprContext startParameter;
		public OptionalExprContext occurrenceParameter;
		public ITerminalNode INSTR() { return GetToken(VtlParser.INSTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public OptionalExprContext[] optionalExpr() {
			return GetRuleContexts<OptionalExprContext>();
		}
		public OptionalExprContext optionalExpr(int i) {
			return GetRuleContext<OptionalExprContext>(i);
		}
		public InstrAtomContext(StringOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInstrAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInstrAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryStringFunctionContext : StringOperatorsContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode TRIM() { return GetToken(VtlParser.TRIM, 0); }
		public ITerminalNode LTRIM() { return GetToken(VtlParser.LTRIM, 0); }
		public ITerminalNode RTRIM() { return GetToken(VtlParser.RTRIM, 0); }
		public ITerminalNode UCASE() { return GetToken(VtlParser.UCASE, 0); }
		public ITerminalNode LCASE() { return GetToken(VtlParser.LCASE, 0); }
		public ITerminalNode LEN() { return GetToken(VtlParser.LEN, 0); }
		public UnaryStringFunctionContext(StringOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryStringFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryStringFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryStringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrAtomContext : StringOperatorsContext {
		public OptionalExprContext startParameter;
		public OptionalExprContext endParameter;
		public ITerminalNode SUBSTR() { return GetToken(VtlParser.SUBSTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public OptionalExprContext[] optionalExpr() {
			return GetRuleContexts<OptionalExprContext>();
		}
		public OptionalExprContext optionalExpr(int i) {
			return GetRuleContext<OptionalExprContext>(i);
		}
		public SubstrAtomContext(StringOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSubstrAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSubstrAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReplaceAtomContext : StringOperatorsContext {
		public ExprContext param;
		public ITerminalNode REPLACE() { return GetToken(VtlParser.REPLACE, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public OptionalExprContext optionalExpr() {
			return GetRuleContext<OptionalExprContext>(0);
		}
		public ReplaceAtomContext(StringOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterReplaceAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitReplaceAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringOperatorsContext stringOperators() {
		StringOperatorsContext _localctx = new StringOperatorsContext(Context, State);
		EnterRule(_localctx, 42, RULE_stringOperators);
		int _la;
		try {
			State = 679;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEN:
			case TRIM:
			case UCASE:
			case LCASE:
			case LTRIM:
			case RTRIM:
				_localctx = new UnaryStringFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 631;
				((UnaryStringFunctionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LEN - 81)) | (1L << (TRIM - 81)) | (1L << (UCASE - 81)) | (1L << (LCASE - 81)) | (1L << (LTRIM - 81)) | (1L << (RTRIM - 81)))) != 0)) ) {
					((UnaryStringFunctionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 632; Match(LPAREN);
				State = 633; expr(0);
				State = 634; Match(RPAREN);
				}
				break;
			case SUBSTR:
				_localctx = new SubstrAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 636; Match(SUBSTR);
				State = 637; Match(LPAREN);
				State = 638; expr(0);
				State = 649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						{
						State = 639; Match(COMMA);
						State = 640; ((SubstrAtomContext)_localctx).startParameter = optionalExpr();
						}
						{
						State = 642; Match(COMMA);
						State = 643; ((SubstrAtomContext)_localctx).endParameter = optionalExpr();
						}
						}
					}

					}
					break;
				case 2:
					{
					State = 647; Match(COMMA);
					State = 648; ((SubstrAtomContext)_localctx).startParameter = optionalExpr();
					}
					break;
				}
				State = 651; Match(RPAREN);
				}
				break;
			case REPLACE:
				_localctx = new ReplaceAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 653; Match(REPLACE);
				State = 654; Match(LPAREN);
				State = 655; expr(0);
				State = 656; Match(COMMA);
				State = 657; ((ReplaceAtomContext)_localctx).param = expr(0);
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 658; Match(COMMA);
					State = 659; optionalExpr();
					}
				}

				State = 662; Match(RPAREN);
				}
				break;
			case INSTR:
				_localctx = new InstrAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 664; Match(INSTR);
				State = 665; Match(LPAREN);
				State = 666; expr(0);
				State = 667; Match(COMMA);
				State = 668; ((InstrAtomContext)_localctx).pattern = expr(0);
				State = 671;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 669; Match(COMMA);
					State = 670; ((InstrAtomContext)_localctx).startParameter = optionalExpr();
					}
					break;
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 673; Match(COMMA);
					State = 674; ((InstrAtomContext)_localctx).occurrenceParameter = optionalExpr();
					}
				}

				State = 677; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringOperatorsComponentContext : ParserRuleContext {
		public StringOperatorsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringOperatorsComponent; } }
	 
		public StringOperatorsComponentContext() { }
		public virtual void CopyFrom(StringOperatorsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReplaceAtomComponentContext : StringOperatorsComponentContext {
		public ExprComponentContext param;
		public ITerminalNode REPLACE() { return GetToken(VtlParser.REPLACE, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public OptionalExprComponentContext optionalExprComponent() {
			return GetRuleContext<OptionalExprComponentContext>(0);
		}
		public ReplaceAtomComponentContext(StringOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterReplaceAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitReplaceAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryStringFunctionComponentContext : StringOperatorsComponentContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode TRIM() { return GetToken(VtlParser.TRIM, 0); }
		public ITerminalNode LTRIM() { return GetToken(VtlParser.LTRIM, 0); }
		public ITerminalNode RTRIM() { return GetToken(VtlParser.RTRIM, 0); }
		public ITerminalNode UCASE() { return GetToken(VtlParser.UCASE, 0); }
		public ITerminalNode LCASE() { return GetToken(VtlParser.LCASE, 0); }
		public ITerminalNode LEN() { return GetToken(VtlParser.LEN, 0); }
		public UnaryStringFunctionComponentContext(StringOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryStringFunctionComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryStringFunctionComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryStringFunctionComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrAtomComponentContext : StringOperatorsComponentContext {
		public OptionalExprComponentContext startParameter;
		public OptionalExprComponentContext endParameter;
		public ITerminalNode SUBSTR() { return GetToken(VtlParser.SUBSTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public OptionalExprComponentContext[] optionalExprComponent() {
			return GetRuleContexts<OptionalExprComponentContext>();
		}
		public OptionalExprComponentContext optionalExprComponent(int i) {
			return GetRuleContext<OptionalExprComponentContext>(i);
		}
		public SubstrAtomComponentContext(StringOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSubstrAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSubstrAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstrAtomComponentContext : StringOperatorsComponentContext {
		public ExprComponentContext pattern;
		public OptionalExprComponentContext startParameter;
		public OptionalExprComponentContext occurrenceParameter;
		public ITerminalNode INSTR() { return GetToken(VtlParser.INSTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public OptionalExprComponentContext[] optionalExprComponent() {
			return GetRuleContexts<OptionalExprComponentContext>();
		}
		public OptionalExprComponentContext optionalExprComponent(int i) {
			return GetRuleContext<OptionalExprComponentContext>(i);
		}
		public InstrAtomComponentContext(StringOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInstrAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInstrAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringOperatorsComponentContext stringOperatorsComponent() {
		StringOperatorsComponentContext _localctx = new StringOperatorsComponentContext(Context, State);
		EnterRule(_localctx, 44, RULE_stringOperatorsComponent);
		int _la;
		try {
			State = 729;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEN:
			case TRIM:
			case UCASE:
			case LCASE:
			case LTRIM:
			case RTRIM:
				_localctx = new UnaryStringFunctionComponentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 681;
				((UnaryStringFunctionComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LEN - 81)) | (1L << (TRIM - 81)) | (1L << (UCASE - 81)) | (1L << (LCASE - 81)) | (1L << (LTRIM - 81)) | (1L << (RTRIM - 81)))) != 0)) ) {
					((UnaryStringFunctionComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 682; Match(LPAREN);
				State = 683; exprComponent(0);
				State = 684; Match(RPAREN);
				}
				break;
			case SUBSTR:
				_localctx = new SubstrAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 686; Match(SUBSTR);
				State = 687; Match(LPAREN);
				State = 688; exprComponent(0);
				State = 699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 695;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						{
						State = 689; Match(COMMA);
						State = 690; ((SubstrAtomComponentContext)_localctx).startParameter = optionalExprComponent();
						}
						{
						State = 692; Match(COMMA);
						State = 693; ((SubstrAtomComponentContext)_localctx).endParameter = optionalExprComponent();
						}
						}
					}

					}
					break;
				case 2:
					{
					State = 697; Match(COMMA);
					State = 698; ((SubstrAtomComponentContext)_localctx).startParameter = optionalExprComponent();
					}
					break;
				}
				State = 701; Match(RPAREN);
				}
				break;
			case REPLACE:
				_localctx = new ReplaceAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 703; Match(REPLACE);
				State = 704; Match(LPAREN);
				State = 705; exprComponent(0);
				State = 706; Match(COMMA);
				State = 707; ((ReplaceAtomComponentContext)_localctx).param = exprComponent(0);
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 708; Match(COMMA);
					State = 709; optionalExprComponent();
					}
				}

				State = 712; Match(RPAREN);
				}
				break;
			case INSTR:
				_localctx = new InstrAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 714; Match(INSTR);
				State = 715; Match(LPAREN);
				State = 716; exprComponent(0);
				State = 717; Match(COMMA);
				State = 718; ((InstrAtomComponentContext)_localctx).pattern = exprComponent(0);
				State = 721;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 719; Match(COMMA);
					State = 720; ((InstrAtomComponentContext)_localctx).startParameter = optionalExprComponent();
					}
					break;
				}
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 723; Match(COMMA);
					State = 724; ((InstrAtomComponentContext)_localctx).occurrenceParameter = optionalExprComponent();
					}
				}

				State = 727; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericOperatorsContext : ParserRuleContext {
		public NumericOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericOperators; } }
	 
		public NumericOperatorsContext() { }
		public virtual void CopyFrom(NumericOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryNumericContext : NumericOperatorsContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode CEIL() { return GetToken(VtlParser.CEIL, 0); }
		public ITerminalNode FLOOR() { return GetToken(VtlParser.FLOOR, 0); }
		public ITerminalNode ABS() { return GetToken(VtlParser.ABS, 0); }
		public ITerminalNode EXP() { return GetToken(VtlParser.EXP, 0); }
		public ITerminalNode LN() { return GetToken(VtlParser.LN, 0); }
		public ITerminalNode SQRT() { return GetToken(VtlParser.SQRT, 0); }
		public UnaryNumericContext(NumericOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryNumeric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryNumeric(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryWithOptionalNumericContext : NumericOperatorsContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode ROUND() { return GetToken(VtlParser.ROUND, 0); }
		public ITerminalNode TRUNC() { return GetToken(VtlParser.TRUNC, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public OptionalExprContext optionalExpr() {
			return GetRuleContext<OptionalExprContext>(0);
		}
		public UnaryWithOptionalNumericContext(NumericOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryWithOptionalNumeric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryWithOptionalNumeric(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryWithOptionalNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNumericContext : NumericOperatorsContext {
		public IToken op;
		public ExprContext left;
		public ExprContext right;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VtlParser.MOD, 0); }
		public ITerminalNode POWER() { return GetToken(VtlParser.POWER, 0); }
		public ITerminalNode LOG() { return GetToken(VtlParser.LOG, 0); }
		public BinaryNumericContext(NumericOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBinaryNumeric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBinaryNumeric(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericOperatorsContext numericOperators() {
		NumericOperatorsContext _localctx = new NumericOperatorsContext(Context, State);
		EnterRule(_localctx, 46, RULE_numericOperators);
		int _la;
		try {
			State = 752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABS:
			case LN:
			case EXP:
			case CEIL:
			case FLOOR:
			case SQRT:
				_localctx = new UnaryNumericContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 731;
				((UnaryNumericContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (ABS - 73)) | (1L << (LN - 73)) | (1L << (EXP - 73)) | (1L << (CEIL - 73)) | (1L << (FLOOR - 73)) | (1L << (SQRT - 73)))) != 0)) ) {
					((UnaryNumericContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 732; Match(LPAREN);
				State = 733; expr(0);
				State = 734; Match(RPAREN);
				}
				break;
			case TRUNC:
			case ROUND:
				_localctx = new UnaryWithOptionalNumericContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 736;
				((UnaryWithOptionalNumericContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TRUNC || _la==ROUND) ) {
					((UnaryWithOptionalNumericContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 737; Match(LPAREN);
				State = 738; expr(0);
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 739; Match(COMMA);
					State = 740; optionalExpr();
					}
				}

				State = 743; Match(RPAREN);
				}
				break;
			case LOG:
			case POWER:
			case MOD:
				_localctx = new BinaryNumericContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 745;
				((BinaryNumericContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (LOG - 76)) | (1L << (POWER - 76)) | (1L << (MOD - 76)))) != 0)) ) {
					((BinaryNumericContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 746; Match(LPAREN);
				State = 747; ((BinaryNumericContext)_localctx).left = expr(0);
				State = 748; Match(COMMA);
				State = 749; ((BinaryNumericContext)_localctx).right = expr(0);
				State = 750; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericOperatorsComponentContext : ParserRuleContext {
		public NumericOperatorsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericOperatorsComponent; } }
	 
		public NumericOperatorsComponentContext() { }
		public virtual void CopyFrom(NumericOperatorsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryNumericComponentContext : NumericOperatorsComponentContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode CEIL() { return GetToken(VtlParser.CEIL, 0); }
		public ITerminalNode FLOOR() { return GetToken(VtlParser.FLOOR, 0); }
		public ITerminalNode ABS() { return GetToken(VtlParser.ABS, 0); }
		public ITerminalNode EXP() { return GetToken(VtlParser.EXP, 0); }
		public ITerminalNode LN() { return GetToken(VtlParser.LN, 0); }
		public ITerminalNode SQRT() { return GetToken(VtlParser.SQRT, 0); }
		public UnaryNumericComponentContext(NumericOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryNumericComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryNumericComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNumericComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryNumericComponentContext : NumericOperatorsComponentContext {
		public IToken op;
		public ExprComponentContext left;
		public ExprComponentContext right;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VtlParser.MOD, 0); }
		public ITerminalNode POWER() { return GetToken(VtlParser.POWER, 0); }
		public ITerminalNode LOG() { return GetToken(VtlParser.LOG, 0); }
		public BinaryNumericComponentContext(NumericOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBinaryNumericComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBinaryNumericComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryNumericComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryWithOptionalNumericComponentContext : NumericOperatorsComponentContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode ROUND() { return GetToken(VtlParser.ROUND, 0); }
		public ITerminalNode TRUNC() { return GetToken(VtlParser.TRUNC, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public OptionalExprComponentContext optionalExprComponent() {
			return GetRuleContext<OptionalExprComponentContext>(0);
		}
		public UnaryWithOptionalNumericComponentContext(NumericOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnaryWithOptionalNumericComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnaryWithOptionalNumericComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryWithOptionalNumericComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericOperatorsComponentContext numericOperatorsComponent() {
		NumericOperatorsComponentContext _localctx = new NumericOperatorsComponentContext(Context, State);
		EnterRule(_localctx, 48, RULE_numericOperatorsComponent);
		int _la;
		try {
			State = 775;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABS:
			case LN:
			case EXP:
			case CEIL:
			case FLOOR:
			case SQRT:
				_localctx = new UnaryNumericComponentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 754;
				((UnaryNumericComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (ABS - 73)) | (1L << (LN - 73)) | (1L << (EXP - 73)) | (1L << (CEIL - 73)) | (1L << (FLOOR - 73)) | (1L << (SQRT - 73)))) != 0)) ) {
					((UnaryNumericComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 755; Match(LPAREN);
				State = 756; exprComponent(0);
				State = 757; Match(RPAREN);
				}
				break;
			case TRUNC:
			case ROUND:
				_localctx = new UnaryWithOptionalNumericComponentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 759;
				((UnaryWithOptionalNumericComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TRUNC || _la==ROUND) ) {
					((UnaryWithOptionalNumericComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 760; Match(LPAREN);
				State = 761; exprComponent(0);
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 762; Match(COMMA);
					State = 763; optionalExprComponent();
					}
				}

				State = 766; Match(RPAREN);
				}
				break;
			case LOG:
			case POWER:
			case MOD:
				_localctx = new BinaryNumericComponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 768;
				((BinaryNumericComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (LOG - 76)) | (1L << (POWER - 76)) | (1L << (MOD - 76)))) != 0)) ) {
					((BinaryNumericComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 769; Match(LPAREN);
				State = 770; ((BinaryNumericComponentContext)_localctx).left = exprComponent(0);
				State = 771; Match(COMMA);
				State = 772; ((BinaryNumericComponentContext)_localctx).right = exprComponent(0);
				State = 773; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorsContext : ParserRuleContext {
		public ComparisonOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperators; } }
	 
		public ComparisonOperatorsContext() { }
		public virtual void CopyFrom(ComparisonOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BetweenAtomContext : ComparisonOperatorsContext {
		public ExprContext op;
		public ExprContext from_;
		public ExprContext to_;
		public ITerminalNode BETWEEN() { return GetToken(VtlParser.BETWEEN, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BetweenAtomContext(ComparisonOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBetweenAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBetweenAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharsetMatchAtomContext : ComparisonOperatorsContext {
		public ExprContext op;
		public ExprContext pattern;
		public ITerminalNode CHARSET_MATCH() { return GetToken(VtlParser.CHARSET_MATCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CharsetMatchAtomContext(ComparisonOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCharsetMatchAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCharsetMatchAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetMatchAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullAtomContext : ComparisonOperatorsContext {
		public ITerminalNode ISNULL() { return GetToken(VtlParser.ISNULL, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public IsNullAtomContext(ComparisonOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterIsNullAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitIsNullAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistInAtomContext : ComparisonOperatorsContext {
		public ExprContext left;
		public ExprContext right;
		public ITerminalNode EXISTS_IN() { return GetToken(VtlParser.EXISTS_IN, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RetainTypeContext retainType() {
			return GetRuleContext<RetainTypeContext>(0);
		}
		public ExistInAtomContext(ComparisonOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterExistInAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitExistInAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistInAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorsContext comparisonOperators() {
		ComparisonOperatorsContext _localctx = new ComparisonOperatorsContext(Context, State);
		EnterRule(_localctx, 50, RULE_comparisonOperators);
		int _la;
		try {
			State = 809;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BETWEEN:
				_localctx = new BetweenAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; Match(BETWEEN);
				State = 778; Match(LPAREN);
				State = 779; ((BetweenAtomContext)_localctx).op = expr(0);
				State = 780; Match(COMMA);
				State = 781; ((BetweenAtomContext)_localctx).from_ = expr(0);
				State = 782; Match(COMMA);
				State = 783; ((BetweenAtomContext)_localctx).to_ = expr(0);
				State = 784; Match(RPAREN);
				}
				break;
			case CHARSET_MATCH:
				_localctx = new CharsetMatchAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 786; Match(CHARSET_MATCH);
				State = 787; Match(LPAREN);
				State = 788; ((CharsetMatchAtomContext)_localctx).op = expr(0);
				State = 789; Match(COMMA);
				State = 790; ((CharsetMatchAtomContext)_localctx).pattern = expr(0);
				State = 791; Match(RPAREN);
				}
				break;
			case ISNULL:
				_localctx = new IsNullAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 793; Match(ISNULL);
				State = 794; Match(LPAREN);
				State = 795; expr(0);
				State = 796; Match(RPAREN);
				}
				break;
			case EXISTS_IN:
				_localctx = new ExistInAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 798; Match(EXISTS_IN);
				State = 799; Match(LPAREN);
				State = 800; ((ExistInAtomContext)_localctx).left = expr(0);
				State = 801; Match(COMMA);
				State = 802; ((ExistInAtomContext)_localctx).right = expr(0);
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 803; Match(COMMA);
					State = 804; retainType();
					}
				}

				State = 807; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorsComponentContext : ParserRuleContext {
		public ComparisonOperatorsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperatorsComponent; } }
	 
		public ComparisonOperatorsComponentContext() { }
		public virtual void CopyFrom(ComparisonOperatorsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsNullAtomComponentContext : ComparisonOperatorsComponentContext {
		public ITerminalNode ISNULL() { return GetToken(VtlParser.ISNULL, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public IsNullAtomComponentContext(ComparisonOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterIsNullAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitIsNullAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharsetMatchAtomComponentContext : ComparisonOperatorsComponentContext {
		public ExprComponentContext op;
		public ExprComponentContext pattern;
		public ITerminalNode CHARSET_MATCH() { return GetToken(VtlParser.CHARSET_MATCH, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public CharsetMatchAtomComponentContext(ComparisonOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCharsetMatchAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCharsetMatchAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetMatchAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenAtomComponentContext : ComparisonOperatorsComponentContext {
		public ExprComponentContext op;
		public ExprComponentContext from_;
		public ExprComponentContext to_;
		public ITerminalNode BETWEEN() { return GetToken(VtlParser.BETWEEN, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public BetweenAtomComponentContext(ComparisonOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBetweenAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBetweenAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorsComponentContext comparisonOperatorsComponent() {
		ComparisonOperatorsComponentContext _localctx = new ComparisonOperatorsComponentContext(Context, State);
		EnterRule(_localctx, 52, RULE_comparisonOperatorsComponent);
		try {
			State = 832;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BETWEEN:
				_localctx = new BetweenAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 811; Match(BETWEEN);
				State = 812; Match(LPAREN);
				State = 813; ((BetweenAtomComponentContext)_localctx).op = exprComponent(0);
				State = 814; Match(COMMA);
				State = 815; ((BetweenAtomComponentContext)_localctx).from_ = exprComponent(0);
				State = 816; Match(COMMA);
				State = 817; ((BetweenAtomComponentContext)_localctx).to_ = exprComponent(0);
				State = 818; Match(RPAREN);
				}
				break;
			case CHARSET_MATCH:
				_localctx = new CharsetMatchAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 820; Match(CHARSET_MATCH);
				State = 821; Match(LPAREN);
				State = 822; ((CharsetMatchAtomComponentContext)_localctx).op = exprComponent(0);
				State = 823; Match(COMMA);
				State = 824; ((CharsetMatchAtomComponentContext)_localctx).pattern = exprComponent(0);
				State = 825; Match(RPAREN);
				}
				break;
			case ISNULL:
				_localctx = new IsNullAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 827; Match(ISNULL);
				State = 828; Match(LPAREN);
				State = 829; exprComponent(0);
				State = 830; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOperatorsContext : ParserRuleContext {
		public TimeOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOperators; } }
	 
		public TimeOperatorsContext() { }
		public virtual void CopyFrom(TimeOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FlowAtomContext : TimeOperatorsContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode FLOW_TO_STOCK() { return GetToken(VtlParser.FLOW_TO_STOCK, 0); }
		public ITerminalNode STOCK_TO_FLOW() { return GetToken(VtlParser.STOCK_TO_FLOW, 0); }
		public FlowAtomContext(TimeOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFlowAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFlowAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeShiftAtomContext : TimeOperatorsContext {
		public ITerminalNode TIMESHIFT() { return GetToken(VtlParser.TIMESHIFT, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public SignedIntegerContext signedInteger() {
			return GetRuleContext<SignedIntegerContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public TimeShiftAtomContext(TimeOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTimeShiftAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTimeShiftAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeShiftAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeAggAtomContext : TimeOperatorsContext {
		public IToken periodIndTo;
		public IToken periodIndFrom;
		public OptionalExprContext op;
		public ITerminalNode TIME_AGG() { return GetToken(VtlParser.TIME_AGG, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode[] STRING_CONSTANT() { return GetTokens(VtlParser.STRING_CONSTANT); }
		public ITerminalNode STRING_CONSTANT(int i) {
			return GetToken(VtlParser.STRING_CONSTANT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public OptionalExprContext optionalExpr() {
			return GetRuleContext<OptionalExprContext>(0);
		}
		public ITerminalNode FIRST() { return GetToken(VtlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(VtlParser.LAST, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public TimeAggAtomContext(TimeOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTimeAggAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTimeAggAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeAggAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentDateAtomContext : TimeOperatorsContext {
		public ITerminalNode CURRENT_DATE() { return GetToken(VtlParser.CURRENT_DATE, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public CurrentDateAtomContext(TimeOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCurrentDateAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCurrentDateAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentDateAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PeriodAtomContext : TimeOperatorsContext {
		public ITerminalNode PERIOD_INDICATOR() { return GetToken(VtlParser.PERIOD_INDICATOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PeriodAtomContext(TimeOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterPeriodAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitPeriodAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FillTimeAtomContext : TimeOperatorsContext {
		public ITerminalNode FILL_TIME_SERIES() { return GetToken(VtlParser.FILL_TIME_SERIES, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode SINGLE() { return GetToken(VtlParser.SINGLE, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public FillTimeAtomContext(TimeOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFillTimeAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFillTimeAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillTimeAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOperatorsContext timeOperators() {
		TimeOperatorsContext _localctx = new TimeOperatorsContext(Context, State);
		EnterRule(_localctx, 54, RULE_timeOperators);
		int _la;
		try {
			State = 880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERIOD_INDICATOR:
				_localctx = new PeriodAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 834; Match(PERIOD_INDICATOR);
				State = 835; Match(LPAREN);
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << EVAL) | (1L << IF) | (1L << CURRENT_DATE) | (1L << NOT) | (1L << BETWEEN) | (1L << NULL_CONSTANT) | (1L << ISNULL) | (1L << UNION) | (1L << SYMDIFF) | (1L << INTERSECT) | (1L << CHECK) | (1L << EXISTS_IN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (MIN - 68)) | (1L << (MAX - 68)) | (1L << (ABS - 68)) | (1L << (LN - 68)) | (1L << (LOG - 68)) | (1L << (TRUNC - 68)) | (1L << (ROUND - 68)) | (1L << (POWER - 68)) | (1L << (MOD - 68)) | (1L << (LEN - 68)) | (1L << (TRIM - 68)) | (1L << (UCASE - 68)) | (1L << (LCASE - 68)) | (1L << (SUBSTR - 68)) | (1L << (SUM - 68)) | (1L << (AVG - 68)) | (1L << (MEDIAN - 68)) | (1L << (COUNT - 68)) | (1L << (EXP - 68)) | (1L << (CHARSET_MATCH - 68)) | (1L << (NVL - 68)) | (1L << (HIERARCHY - 68)) | (1L << (LTRIM - 68)) | (1L << (RTRIM - 68)) | (1L << (INSTR - 68)) | (1L << (REPLACE - 68)) | (1L << (CEIL - 68)) | (1L << (FLOOR - 68)) | (1L << (SQRT - 68)) | (1L << (SETDIFF - 68)) | (1L << (STDDEV_POP - 68)) | (1L << (STDDEV_SAMP - 68)) | (1L << (VAR_POP - 68)) | (1L << (VAR_SAMP - 68)))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (FIRST_VALUE - 135)) | (1L << (LAST_VALUE - 135)) | (1L << (LAG - 135)) | (1L << (LEAD - 135)) | (1L << (RATIO_TO_REPORT - 135)) | (1L << (FILL_TIME_SERIES - 135)) | (1L << (FLOW_TO_STOCK - 135)) | (1L << (STOCK_TO_FLOW - 135)) | (1L << (TIMESHIFT - 135)) | (1L << (INNER_JOIN - 135)) | (1L << (LEFT_JOIN - 135)) | (1L << (CROSS_JOIN - 135)) | (1L << (FULL_JOIN - 135)) | (1L << (PERIOD_INDICATOR - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (TIME_AGG - 199)) | (1L << (CAST - 199)) | (1L << (CHECK_DATAPOINT - 199)) | (1L << (CHECK_HIERARCHY - 199)) | (1L << (INTEGER_CONSTANT - 199)) | (1L << (NUMBER_CONSTANT - 199)) | (1L << (BOOLEAN_CONSTANT - 199)) | (1L << (STRING_CONSTANT - 199)) | (1L << (IDENTIFIER - 199)))) != 0)) {
					{
					State = 836; expr(0);
					}
				}

				State = 839; Match(RPAREN);
				}
				break;
			case FILL_TIME_SERIES:
				_localctx = new FillTimeAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 840; Match(FILL_TIME_SERIES);
				State = 841; Match(LPAREN);
				State = 842; expr(0);
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 843; Match(COMMA);
					State = 844;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==SINGLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 847; Match(RPAREN);
				}
				break;
			case FLOW_TO_STOCK:
			case STOCK_TO_FLOW:
				_localctx = new FlowAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 849;
				((FlowAtomContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FLOW_TO_STOCK || _la==STOCK_TO_FLOW) ) {
					((FlowAtomContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 850; Match(LPAREN);
				State = 851; expr(0);
				State = 852; Match(RPAREN);
				}
				break;
			case TIMESHIFT:
				_localctx = new TimeShiftAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 854; Match(TIMESHIFT);
				State = 855; Match(LPAREN);
				State = 856; expr(0);
				State = 857; Match(COMMA);
				State = 858; signedInteger();
				State = 859; Match(RPAREN);
				}
				break;
			case TIME_AGG:
				_localctx = new TimeAggAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 861; Match(TIME_AGG);
				State = 862; Match(LPAREN);
				State = 863; ((TimeAggAtomContext)_localctx).periodIndTo = Match(STRING_CONSTANT);
				State = 866;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 864; Match(COMMA);
					State = 865;
					((TimeAggAtomContext)_localctx).periodIndFrom = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==OPTIONAL || _la==STRING_CONSTANT) ) {
						((TimeAggAtomContext)_localctx).periodIndFrom = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 870;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 868; Match(COMMA);
					State = 869; ((TimeAggAtomContext)_localctx).op = optionalExpr();
					}
					break;
				}
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 872; Match(COMMA);
					State = 873;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST || _la==LAST) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 876; Match(RPAREN);
				}
				break;
			case CURRENT_DATE:
				_localctx = new CurrentDateAtomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 877; Match(CURRENT_DATE);
				State = 878; Match(LPAREN);
				State = 879; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeOperatorsComponentContext : ParserRuleContext {
		public TimeOperatorsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeOperatorsComponent; } }
	 
		public TimeOperatorsComponentContext() { }
		public virtual void CopyFrom(TimeOperatorsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PeriodAtomComponentContext : TimeOperatorsComponentContext {
		public ITerminalNode PERIOD_INDICATOR() { return GetToken(VtlParser.PERIOD_INDICATOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public PeriodAtomComponentContext(TimeOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterPeriodAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitPeriodAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriodAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeShiftAtomComponentContext : TimeOperatorsComponentContext {
		public ITerminalNode TIMESHIFT() { return GetToken(VtlParser.TIMESHIFT, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public SignedIntegerContext signedInteger() {
			return GetRuleContext<SignedIntegerContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public TimeShiftAtomComponentContext(TimeOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTimeShiftAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTimeShiftAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeShiftAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeAggAtomComponentContext : TimeOperatorsComponentContext {
		public IToken periodIndTo;
		public IToken periodIndFrom;
		public OptionalExprComponentContext op;
		public ITerminalNode TIME_AGG() { return GetToken(VtlParser.TIME_AGG, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode[] STRING_CONSTANT() { return GetTokens(VtlParser.STRING_CONSTANT); }
		public ITerminalNode STRING_CONSTANT(int i) {
			return GetToken(VtlParser.STRING_CONSTANT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public OptionalExprComponentContext optionalExprComponent() {
			return GetRuleContext<OptionalExprComponentContext>(0);
		}
		public ITerminalNode FIRST() { return GetToken(VtlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(VtlParser.LAST, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public TimeAggAtomComponentContext(TimeOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterTimeAggAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitTimeAggAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeAggAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentDateAtomComponentContext : TimeOperatorsComponentContext {
		public ITerminalNode CURRENT_DATE() { return GetToken(VtlParser.CURRENT_DATE, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public CurrentDateAtomComponentContext(TimeOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCurrentDateAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCurrentDateAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentDateAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlowAtomComponentContext : TimeOperatorsComponentContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode FLOW_TO_STOCK() { return GetToken(VtlParser.FLOW_TO_STOCK, 0); }
		public ITerminalNode STOCK_TO_FLOW() { return GetToken(VtlParser.STOCK_TO_FLOW, 0); }
		public FlowAtomComponentContext(TimeOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFlowAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFlowAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FillTimeAtomComponentContext : TimeOperatorsComponentContext {
		public ITerminalNode FILL_TIME_SERIES() { return GetToken(VtlParser.FILL_TIME_SERIES, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode SINGLE() { return GetToken(VtlParser.SINGLE, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public FillTimeAtomComponentContext(TimeOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterFillTimeAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitFillTimeAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillTimeAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeOperatorsComponentContext timeOperatorsComponent() {
		TimeOperatorsComponentContext _localctx = new TimeOperatorsComponentContext(Context, State);
		EnterRule(_localctx, 56, RULE_timeOperatorsComponent);
		int _la;
		try {
			State = 928;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PERIOD_INDICATOR:
				_localctx = new PeriodAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 882; Match(PERIOD_INDICATOR);
				State = 883; Match(LPAREN);
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << EVAL) | (1L << IF) | (1L << CURRENT_DATE) | (1L << NOT) | (1L << BETWEEN) | (1L << NULL_CONSTANT) | (1L << ISNULL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (RANK - 65)) | (1L << (MIN - 65)) | (1L << (MAX - 65)) | (1L << (ABS - 65)) | (1L << (LN - 65)) | (1L << (LOG - 65)) | (1L << (TRUNC - 65)) | (1L << (ROUND - 65)) | (1L << (POWER - 65)) | (1L << (MOD - 65)) | (1L << (LEN - 65)) | (1L << (TRIM - 65)) | (1L << (UCASE - 65)) | (1L << (LCASE - 65)) | (1L << (SUBSTR - 65)) | (1L << (SUM - 65)) | (1L << (AVG - 65)) | (1L << (MEDIAN - 65)) | (1L << (COUNT - 65)) | (1L << (EXP - 65)) | (1L << (CHARSET_MATCH - 65)) | (1L << (NVL - 65)) | (1L << (LTRIM - 65)) | (1L << (RTRIM - 65)) | (1L << (INSTR - 65)) | (1L << (REPLACE - 65)) | (1L << (CEIL - 65)) | (1L << (FLOOR - 65)) | (1L << (SQRT - 65)) | (1L << (STDDEV_POP - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (STDDEV_SAMP - 129)) | (1L << (VAR_POP - 129)) | (1L << (VAR_SAMP - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (LAST_VALUE - 129)) | (1L << (LAG - 129)) | (1L << (LEAD - 129)) | (1L << (RATIO_TO_REPORT - 129)) | (1L << (FILL_TIME_SERIES - 129)) | (1L << (FLOW_TO_STOCK - 129)) | (1L << (STOCK_TO_FLOW - 129)) | (1L << (TIMESHIFT - 129)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (PERIOD_INDICATOR - 196)) | (1L << (TIME_AGG - 196)) | (1L << (CAST - 196)) | (1L << (INTEGER_CONSTANT - 196)) | (1L << (NUMBER_CONSTANT - 196)) | (1L << (BOOLEAN_CONSTANT - 196)) | (1L << (STRING_CONSTANT - 196)) | (1L << (IDENTIFIER - 196)))) != 0)) {
					{
					State = 884; exprComponent(0);
					}
				}

				State = 887; Match(RPAREN);
				}
				break;
			case FILL_TIME_SERIES:
				_localctx = new FillTimeAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 888; Match(FILL_TIME_SERIES);
				State = 889; Match(LPAREN);
				State = 890; exprComponent(0);
				State = 893;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 891; Match(COMMA);
					State = 892;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==SINGLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 895; Match(RPAREN);
				}
				break;
			case FLOW_TO_STOCK:
			case STOCK_TO_FLOW:
				_localctx = new FlowAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 897;
				((FlowAtomComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FLOW_TO_STOCK || _la==STOCK_TO_FLOW) ) {
					((FlowAtomComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 898; Match(LPAREN);
				State = 899; exprComponent(0);
				State = 900; Match(RPAREN);
				}
				break;
			case TIMESHIFT:
				_localctx = new TimeShiftAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 902; Match(TIMESHIFT);
				State = 903; Match(LPAREN);
				State = 904; exprComponent(0);
				State = 905; Match(COMMA);
				State = 906; signedInteger();
				State = 907; Match(RPAREN);
				}
				break;
			case TIME_AGG:
				_localctx = new TimeAggAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 909; Match(TIME_AGG);
				State = 910; Match(LPAREN);
				State = 911; ((TimeAggAtomComponentContext)_localctx).periodIndTo = Match(STRING_CONSTANT);
				State = 914;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 912; Match(COMMA);
					State = 913;
					((TimeAggAtomComponentContext)_localctx).periodIndFrom = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==OPTIONAL || _la==STRING_CONSTANT) ) {
						((TimeAggAtomComponentContext)_localctx).periodIndFrom = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 918;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 916; Match(COMMA);
					State = 917; ((TimeAggAtomComponentContext)_localctx).op = optionalExprComponent();
					}
					break;
				}
				State = 922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 920; Match(COMMA);
					State = 921;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST || _la==LAST) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 924; Match(RPAREN);
				}
				break;
			case CURRENT_DATE:
				_localctx = new CurrentDateAtomComponentContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 925; Match(CURRENT_DATE);
				State = 926; Match(LPAREN);
				State = 927; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOperatorsContext : ParserRuleContext {
		public SetOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOperators; } }
	 
		public SetOperatorsContext() { }
		public virtual void CopyFrom(SetOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetOrSYmDiffAtomContext : SetOperatorsContext {
		public IToken op;
		public ExprContext left;
		public ExprContext right;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode SETDIFF() { return GetToken(VtlParser.SETDIFF, 0); }
		public ITerminalNode SYMDIFF() { return GetToken(VtlParser.SYMDIFF, 0); }
		public SetOrSYmDiffAtomContext(SetOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSetOrSYmDiffAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSetOrSYmDiffAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOrSYmDiffAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntersectAtomContext : SetOperatorsContext {
		public ExprContext left;
		public ITerminalNode INTERSECT() { return GetToken(VtlParser.INTERSECT, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public IntersectAtomContext(SetOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterIntersectAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitIntersectAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntersectAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionAtomContext : SetOperatorsContext {
		public ExprContext left;
		public ITerminalNode UNION() { return GetToken(VtlParser.UNION, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public UnionAtomContext(SetOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterUnionAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitUnionAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOperatorsContext setOperators() {
		SetOperatorsContext _localctx = new SetOperatorsContext(Context, State);
		EnterRule(_localctx, 58, RULE_setOperators);
		int _la;
		try {
			State = 959;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				_localctx = new UnionAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 930; Match(UNION);
				State = 931; Match(LPAREN);
				State = 932; ((UnionAtomContext)_localctx).left = expr(0);
				State = 935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 933; Match(COMMA);
					State = 934; expr(0);
					}
					}
					State = 937;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 939; Match(RPAREN);
				}
				break;
			case INTERSECT:
				_localctx = new IntersectAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 941; Match(INTERSECT);
				State = 942; Match(LPAREN);
				State = 943; ((IntersectAtomContext)_localctx).left = expr(0);
				State = 946;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 944; Match(COMMA);
					State = 945; expr(0);
					}
					}
					State = 948;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 950; Match(RPAREN);
				}
				break;
			case SYMDIFF:
			case SETDIFF:
				_localctx = new SetOrSYmDiffAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 952;
				((SetOrSYmDiffAtomContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SYMDIFF || _la==SETDIFF) ) {
					((SetOrSYmDiffAtomContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 953; Match(LPAREN);
				State = 954; ((SetOrSYmDiffAtomContext)_localctx).left = expr(0);
				State = 955; Match(COMMA);
				State = 956; ((SetOrSYmDiffAtomContext)_localctx).right = expr(0);
				State = 957; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchyOperatorsContext : ParserRuleContext {
		public ExprContext op;
		public IToken hrName;
		public ComponentIDContext ruleComponent;
		public ITerminalNode HIERARCHY() { return GetToken(VtlParser.HIERARCHY, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ConditionClauseContext conditionClause() {
			return GetRuleContext<ConditionClauseContext>(0);
		}
		public ITerminalNode RULE() { return GetToken(VtlParser.RULE, 0); }
		public ValidationModeContext validationMode() {
			return GetRuleContext<ValidationModeContext>(0);
		}
		public InputModeHierarchyContext inputModeHierarchy() {
			return GetRuleContext<InputModeHierarchyContext>(0);
		}
		public OutputModeHierarchyContext outputModeHierarchy() {
			return GetRuleContext<OutputModeHierarchyContext>(0);
		}
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public HierarchyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHierarchyOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHierarchyOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchyOperatorsContext hierarchyOperators() {
		HierarchyOperatorsContext _localctx = new HierarchyOperatorsContext(Context, State);
		EnterRule(_localctx, 60, RULE_hierarchyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961; Match(HIERARCHY);
			State = 962; Match(LPAREN);
			State = 963; _localctx.op = expr(0);
			State = 964; Match(COMMA);
			State = 965; _localctx.hrName = Match(IDENTIFIER);
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONDITION) {
				{
				State = 966; conditionClause();
				}
			}

			State = 971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 969; Match(RULE);
				State = 970; _localctx.ruleComponent = componentID();
				}
				break;
			}
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (NON_NULL - 213)) | (1L << (NON_ZERO - 213)) | (1L << (PARTIAL_NULL - 213)) | (1L << (PARTIAL_ZERO - 213)) | (1L << (ALWAYS_NULL - 213)) | (1L << (ALWAYS_ZERO - 213)))) != 0)) {
				{
				State = 973; validationMode();
				}
			}

			State = 977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATASET || _la==RULE || _la==RULE_PRIORITY) {
				{
				State = 976; inputModeHierarchy();
				}
			}

			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==COMPUTED) {
				{
				State = 979; outputModeHierarchy();
				}
			}

			State = 982; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidationOperatorsContext : ParserRuleContext {
		public ValidationOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validationOperators; } }
	 
		public ValidationOperatorsContext() { }
		public virtual void CopyFrom(ValidationOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValidateHRrulesetContext : ValidationOperatorsContext {
		public ExprContext op;
		public IToken hrName;
		public ITerminalNode CHECK_HIERARCHY() { return GetToken(VtlParser.CHECK_HIERARCHY, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ConditionClauseContext conditionClause() {
			return GetRuleContext<ConditionClauseContext>(0);
		}
		public ITerminalNode RULE() { return GetToken(VtlParser.RULE, 0); }
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public ValidationModeContext validationMode() {
			return GetRuleContext<ValidationModeContext>(0);
		}
		public InputModeContext inputMode() {
			return GetRuleContext<InputModeContext>(0);
		}
		public ValidationOutputContext validationOutput() {
			return GetRuleContext<ValidationOutputContext>(0);
		}
		public ValidateHRrulesetContext(ValidationOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValidateHRruleset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValidateHRruleset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidateHRruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValidateDPrulesetContext : ValidationOperatorsContext {
		public ExprContext op;
		public IToken dpName;
		public ITerminalNode CHECK_DATAPOINT() { return GetToken(VtlParser.CHECK_DATAPOINT, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ITerminalNode COMPONENTS() { return GetToken(VtlParser.COMPONENTS, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ValidationOutputContext validationOutput() {
			return GetRuleContext<ValidationOutputContext>(0);
		}
		public ValidateDPrulesetContext(ValidationOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValidateDPruleset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValidateDPruleset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidateDPruleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValidationSimpleContext : ValidationOperatorsContext {
		public ExprContext op;
		public ErCodeContext codeErr;
		public ErLevelContext levelCode;
		public IToken output;
		public ITerminalNode CHECK() { return GetToken(VtlParser.CHECK, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ImbalanceExprContext imbalanceExpr() {
			return GetRuleContext<ImbalanceExprContext>(0);
		}
		public ErCodeContext erCode() {
			return GetRuleContext<ErCodeContext>(0);
		}
		public ErLevelContext erLevel() {
			return GetRuleContext<ErLevelContext>(0);
		}
		public ITerminalNode INVALID() { return GetToken(VtlParser.INVALID, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public ValidationSimpleContext(ValidationOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValidationSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValidationSimple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidationSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidationOperatorsContext validationOperators() {
		ValidationOperatorsContext _localctx = new ValidationOperatorsContext(Context, State);
		EnterRule(_localctx, 62, RULE_validationOperators);
		int _la;
		try {
			State = 1045;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHECK_DATAPOINT:
				_localctx = new ValidateDPrulesetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 984; Match(CHECK_DATAPOINT);
				State = 985; Match(LPAREN);
				State = 986; ((ValidateDPrulesetContext)_localctx).op = expr(0);
				State = 987; Match(COMMA);
				State = 988; ((ValidateDPrulesetContext)_localctx).dpName = Match(IDENTIFIER);
				State = 998;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPONENTS) {
					{
					State = 989; Match(COMPONENTS);
					State = 990; componentID();
					State = 995;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 991; Match(COMMA);
						State = 992; componentID();
						}
						}
						State = 997;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1001;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==INVALID || _la==ALL_MEASURES) {
					{
					State = 1000; validationOutput();
					}
				}

				State = 1003; Match(RPAREN);
				}
				break;
			case CHECK_HIERARCHY:
				_localctx = new ValidateHRrulesetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1005; Match(CHECK_HIERARCHY);
				State = 1006; Match(LPAREN);
				State = 1007; ((ValidateHRrulesetContext)_localctx).op = expr(0);
				State = 1008; Match(COMMA);
				State = 1009; ((ValidateHRrulesetContext)_localctx).hrName = Match(IDENTIFIER);
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONDITION) {
					{
					State = 1010; conditionClause();
					}
				}

				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RULE) {
					{
					State = 1013; Match(RULE);
					State = 1014; componentID();
					}
				}

				State = 1018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (NON_NULL - 213)) | (1L << (NON_ZERO - 213)) | (1L << (PARTIAL_NULL - 213)) | (1L << (PARTIAL_ZERO - 213)) | (1L << (ALWAYS_NULL - 213)) | (1L << (ALWAYS_ZERO - 213)))) != 0)) {
					{
					State = 1017; validationMode();
					}
				}

				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATASET || _la==DATASET_PRIORITY) {
					{
					State = 1020; inputMode();
					}
				}

				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==INVALID || _la==ALL_MEASURES) {
					{
					State = 1023; validationOutput();
					}
				}

				State = 1026; Match(RPAREN);
				}
				break;
			case CHECK:
				_localctx = new ValidationSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1028; Match(CHECK);
				State = 1029; Match(LPAREN);
				State = 1030; ((ValidationSimpleContext)_localctx).op = expr(0);
				State = 1032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERRORCODE) {
					{
					State = 1031; ((ValidationSimpleContext)_localctx).codeErr = erCode();
					}
				}

				State = 1035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ERRORLEVEL) {
					{
					State = 1034; ((ValidationSimpleContext)_localctx).levelCode = erLevel();
					}
				}

				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMBALANCE) {
					{
					State = 1037; imbalanceExpr();
					}
				}

				State = 1041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==INVALID) {
					{
					State = 1040;
					((ValidationSimpleContext)_localctx).output = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==INVALID) ) {
						((ValidationSimpleContext)_localctx).output = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1043; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOperatorsContext : ParserRuleContext {
		public ConditionalOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOperators; } }
	 
		public ConditionalOperatorsContext() { }
		public virtual void CopyFrom(ConditionalOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NvlAtomContext : ConditionalOperatorsContext {
		public ExprContext left;
		public ExprContext right;
		public ITerminalNode NVL() { return GetToken(VtlParser.NVL, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public NvlAtomContext(ConditionalOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterNvlAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitNvlAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNvlAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOperatorsContext conditionalOperators() {
		ConditionalOperatorsContext _localctx = new ConditionalOperatorsContext(Context, State);
		EnterRule(_localctx, 64, RULE_conditionalOperators);
		try {
			_localctx = new NvlAtomContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047; Match(NVL);
			State = 1048; Match(LPAREN);
			State = 1049; ((NvlAtomContext)_localctx).left = expr(0);
			State = 1050; Match(COMMA);
			State = 1051; ((NvlAtomContext)_localctx).right = expr(0);
			State = 1052; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOperatorsComponentContext : ParserRuleContext {
		public ConditionalOperatorsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOperatorsComponent; } }
	 
		public ConditionalOperatorsComponentContext() { }
		public virtual void CopyFrom(ConditionalOperatorsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NvlAtomComponentContext : ConditionalOperatorsComponentContext {
		public ExprComponentContext left;
		public ExprComponentContext right;
		public ITerminalNode NVL() { return GetToken(VtlParser.NVL, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public NvlAtomComponentContext(ConditionalOperatorsComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterNvlAtomComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitNvlAtomComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNvlAtomComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOperatorsComponentContext conditionalOperatorsComponent() {
		ConditionalOperatorsComponentContext _localctx = new ConditionalOperatorsComponentContext(Context, State);
		EnterRule(_localctx, 66, RULE_conditionalOperatorsComponent);
		try {
			_localctx = new NvlAtomComponentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054; Match(NVL);
			State = 1055; Match(LPAREN);
			State = 1056; ((NvlAtomComponentContext)_localctx).left = exprComponent(0);
			State = 1057; Match(COMMA);
			State = 1058; ((NvlAtomComponentContext)_localctx).right = exprComponent(0);
			State = 1059; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrOperatorsContext : ParserRuleContext {
		public AggrOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrOperators; } }
	 
		public AggrOperatorsContext() { }
		public virtual void CopyFrom(AggrOperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AggrCompContext : AggrOperatorsContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode SUM() { return GetToken(VtlParser.SUM, 0); }
		public ITerminalNode AVG() { return GetToken(VtlParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(VtlParser.COUNT, 0); }
		public ITerminalNode MEDIAN() { return GetToken(VtlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(VtlParser.MIN, 0); }
		public ITerminalNode MAX() { return GetToken(VtlParser.MAX, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(VtlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(VtlParser.STDDEV_SAMP, 0); }
		public ITerminalNode VAR_POP() { return GetToken(VtlParser.VAR_POP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(VtlParser.VAR_SAMP, 0); }
		public AggrCompContext(AggrOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggrComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggrComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountAggrCompContext : AggrOperatorsContext {
		public ITerminalNode COUNT() { return GetToken(VtlParser.COUNT, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public CountAggrCompContext(AggrOperatorsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCountAggrComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCountAggrComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountAggrComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrOperatorsContext aggrOperators() {
		AggrOperatorsContext _localctx = new AggrOperatorsContext(Context, State);
		EnterRule(_localctx, 68, RULE_aggrOperators);
		int _la;
		try {
			State = 1069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				_localctx = new AggrCompContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1061;
				((AggrCompContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (MIN - 68)) | (1L << (MAX - 68)) | (1L << (SUM - 68)) | (1L << (AVG - 68)) | (1L << (MEDIAN - 68)) | (1L << (COUNT - 68)) | (1L << (STDDEV_POP - 68)) | (1L << (STDDEV_SAMP - 68)) | (1L << (VAR_POP - 68)) | (1L << (VAR_SAMP - 68)))) != 0)) ) {
					((AggrCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1062; Match(LPAREN);
				State = 1063; exprComponent(0);
				State = 1064; Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new CountAggrCompContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066; Match(COUNT);
				State = 1067; Match(LPAREN);
				State = 1068; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrOperatorsGroupingContext : ParserRuleContext {
		public AggrOperatorsGroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrOperatorsGrouping; } }
	 
		public AggrOperatorsGroupingContext() { }
		public virtual void CopyFrom(AggrOperatorsGroupingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AggrDatasetContext : AggrOperatorsGroupingContext {
		public IToken op;
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode SUM() { return GetToken(VtlParser.SUM, 0); }
		public ITerminalNode AVG() { return GetToken(VtlParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(VtlParser.COUNT, 0); }
		public ITerminalNode MEDIAN() { return GetToken(VtlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(VtlParser.MIN, 0); }
		public ITerminalNode MAX() { return GetToken(VtlParser.MAX, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(VtlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(VtlParser.STDDEV_SAMP, 0); }
		public ITerminalNode VAR_POP() { return GetToken(VtlParser.VAR_POP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(VtlParser.VAR_SAMP, 0); }
		public GroupingClauseContext groupingClause() {
			return GetRuleContext<GroupingClauseContext>(0);
		}
		public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		public AggrDatasetContext(AggrOperatorsGroupingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggrDataset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggrDataset(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrDataset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrOperatorsGroupingContext aggrOperatorsGrouping() {
		AggrOperatorsGroupingContext _localctx = new AggrOperatorsGroupingContext(Context, State);
		EnterRule(_localctx, 70, RULE_aggrOperatorsGrouping);
		int _la;
		try {
			_localctx = new AggrDatasetContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			((AggrDatasetContext)_localctx).op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (MIN - 68)) | (1L << (MAX - 68)) | (1L << (SUM - 68)) | (1L << (AVG - 68)) | (1L << (MEDIAN - 68)) | (1L << (COUNT - 68)) | (1L << (STDDEV_POP - 68)) | (1L << (STDDEV_SAMP - 68)) | (1L << (VAR_POP - 68)) | (1L << (VAR_SAMP - 68)))) != 0)) ) {
				((AggrDatasetContext)_localctx).op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1072; Match(LPAREN);
			State = 1073; expr(0);
			State = 1078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 1074; groupingClause();
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 1075; havingClause();
					}
				}

				}
			}

			State = 1080; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnFunctionContext : ParserRuleContext {
		public AnFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anFunction; } }
	 
		public AnFunctionContext() { }
		public virtual void CopyFrom(AnFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LagOrLeadAnContext : AnFunctionContext {
		public IToken op;
		public SignedIntegerContext offet;
		public ScalarItemContext defaultValue;
		public PartitionByClauseContext partition;
		public OrderByClauseContext orderBy;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode LAG() { return GetToken(VtlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(VtlParser.LEAD, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public SignedIntegerContext signedInteger() {
			return GetRuleContext<SignedIntegerContext>(0);
		}
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public ScalarItemContext scalarItem() {
			return GetRuleContext<ScalarItemContext>(0);
		}
		public LagOrLeadAnContext(AnFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterLagOrLeadAn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitLagOrLeadAn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLagOrLeadAn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RatioToReportAnContext : AnFunctionContext {
		public IToken op;
		public PartitionByClauseContext partition;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(VtlParser.RATIO_TO_REPORT, 0); }
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public RatioToReportAnContext(AnFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRatioToReportAn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRatioToReportAn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRatioToReportAn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnSimpleFunctionContext : AnFunctionContext {
		public IToken op;
		public PartitionByClauseContext partition;
		public OrderByClauseContext orderBy;
		public WindowingClauseContext windowing;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode SUM() { return GetToken(VtlParser.SUM, 0); }
		public ITerminalNode AVG() { return GetToken(VtlParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(VtlParser.COUNT, 0); }
		public ITerminalNode MEDIAN() { return GetToken(VtlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(VtlParser.MIN, 0); }
		public ITerminalNode MAX() { return GetToken(VtlParser.MAX, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(VtlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(VtlParser.STDDEV_SAMP, 0); }
		public ITerminalNode VAR_POP() { return GetToken(VtlParser.VAR_POP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(VtlParser.VAR_SAMP, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(VtlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(VtlParser.LAST_VALUE, 0); }
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public AnSimpleFunctionContext(AnFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAnSimpleFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAnSimpleFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnSimpleFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnFunctionContext anFunction() {
		AnFunctionContext _localctx = new AnFunctionContext(Context, State);
		EnterRule(_localctx, 72, RULE_anFunction);
		int _la;
		try {
			State = 1128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MIN:
			case MAX:
			case SUM:
			case AVG:
			case MEDIAN:
			case COUNT:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case FIRST_VALUE:
			case LAST_VALUE:
				_localctx = new AnSimpleFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1082;
				((AnSimpleFunctionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (MIN - 68)) | (1L << (MAX - 68)) | (1L << (SUM - 68)) | (1L << (AVG - 68)) | (1L << (MEDIAN - 68)) | (1L << (COUNT - 68)) | (1L << (STDDEV_POP - 68)) | (1L << (STDDEV_SAMP - 68)) | (1L << (VAR_POP - 68)) | (1L << (VAR_SAMP - 68)))) != 0) || _la==FIRST_VALUE || _la==LAST_VALUE) ) {
					((AnSimpleFunctionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1083; Match(LPAREN);
				State = 1084; expr(0);
				State = 1085; Match(OVER);
				State = 1086; Match(LPAREN);
				{
				State = 1088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1087; ((AnSimpleFunctionContext)_localctx).partition = partitionByClause();
					}
				}

				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1090; ((AnSimpleFunctionContext)_localctx).orderBy = orderByClause();
					}
				}

				State = 1094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA || _la==RANGE) {
					{
					State = 1093; ((AnSimpleFunctionContext)_localctx).windowing = windowingClause();
					}
				}

				}
				State = 1096; Match(RPAREN);
				State = 1097; Match(RPAREN);
				}
				break;
			case LAG:
			case LEAD:
				_localctx = new LagOrLeadAnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1099;
				((LagOrLeadAnContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
					((LagOrLeadAnContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1100; Match(LPAREN);
				State = 1101; expr(0);
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1102; Match(COMMA);
					State = 1103; ((LagOrLeadAnContext)_localctx).offet = signedInteger();
					State = 1105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NULL_CONSTANT || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (CAST - 206)) | (1L << (INTEGER_CONSTANT - 206)) | (1L << (NUMBER_CONSTANT - 206)) | (1L << (BOOLEAN_CONSTANT - 206)) | (1L << (STRING_CONSTANT - 206)))) != 0)) {
						{
						State = 1104; ((LagOrLeadAnContext)_localctx).defaultValue = scalarItem();
						}
					}

					}
				}

				State = 1109; Match(OVER);
				State = 1110; Match(LPAREN);
				{
				State = 1112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1111; ((LagOrLeadAnContext)_localctx).partition = partitionByClause();
					}
				}

				State = 1114; ((LagOrLeadAnContext)_localctx).orderBy = orderByClause();
				}
				State = 1116; Match(RPAREN);
				State = 1117; Match(RPAREN);
				}
				break;
			case RATIO_TO_REPORT:
				_localctx = new RatioToReportAnContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1119; ((RatioToReportAnContext)_localctx).op = Match(RATIO_TO_REPORT);
				State = 1120; Match(LPAREN);
				State = 1121; expr(0);
				State = 1122; Match(OVER);
				State = 1123; Match(LPAREN);
				{
				State = 1124; ((RatioToReportAnContext)_localctx).partition = partitionByClause();
				}
				State = 1125; Match(RPAREN);
				State = 1126; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnFunctionComponentContext : ParserRuleContext {
		public AnFunctionComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anFunctionComponent; } }
	 
		public AnFunctionComponentContext() { }
		public virtual void CopyFrom(AnFunctionComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnSimpleFunctionComponentContext : AnFunctionComponentContext {
		public IToken op;
		public PartitionByClauseContext partition;
		public OrderByClauseContext orderBy;
		public WindowingClauseContext windowing;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode SUM() { return GetToken(VtlParser.SUM, 0); }
		public ITerminalNode AVG() { return GetToken(VtlParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(VtlParser.COUNT, 0); }
		public ITerminalNode MEDIAN() { return GetToken(VtlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(VtlParser.MIN, 0); }
		public ITerminalNode MAX() { return GetToken(VtlParser.MAX, 0); }
		public ITerminalNode STDDEV_POP() { return GetToken(VtlParser.STDDEV_POP, 0); }
		public ITerminalNode STDDEV_SAMP() { return GetToken(VtlParser.STDDEV_SAMP, 0); }
		public ITerminalNode VAR_POP() { return GetToken(VtlParser.VAR_POP, 0); }
		public ITerminalNode VAR_SAMP() { return GetToken(VtlParser.VAR_SAMP, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(VtlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(VtlParser.LAST_VALUE, 0); }
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		public AnSimpleFunctionComponentContext(AnFunctionComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAnSimpleFunctionComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAnSimpleFunctionComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnSimpleFunctionComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LagOrLeadAnComponentContext : AnFunctionComponentContext {
		public IToken op;
		public SignedIntegerContext offet;
		public ScalarItemContext defaultValue;
		public PartitionByClauseContext partition;
		public OrderByClauseContext orderBy;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode LAG() { return GetToken(VtlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(VtlParser.LEAD, 0); }
		public ITerminalNode COMMA() { return GetToken(VtlParser.COMMA, 0); }
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public SignedIntegerContext signedInteger() {
			return GetRuleContext<SignedIntegerContext>(0);
		}
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public ScalarItemContext scalarItem() {
			return GetRuleContext<ScalarItemContext>(0);
		}
		public LagOrLeadAnComponentContext(AnFunctionComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterLagOrLeadAnComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitLagOrLeadAnComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLagOrLeadAnComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RankAnComponentContext : AnFunctionComponentContext {
		public IToken op;
		public PartitionByClauseContext partition;
		public OrderByClauseContext orderBy;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode RANK() { return GetToken(VtlParser.RANK, 0); }
		public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public RankAnComponentContext(AnFunctionComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRankAnComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRankAnComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRankAnComponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RatioToReportAnComponentContext : AnFunctionComponentContext {
		public IToken op;
		public PartitionByClauseContext partition;
		public ITerminalNode[] LPAREN() { return GetTokens(VtlParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(VtlParser.LPAREN, i);
		}
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode OVER() { return GetToken(VtlParser.OVER, 0); }
		public ITerminalNode[] RPAREN() { return GetTokens(VtlParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(VtlParser.RPAREN, i);
		}
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(VtlParser.RATIO_TO_REPORT, 0); }
		public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		public RatioToReportAnComponentContext(AnFunctionComponentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRatioToReportAnComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRatioToReportAnComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRatioToReportAnComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnFunctionComponentContext anFunctionComponent() {
		AnFunctionComponentContext _localctx = new AnFunctionComponentContext(Context, State);
		EnterRule(_localctx, 74, RULE_anFunctionComponent);
		int _la;
		try {
			State = 1188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MIN:
			case MAX:
			case SUM:
			case AVG:
			case MEDIAN:
			case COUNT:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case FIRST_VALUE:
			case LAST_VALUE:
				_localctx = new AnSimpleFunctionComponentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1130;
				((AnSimpleFunctionComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (MIN - 68)) | (1L << (MAX - 68)) | (1L << (SUM - 68)) | (1L << (AVG - 68)) | (1L << (MEDIAN - 68)) | (1L << (COUNT - 68)) | (1L << (STDDEV_POP - 68)) | (1L << (STDDEV_SAMP - 68)) | (1L << (VAR_POP - 68)) | (1L << (VAR_SAMP - 68)))) != 0) || _la==FIRST_VALUE || _la==LAST_VALUE) ) {
					((AnSimpleFunctionComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1131; Match(LPAREN);
				State = 1132; exprComponent(0);
				State = 1133; Match(OVER);
				State = 1134; Match(LPAREN);
				{
				State = 1136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1135; ((AnSimpleFunctionComponentContext)_localctx).partition = partitionByClause();
					}
				}

				State = 1139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 1138; ((AnSimpleFunctionComponentContext)_localctx).orderBy = orderByClause();
					}
				}

				State = 1142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA || _la==RANGE) {
					{
					State = 1141; ((AnSimpleFunctionComponentContext)_localctx).windowing = windowingClause();
					}
				}

				}
				State = 1144; Match(RPAREN);
				State = 1145; Match(RPAREN);
				}
				break;
			case LAG:
			case LEAD:
				_localctx = new LagOrLeadAnComponentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147;
				((LagOrLeadAnComponentContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
					((LagOrLeadAnComponentContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1148; Match(LPAREN);
				State = 1149; exprComponent(0);
				State = 1155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1150; Match(COMMA);
					State = 1151; ((LagOrLeadAnComponentContext)_localctx).offet = signedInteger();
					State = 1153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NULL_CONSTANT || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (CAST - 206)) | (1L << (INTEGER_CONSTANT - 206)) | (1L << (NUMBER_CONSTANT - 206)) | (1L << (BOOLEAN_CONSTANT - 206)) | (1L << (STRING_CONSTANT - 206)))) != 0)) {
						{
						State = 1152; ((LagOrLeadAnComponentContext)_localctx).defaultValue = scalarItem();
						}
					}

					}
				}

				State = 1157; Match(OVER);
				State = 1158; Match(LPAREN);
				{
				State = 1160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1159; ((LagOrLeadAnComponentContext)_localctx).partition = partitionByClause();
					}
				}

				State = 1162; ((LagOrLeadAnComponentContext)_localctx).orderBy = orderByClause();
				}
				State = 1164; Match(RPAREN);
				State = 1165; Match(RPAREN);
				}
				break;
			case RANK:
				_localctx = new RankAnComponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1167; ((RankAnComponentContext)_localctx).op = Match(RANK);
				State = 1168; Match(LPAREN);
				State = 1169; Match(OVER);
				State = 1170; Match(LPAREN);
				{
				State = 1172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1171; ((RankAnComponentContext)_localctx).partition = partitionByClause();
					}
				}

				State = 1174; ((RankAnComponentContext)_localctx).orderBy = orderByClause();
				}
				State = 1176; Match(RPAREN);
				State = 1177; Match(RPAREN);
				}
				break;
			case RATIO_TO_REPORT:
				_localctx = new RatioToReportAnComponentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1179; ((RatioToReportAnComponentContext)_localctx).op = Match(RATIO_TO_REPORT);
				State = 1180; Match(LPAREN);
				State = 1181; exprComponent(0);
				State = 1182; Match(OVER);
				State = 1183; Match(LPAREN);
				{
				State = 1184; ((RatioToReportAnComponentContext)_localctx).partition = partitionByClause();
				}
				State = 1185; Match(RPAREN);
				State = 1186; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameClauseItemContext : ParserRuleContext {
		public ComponentIDContext fromName;
		public ComponentIDContext toName;
		public ITerminalNode TO() { return GetToken(VtlParser.TO, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public RenameClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameClauseItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRenameClauseItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRenameClauseItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameClauseItemContext renameClauseItem() {
		RenameClauseItemContext _localctx = new RenameClauseItemContext(Context, State);
		EnterRule(_localctx, 76, RULE_renameClauseItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190; _localctx.fromName = componentID();
			State = 1191; Match(TO);
			State = 1192; _localctx.toName = componentID();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateClauseContext : ParserRuleContext {
		public AggrFunctionClauseContext[] aggrFunctionClause() {
			return GetRuleContexts<AggrFunctionClauseContext>();
		}
		public AggrFunctionClauseContext aggrFunctionClause(int i) {
			return GetRuleContext<AggrFunctionClauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public AggregateClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggregateClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggregateClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateClauseContext aggregateClause() {
		AggregateClauseContext _localctx = new AggregateClauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_aggregateClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194; aggrFunctionClause();
			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1195; Match(COMMA);
				State = 1196; aggrFunctionClause();
				}
				}
				State = 1201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggrFunctionClauseContext : ParserRuleContext {
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VtlParser.ASSIGN, 0); }
		public AggrOperatorsContext aggrOperators() {
			return GetRuleContext<AggrOperatorsContext>(0);
		}
		public ComponentRoleContext componentRole() {
			return GetRuleContext<ComponentRoleContext>(0);
		}
		public AggrFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggrFunctionClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAggrFunctionClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAggrFunctionClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggrFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggrFunctionClauseContext aggrFunctionClause() {
		AggrFunctionClauseContext _localctx = new AggrFunctionClauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_aggrFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (DIMENSION - 91)) | (1L << (MEASURE - 91)) | (1L << (ATTRIBUTE - 91)) | (1L << (VIRAL - 91)))) != 0) || _la==COMPONENT) {
				{
				State = 1202; componentRole();
				}
			}

			State = 1205; componentID();
			State = 1206; Match(ASSIGN);
			State = 1207; aggrOperators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcClauseItemContext : ParserRuleContext {
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VtlParser.ASSIGN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ComponentRoleContext componentRole() {
			return GetRuleContext<ComponentRoleContext>(0);
		}
		public CalcClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcClauseItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCalcClauseItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCalcClauseItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcClauseItemContext calcClauseItem() {
		CalcClauseItemContext _localctx = new CalcClauseItemContext(Context, State);
		EnterRule(_localctx, 82, RULE_calcClauseItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (DIMENSION - 91)) | (1L << (MEASURE - 91)) | (1L << (ATTRIBUTE - 91)) | (1L << (VIRAL - 91)))) != 0) || _la==COMPONENT) {
				{
				State = 1209; componentRole();
				}
			}

			State = 1212; componentID();
			State = 1213; Match(ASSIGN);
			State = 1214; exprComponent(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubspaceClauseItemContext : ParserRuleContext {
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VtlParser.EQ, 0); }
		public ScalarItemContext scalarItem() {
			return GetRuleContext<ScalarItemContext>(0);
		}
		public SubspaceClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subspaceClauseItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSubspaceClauseItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSubspaceClauseItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubspaceClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubspaceClauseItemContext subspaceClauseItem() {
		SubspaceClauseItemContext _localctx = new SubspaceClauseItemContext(Context, State);
		EnterRule(_localctx, 84, RULE_subspaceClauseItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216; componentID();
			State = 1217; Match(EQ);
			State = 1218; scalarItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarItemContext : ParserRuleContext {
		public ScalarItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarItem; } }
	 
		public ScalarItemContext() { }
		public virtual void CopyFrom(ScalarItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScalarWithCastContext : ScalarItemContext {
		public ITerminalNode CAST() { return GetToken(VtlParser.CAST, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public BasicScalarTypeContext basicScalarType() {
			return GetRuleContext<BasicScalarTypeContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(VtlParser.STRING_CONSTANT, 0); }
		public ScalarWithCastContext(ScalarItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterScalarWithCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitScalarWithCast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarWithCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleScalarContext : ScalarItemContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public SimpleScalarContext(ScalarItemContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSimpleScalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSimpleScalar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleScalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarItemContext scalarItem() {
		ScalarItemContext _localctx = new ScalarItemContext(Context, State);
		EnterRule(_localctx, 86, RULE_scalarItem);
		int _la;
		try {
			State = 1232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_CONSTANT:
			case INTEGER_CONSTANT:
			case NUMBER_CONSTANT:
			case BOOLEAN_CONSTANT:
			case STRING_CONSTANT:
				_localctx = new SimpleScalarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1220; constant();
				}
				break;
			case CAST:
				_localctx = new ScalarWithCastContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1221; Match(CAST);
				State = 1222; Match(LPAREN);
				State = 1223; constant();
				State = 1224; Match(COMMA);
				{
				State = 1225; basicScalarType();
				}
				State = 1228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1226; Match(COMMA);
					State = 1227; Match(STRING_CONSTANT);
					}
				}

				State = 1230; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinClauseWithoutUsingContext : ParserRuleContext {
		public JoinClauseItemContext[] joinClauseItem() {
			return GetRuleContexts<JoinClauseItemContext>();
		}
		public JoinClauseItemContext joinClauseItem(int i) {
			return GetRuleContext<JoinClauseItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public JoinClauseWithoutUsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinClauseWithoutUsing; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinClauseWithoutUsing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinClauseWithoutUsing(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinClauseWithoutUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinClauseWithoutUsingContext joinClauseWithoutUsing() {
		JoinClauseWithoutUsingContext _localctx = new JoinClauseWithoutUsingContext(Context, State);
		EnterRule(_localctx, 88, RULE_joinClauseWithoutUsing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234; joinClauseItem();
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1235; Match(COMMA);
				State = 1236; joinClauseItem();
				}
				}
				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinClauseContext : ParserRuleContext {
		public JoinClauseItemContext[] joinClauseItem() {
			return GetRuleContexts<JoinClauseItemContext>();
		}
		public JoinClauseItemContext joinClauseItem(int i) {
			return GetRuleContext<JoinClauseItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ITerminalNode USING() { return GetToken(VtlParser.USING, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public JoinClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinClauseContext joinClause() {
		JoinClauseContext _localctx = new JoinClauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_joinClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242; joinClauseItem();
			State = 1247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1243; Match(COMMA);
				State = 1244; joinClauseItem();
				}
				}
				State = 1249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 1250; Match(USING);
				State = 1251; componentID();
				State = 1256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1252; Match(COMMA);
					State = 1253; componentID();
					}
					}
					State = 1258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinClauseItemContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VtlParser.AS, 0); }
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public JoinClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinClauseItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinClauseItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinClauseItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinClauseItemContext joinClauseItem() {
		JoinClauseItemContext _localctx = new JoinClauseItemContext(Context, State);
		EnterRule(_localctx, 92, RULE_joinClauseItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261; expr(0);
			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1262; Match(AS);
				State = 1263; alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinBodyContext : ParserRuleContext {
		public FilterClauseContext filterClause() {
			return GetRuleContext<FilterClauseContext>(0);
		}
		public CalcClauseContext calcClause() {
			return GetRuleContext<CalcClauseContext>(0);
		}
		public JoinApplyClauseContext joinApplyClause() {
			return GetRuleContext<JoinApplyClauseContext>(0);
		}
		public AggrClauseContext aggrClause() {
			return GetRuleContext<AggrClauseContext>(0);
		}
		public KeepOrDropClauseContext keepOrDropClause() {
			return GetRuleContext<KeepOrDropClauseContext>(0);
		}
		public RenameClauseContext renameClause() {
			return GetRuleContext<RenameClauseContext>(0);
		}
		public JoinBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinBodyContext joinBody() {
		JoinBodyContext _localctx = new JoinBodyContext(Context, State);
		EnterRule(_localctx, 94, RULE_joinBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILTER) {
				{
				State = 1266; filterClause();
				}
			}

			State = 1272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALC:
				{
				State = 1269; calcClause();
				}
				break;
			case APPLY:
				{
				State = 1270; joinApplyClause();
				}
				break;
			case AGGREGATE:
				{
				State = 1271; aggrClause();
				}
				break;
			case RPAREN:
			case DROP:
			case KEEP:
			case RENAME:
				break;
			default:
				break;
			}
			State = 1275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DROP || _la==KEEP) {
				{
				State = 1274; keepOrDropClause();
				}
			}

			State = 1278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME) {
				{
				State = 1277; renameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinApplyClauseContext : ParserRuleContext {
		public ITerminalNode APPLY() { return GetToken(VtlParser.APPLY, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public JoinApplyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinApplyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterJoinApplyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitJoinApplyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinApplyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinApplyClauseContext joinApplyClause() {
		JoinApplyClauseContext _localctx = new JoinApplyClauseContext(Context, State);
		EnterRule(_localctx, 96, RULE_joinApplyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280; Match(APPLY);
			State = 1281; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionByClauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(VtlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(VtlParser.BY, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterPartitionByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitPartitionByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionByClauseContext partitionByClause() {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(Context, State);
		EnterRule(_localctx, 98, RULE_partitionByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283; Match(PARTITION);
			State = 1284; Match(BY);
			State = 1285; componentID();
			State = 1290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1286; Match(COMMA);
				State = 1287; componentID();
				}
				}
				State = 1292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(VtlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(VtlParser.BY, 0); }
		public OrderByItemContext[] orderByItem() {
			return GetRuleContexts<OrderByItemContext>();
		}
		public OrderByItemContext orderByItem(int i) {
			return GetRuleContext<OrderByItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293; Match(ORDER);
			State = 1294; Match(BY);
			State = 1295; orderByItem();
			State = 1300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1296; Match(COMMA);
				State = 1297; orderByItem();
				}
				}
				State = 1302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByItemContext : ParserRuleContext {
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(VtlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(VtlParser.DESC, 0); }
		public OrderByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOrderByItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOrderByItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByItemContext orderByItem() {
		OrderByItemContext _localctx = new OrderByItemContext(Context, State);
		EnterRule(_localctx, 102, RULE_orderByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303; componentID();
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 1304;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowingClauseContext : ParserRuleContext {
		public LimitClauseItemContext from_;
		public LimitClauseItemContext to_;
		public ITerminalNode BETWEEN() { return GetToken(VtlParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(VtlParser.AND, 0); }
		public LimitClauseItemContext[] limitClauseItem() {
			return GetRuleContexts<LimitClauseItemContext>();
		}
		public LimitClauseItemContext limitClauseItem(int i) {
			return GetRuleContext<LimitClauseItemContext>(i);
		}
		public ITerminalNode RANGE() { return GetToken(VtlParser.RANGE, 0); }
		public ITerminalNode DATA() { return GetToken(VtlParser.DATA, 0); }
		public ITerminalNode POINTS() { return GetToken(VtlParser.POINTS, 0); }
		public WindowingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterWindowingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitWindowingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowingClauseContext windowingClause() {
		WindowingClauseContext _localctx = new WindowingClauseContext(Context, State);
		EnterRule(_localctx, 104, RULE_windowingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA:
				{
				{
				State = 1307; Match(DATA);
				State = 1308; Match(POINTS);
				}
				}
				break;
			case RANGE:
				{
				State = 1309; Match(RANGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1312; Match(BETWEEN);
			State = 1313; _localctx.from_ = limitClauseItem();
			State = 1314; Match(AND);
			State = 1315; _localctx.to_ = limitClauseItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntegerContext : ParserRuleContext {
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(VtlParser.INTEGER_CONSTANT, 0); }
		public SignedIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedInteger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSignedInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSignedInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntegerContext signedInteger() {
		SignedIntegerContext _localctx = new SignedIntegerContext(Context, State);
		EnterRule(_localctx, 106, RULE_signedInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317; Match(INTEGER_CONSTANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseItemContext : ParserRuleContext {
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(VtlParser.INTEGER_CONSTANT, 0); }
		public ITerminalNode PRECEDING() { return GetToken(VtlParser.PRECEDING, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(VtlParser.FOLLOWING, 0); }
		public ITerminalNode CURRENT() { return GetToken(VtlParser.CURRENT, 0); }
		public ITerminalNode DATA() { return GetToken(VtlParser.DATA, 0); }
		public ITerminalNode POINT() { return GetToken(VtlParser.POINT, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(VtlParser.UNBOUNDED, 0); }
		public LimitClauseItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClauseItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterLimitClauseItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitLimitClauseItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClauseItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseItemContext limitClauseItem() {
		LimitClauseItemContext _localctx = new LimitClauseItemContext(Context, State);
		EnterRule(_localctx, 108, RULE_limitClauseItem);
		try {
			State = 1330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1319; Match(INTEGER_CONSTANT);
				State = 1320; Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1321; Match(INTEGER_CONSTANT);
				State = 1322; Match(FOLLOWING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1323; Match(CURRENT);
				State = 1324; Match(DATA);
				State = 1325; Match(POINT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1326; Match(UNBOUNDED);
				State = 1327; Match(PRECEDING);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1328; Match(UNBOUNDED);
				State = 1329; Match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingClauseContext : ParserRuleContext {
		public GroupingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingClause; } }
	 
		public GroupingClauseContext() { }
		public virtual void CopyFrom(GroupingClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupAllContext : GroupingClauseContext {
		public ITerminalNode GROUP() { return GetToken(VtlParser.GROUP, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public GroupAllContext(GroupingClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterGroupAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitGroupAll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupAll(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupByOrExceptContext : GroupingClauseContext {
		public IToken op;
		public ITerminalNode GROUP() { return GetToken(VtlParser.GROUP, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ITerminalNode BY() { return GetToken(VtlParser.BY, 0); }
		public ITerminalNode EXCEPT() { return GetToken(VtlParser.EXCEPT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public GroupByOrExceptContext(GroupingClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterGroupByOrExcept(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitGroupByOrExcept(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByOrExcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingClauseContext groupingClause() {
		GroupingClauseContext _localctx = new GroupingClauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_groupingClause);
		int _la;
		try {
			State = 1345;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				_localctx = new GroupByOrExceptContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1332; Match(GROUP);
				State = 1333;
				((GroupByOrExceptContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BY || _la==EXCEPT) ) {
					((GroupByOrExceptContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1334; componentID();
				State = 1339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1335; Match(COMMA);
					State = 1336; componentID();
					}
					}
					State = 1341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new GroupAllContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1342; Match(GROUP);
				State = 1343; Match(ALL);
				State = 1344; exprComponent(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ITerminalNode HAVING() { return GetToken(VtlParser.HAVING, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 112, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1347; Match(HAVING);
			State = 1348; exprComponent(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterItemContext : ParserRuleContext {
		public VarIDContext varID() {
			return GetRuleContext<VarIDContext>(0);
		}
		public InputParameterTypeContext inputParameterType() {
			return GetRuleContext<InputParameterTypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(VtlParser.DEFAULT, 0); }
		public ScalarItemContext scalarItem() {
			return GetRuleContext<ScalarItemContext>(0);
		}
		public ParameterItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterParameterItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitParameterItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterItemContext parameterItem() {
		ParameterItemContext _localctx = new ParameterItemContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameterItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; varID();
			State = 1351; inputParameterType();
			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 1352; Match(DEFAULT);
				State = 1353; scalarItem();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputParameterTypeContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public DatasetTypeContext datasetType() {
			return GetRuleContext<DatasetTypeContext>(0);
		}
		public ComponentTypeContext componentType() {
			return GetRuleContext<ComponentTypeContext>(0);
		}
		public OutputParameterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputParameterType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOutputParameterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOutputParameterType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputParameterType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputParameterTypeContext outputParameterType() {
		OutputParameterTypeContext _localctx = new OutputParameterTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_outputParameterType);
		try {
			State = 1359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case DATE:
			case TIME_PERIOD:
			case NUMBER:
			case STRING:
			case TIME:
			case INTEGER:
			case DURATION:
			case SCALAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1356; scalarType();
				}
				break;
			case DATASET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1357; datasetType();
				}
				break;
			case DIMENSION:
			case MEASURE:
			case ATTRIBUTE:
			case VIRAL:
			case COMPONENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1358; componentType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputParameterTypeComponentContext : ParserRuleContext {
		public ComponentTypeContext componentType() {
			return GetRuleContext<ComponentTypeContext>(0);
		}
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public OutputParameterTypeComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputParameterTypeComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOutputParameterTypeComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOutputParameterTypeComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputParameterTypeComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputParameterTypeComponentContext outputParameterTypeComponent() {
		OutputParameterTypeComponentContext _localctx = new OutputParameterTypeComponentContext(Context, State);
		EnterRule(_localctx, 118, RULE_outputParameterTypeComponent);
		try {
			State = 1363;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIMENSION:
			case MEASURE:
			case ATTRIBUTE:
			case VIRAL:
			case COMPONENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1361; componentType();
				}
				break;
			case BOOLEAN:
			case DATE:
			case TIME_PERIOD:
			case NUMBER:
			case STRING:
			case TIME:
			case INTEGER:
			case DURATION:
			case SCALAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1362; scalarType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputParameterTypeContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public DatasetTypeContext datasetType() {
			return GetRuleContext<DatasetTypeContext>(0);
		}
		public ScalarSetTypeContext scalarSetType() {
			return GetRuleContext<ScalarSetTypeContext>(0);
		}
		public RulesetTypeContext rulesetType() {
			return GetRuleContext<RulesetTypeContext>(0);
		}
		public ComponentTypeContext componentType() {
			return GetRuleContext<ComponentTypeContext>(0);
		}
		public InputParameterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputParameterType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInputParameterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInputParameterType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputParameterType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputParameterTypeContext inputParameterType() {
		InputParameterTypeContext _localctx = new InputParameterTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_inputParameterType);
		try {
			State = 1370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case DATE:
			case TIME_PERIOD:
			case NUMBER:
			case STRING:
			case TIME:
			case INTEGER:
			case DURATION:
			case SCALAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1365; scalarType();
				}
				break;
			case DATASET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1366; datasetType();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1367; scalarSetType();
				}
				break;
			case DATAPOINT:
			case HIERARCHICAL:
			case RULESET:
			case DATAPOINT_ON_VD:
			case DATAPOINT_ON_VAR:
			case HIERARCHICAL_ON_VD:
			case HIERARCHICAL_ON_VAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1368; rulesetType();
				}
				break;
			case DIMENSION:
			case MEASURE:
			case ATTRIBUTE:
			case VIRAL:
			case COMPONENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1369; componentType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetTypeContext : ParserRuleContext {
		public ITerminalNode RULESET() { return GetToken(VtlParser.RULESET, 0); }
		public DpRulesetContext dpRuleset() {
			return GetRuleContext<DpRulesetContext>(0);
		}
		public HrRulesetContext hrRuleset() {
			return GetRuleContext<HrRulesetContext>(0);
		}
		public RulesetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulesetType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRulesetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRulesetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulesetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetTypeContext rulesetType() {
		RulesetTypeContext _localctx = new RulesetTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_rulesetType);
		try {
			State = 1375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RULESET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1372; Match(RULESET);
				}
				break;
			case DATAPOINT:
			case DATAPOINT_ON_VD:
			case DATAPOINT_ON_VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1373; dpRuleset();
				}
				break;
			case HIERARCHICAL:
			case HIERARCHICAL_ON_VD:
			case HIERARCHICAL_ON_VAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1374; hrRuleset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public BasicScalarTypeContext basicScalarType() {
			return GetRuleContext<BasicScalarTypeContext>(0);
		}
		public ValueDomainNameContext valueDomainName() {
			return GetRuleContext<ValueDomainNameContext>(0);
		}
		public ScalarTypeConstraintContext scalarTypeConstraint() {
			return GetRuleContext<ScalarTypeConstraintContext>(0);
		}
		public ITerminalNode NULL_CONSTANT() { return GetToken(VtlParser.NULL_CONSTANT, 0); }
		public ITerminalNode NOT() { return GetToken(VtlParser.NOT, 0); }
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_scalarType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case DATE:
			case TIME_PERIOD:
			case NUMBER:
			case STRING:
			case TIME:
			case INTEGER:
			case DURATION:
			case SCALAR:
				{
				State = 1377; basicScalarType();
				}
				break;
			case IDENTIFIER:
				{
				State = 1378; valueDomainName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QLPAREN || _la==GLPAREN) {
				{
				State = 1381; scalarTypeConstraint();
				}
			}

			State = 1388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT || _la==NULL_CONSTANT) {
				{
				State = 1385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1384; Match(NOT);
					}
				}

				State = 1387; Match(NULL_CONSTANT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentTypeContext : ParserRuleContext {
		public ComponentRoleContext componentRole() {
			return GetRuleContext<ComponentRoleContext>(0);
		}
		public ITerminalNode LT() { return GetToken(VtlParser.LT, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode MT() { return GetToken(VtlParser.MT, 0); }
		public ComponentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComponentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComponentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentTypeContext componentType() {
		ComponentTypeContext _localctx = new ComponentTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_componentType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390; componentRole();
			State = 1395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1391; Match(LT);
				State = 1392; scalarType();
				State = 1393; Match(MT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatasetTypeContext : ParserRuleContext {
		public ITerminalNode DATASET() { return GetToken(VtlParser.DATASET, 0); }
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public CompConstraintContext[] compConstraint() {
			return GetRuleContexts<CompConstraintContext>();
		}
		public CompConstraintContext compConstraint(int i) {
			return GetRuleContext<CompConstraintContext>(i);
		}
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public DatasetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datasetType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDatasetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDatasetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatasetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatasetTypeContext datasetType() {
		DatasetTypeContext _localctx = new DatasetTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_datasetType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397; Match(DATASET);
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLPAREN) {
				{
				State = 1398; Match(GLPAREN);
				State = 1399; compConstraint();
				State = 1404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1400; Match(COMMA);
					State = 1401; compConstraint();
					}
					}
					State = 1406;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1407; Match(GRPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalDatasetTypeContext : ParserRuleContext {
		public DatasetTypeContext datasetType() {
			return GetRuleContext<DatasetTypeContext>(0);
		}
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public EvalDatasetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalDatasetType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterEvalDatasetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitEvalDatasetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalDatasetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalDatasetTypeContext evalDatasetType() {
		EvalDatasetTypeContext _localctx = new EvalDatasetTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_evalDatasetType);
		try {
			State = 1413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATASET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1411; datasetType();
				}
				break;
			case BOOLEAN:
			case DATE:
			case TIME_PERIOD:
			case NUMBER:
			case STRING:
			case TIME:
			case INTEGER:
			case DURATION:
			case SCALAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1412; scalarType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarSetTypeContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VtlParser.SET, 0); }
		public ITerminalNode LT() { return GetToken(VtlParser.LT, 0); }
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public ITerminalNode MT() { return GetToken(VtlParser.MT, 0); }
		public ScalarSetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarSetType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterScalarSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitScalarSetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarSetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarSetTypeContext scalarSetType() {
		ScalarSetTypeContext _localctx = new ScalarSetTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_scalarSetType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415; Match(SET);
			State = 1420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1416; Match(LT);
				State = 1417; scalarType();
				State = 1418; Match(MT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DpRulesetContext : ParserRuleContext {
		public DpRulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dpRuleset; } }
	 
		public DpRulesetContext() { }
		public virtual void CopyFrom(DpRulesetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DataPointVdContext : DpRulesetContext {
		public ITerminalNode DATAPOINT_ON_VD() { return GetToken(VtlParser.DATAPOINT_ON_VD, 0); }
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public ValueDomainNameContext[] valueDomainName() {
			return GetRuleContexts<ValueDomainNameContext>();
		}
		public ValueDomainNameContext valueDomainName(int i) {
			return GetRuleContext<ValueDomainNameContext>(i);
		}
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public ITerminalNode[] MUL() { return GetTokens(VtlParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(VtlParser.MUL, i);
		}
		public DataPointVdContext(DpRulesetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDataPointVd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDataPointVd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataPointVd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataPointVarContext : DpRulesetContext {
		public ITerminalNode DATAPOINT_ON_VAR() { return GetToken(VtlParser.DATAPOINT_ON_VAR, 0); }
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public VarIDContext[] varID() {
			return GetRuleContexts<VarIDContext>();
		}
		public VarIDContext varID(int i) {
			return GetRuleContext<VarIDContext>(i);
		}
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public ITerminalNode[] MUL() { return GetTokens(VtlParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(VtlParser.MUL, i);
		}
		public DataPointVarContext(DpRulesetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDataPointVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDataPointVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataPointVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataPointContext : DpRulesetContext {
		public ITerminalNode DATAPOINT() { return GetToken(VtlParser.DATAPOINT, 0); }
		public DataPointContext(DpRulesetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterDataPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitDataPoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataPoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DpRulesetContext dpRuleset() {
		DpRulesetContext _localctx = new DpRulesetContext(Context, State);
		EnterRule(_localctx, 134, RULE_dpRuleset);
		int _la;
		try {
			State = 1451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATAPOINT:
				_localctx = new DataPointContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1422; Match(DATAPOINT);
				}
				break;
			case DATAPOINT_ON_VD:
				_localctx = new DataPointVdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1423; Match(DATAPOINT_ON_VD);
				State = 1435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLPAREN) {
					{
					State = 1424; Match(GLPAREN);
					State = 1425; valueDomainName();
					State = 1430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MUL) {
						{
						{
						State = 1426; Match(MUL);
						State = 1427; valueDomainName();
						}
						}
						State = 1432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1433; Match(GRPAREN);
					}
				}

				}
				break;
			case DATAPOINT_ON_VAR:
				_localctx = new DataPointVarContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1437; Match(DATAPOINT_ON_VAR);
				State = 1449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLPAREN) {
					{
					State = 1438; Match(GLPAREN);
					State = 1439; varID();
					State = 1444;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==MUL) {
						{
						{
						State = 1440; Match(MUL);
						State = 1441; varID();
						}
						}
						State = 1446;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1447; Match(GRPAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HrRulesetContext : ParserRuleContext {
		public HrRulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hrRuleset; } }
	 
		public HrRulesetContext() { }
		public virtual void CopyFrom(HrRulesetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HrRulesetVdTypeContext : HrRulesetContext {
		public IToken vdName;
		public ITerminalNode HIERARCHICAL_ON_VD() { return GetToken(VtlParser.HIERARCHICAL_ON_VD, 0); }
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ValueDomainNameContext[] valueDomainName() {
			return GetRuleContexts<ValueDomainNameContext>();
		}
		public ValueDomainNameContext valueDomainName(int i) {
			return GetRuleContext<ValueDomainNameContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode[] MUL() { return GetTokens(VtlParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(VtlParser.MUL, i);
		}
		public HrRulesetVdTypeContext(HrRulesetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHrRulesetVdType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHrRulesetVdType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHrRulesetVdType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HrRulesetVarTypeContext : HrRulesetContext {
		public VarIDContext varName;
		public ITerminalNode HIERARCHICAL_ON_VAR() { return GetToken(VtlParser.HIERARCHICAL_ON_VAR, 0); }
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public VarIDContext[] varID() {
			return GetRuleContexts<VarIDContext>();
		}
		public VarIDContext varID(int i) {
			return GetRuleContext<VarIDContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(VtlParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VtlParser.RPAREN, 0); }
		public ITerminalNode[] MUL() { return GetTokens(VtlParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(VtlParser.MUL, i);
		}
		public HrRulesetVarTypeContext(HrRulesetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHrRulesetVarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHrRulesetVarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHrRulesetVarType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HrRulesetTypeContext : HrRulesetContext {
		public ITerminalNode HIERARCHICAL() { return GetToken(VtlParser.HIERARCHICAL, 0); }
		public HrRulesetTypeContext(HrRulesetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHrRulesetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHrRulesetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHrRulesetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HrRulesetContext hrRuleset() {
		HrRulesetContext _localctx = new HrRulesetContext(Context, State);
		EnterRule(_localctx, 136, RULE_hrRuleset);
		int _la;
		try {
			State = 1493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HIERARCHICAL:
				_localctx = new HrRulesetTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1453; Match(HIERARCHICAL);
				}
				break;
			case HIERARCHICAL_ON_VD:
				_localctx = new HrRulesetVdTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1454; Match(HIERARCHICAL_ON_VD);
				State = 1471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLPAREN) {
					{
					State = 1455; Match(GLPAREN);
					State = 1456; ((HrRulesetVdTypeContext)_localctx).vdName = Match(IDENTIFIER);
					State = 1468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LPAREN) {
						{
						State = 1457; Match(LPAREN);
						State = 1458; valueDomainName();
						State = 1463;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MUL) {
							{
							{
							State = 1459; Match(MUL);
							State = 1460; valueDomainName();
							}
							}
							State = 1465;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1466; Match(RPAREN);
						}
					}

					State = 1470; Match(GRPAREN);
					}
				}

				}
				break;
			case HIERARCHICAL_ON_VAR:
				_localctx = new HrRulesetVarTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1473; Match(HIERARCHICAL_ON_VAR);
				State = 1491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLPAREN) {
					{
					State = 1474; Match(GLPAREN);
					State = 1475; ((HrRulesetVarTypeContext)_localctx).varName = varID();
					State = 1487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LPAREN) {
						{
						State = 1476; Match(LPAREN);
						State = 1477; varID();
						State = 1482;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==MUL) {
							{
							{
							State = 1478; Match(MUL);
							State = 1479; varID();
							}
							}
							State = 1484;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1485; Match(RPAREN);
						}
					}

					State = 1489; Match(GRPAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDomainNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ValueDomainNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDomainName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValueDomainName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValueDomainName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueDomainName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueDomainNameContext valueDomainName() {
		ValueDomainNameContext _localctx = new ValueDomainNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_valueDomainName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1495; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetIDContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public RulesetIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulesetID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRulesetID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRulesetID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulesetID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetIDContext rulesetID() {
		RulesetIDContext _localctx = new RulesetIDContext(Context, State);
		EnterRule(_localctx, 140, RULE_rulesetID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetSignatureContext : ParserRuleContext {
		public SignatureContext[] signature() {
			return GetRuleContexts<SignatureContext>();
		}
		public SignatureContext signature(int i) {
			return GetRuleContext<SignatureContext>(i);
		}
		public ITerminalNode VALUE_DOMAIN() { return GetToken(VtlParser.VALUE_DOMAIN, 0); }
		public ITerminalNode VARIABLE() { return GetToken(VtlParser.VARIABLE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public RulesetSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulesetSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRulesetSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRulesetSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulesetSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetSignatureContext rulesetSignature() {
		RulesetSignatureContext _localctx = new RulesetSignatureContext(Context, State);
		EnterRule(_localctx, 142, RULE_rulesetSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUE_DOMAIN || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1500; signature();
			State = 1505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1501; Match(COMMA);
				State = 1502; signature();
				}
				}
				State = 1507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		public VarIDContext varID() {
			return GetRuleContext<VarIDContext>(0);
		}
		public ITerminalNode AS() { return GetToken(VtlParser.AS, 0); }
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 144, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508; varID();
			State = 1511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1509; Match(AS);
				State = 1510; alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleClauseDatapointContext : ParserRuleContext {
		public RuleItemDatapointContext[] ruleItemDatapoint() {
			return GetRuleContexts<RuleItemDatapointContext>();
		}
		public RuleItemDatapointContext ruleItemDatapoint(int i) {
			return GetRuleContext<RuleItemDatapointContext>(i);
		}
		public ITerminalNode[] EOL() { return GetTokens(VtlParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(VtlParser.EOL, i);
		}
		public RuleClauseDatapointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleClauseDatapoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRuleClauseDatapoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRuleClauseDatapoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleClauseDatapoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleClauseDatapointContext ruleClauseDatapoint() {
		RuleClauseDatapointContext _localctx = new RuleClauseDatapointContext(Context, State);
		EnterRule(_localctx, 146, RULE_ruleClauseDatapoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513; ruleItemDatapoint();
			State = 1518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 1514; Match(EOL);
				State = 1515; ruleItemDatapoint();
				}
				}
				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleItemDatapointContext : ParserRuleContext {
		public IToken ruleName;
		public ExprComponentContext antecedentContiditon;
		public ExprComponentContext consequentCondition;
		public ExprComponentContext[] exprComponent() {
			return GetRuleContexts<ExprComponentContext>();
		}
		public ExprComponentContext exprComponent(int i) {
			return GetRuleContext<ExprComponentContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(VtlParser.COLON, 0); }
		public ITerminalNode WHEN() { return GetToken(VtlParser.WHEN, 0); }
		public ITerminalNode THEN() { return GetToken(VtlParser.THEN, 0); }
		public ErCodeContext erCode() {
			return GetRuleContext<ErCodeContext>(0);
		}
		public ErLevelContext erLevel() {
			return GetRuleContext<ErLevelContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public RuleItemDatapointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleItemDatapoint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRuleItemDatapoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRuleItemDatapoint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleItemDatapoint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleItemDatapointContext ruleItemDatapoint() {
		RuleItemDatapointContext _localctx = new RuleItemDatapointContext(Context, State);
		EnterRule(_localctx, 148, RULE_ruleItemDatapoint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				State = 1521; _localctx.ruleName = Match(IDENTIFIER);
				State = 1522; Match(COLON);
				}
				break;
			}
			State = 1529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1525; Match(WHEN);
				State = 1526; _localctx.antecedentContiditon = exprComponent(0);
				State = 1527; Match(THEN);
				}
			}

			State = 1531; _localctx.consequentCondition = exprComponent(0);
			State = 1533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERRORCODE) {
				{
				State = 1532; erCode();
				}
			}

			State = 1536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERRORLEVEL) {
				{
				State = 1535; erLevel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleClauseHierarchicalContext : ParserRuleContext {
		public RuleItemHierarchicalContext[] ruleItemHierarchical() {
			return GetRuleContexts<RuleItemHierarchicalContext>();
		}
		public RuleItemHierarchicalContext ruleItemHierarchical(int i) {
			return GetRuleContext<RuleItemHierarchicalContext>(i);
		}
		public ITerminalNode[] EOL() { return GetTokens(VtlParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(VtlParser.EOL, i);
		}
		public RuleClauseHierarchicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleClauseHierarchical; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRuleClauseHierarchical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRuleClauseHierarchical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleClauseHierarchical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleClauseHierarchicalContext ruleClauseHierarchical() {
		RuleClauseHierarchicalContext _localctx = new RuleClauseHierarchicalContext(Context, State);
		EnterRule(_localctx, 150, RULE_ruleClauseHierarchical);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538; ruleItemHierarchical();
			State = 1543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 1539; Match(EOL);
				State = 1540; ruleItemHierarchical();
				}
				}
				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleItemHierarchicalContext : ParserRuleContext {
		public IToken ruleName;
		public CodeItemRelationContext codeItemRelation() {
			return GetRuleContext<CodeItemRelationContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VtlParser.COLON, 0); }
		public ErCodeContext erCode() {
			return GetRuleContext<ErCodeContext>(0);
		}
		public ErLevelContext erLevel() {
			return GetRuleContext<ErLevelContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public RuleItemHierarchicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleItemHierarchical; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRuleItemHierarchical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRuleItemHierarchical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleItemHierarchical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleItemHierarchicalContext ruleItemHierarchical() {
		RuleItemHierarchicalContext _localctx = new RuleItemHierarchicalContext(Context, State);
		EnterRule(_localctx, 152, RULE_ruleItemHierarchical);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 1546; _localctx.ruleName = Match(IDENTIFIER);
				State = 1547; Match(COLON);
				}
				break;
			}
			State = 1550; codeItemRelation();
			State = 1552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERRORCODE) {
				{
				State = 1551; erCode();
				}
			}

			State = 1555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ERRORLEVEL) {
				{
				State = 1554; erLevel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierRuleSignatureContext : ParserRuleContext {
		public ITerminalNode RULE() { return GetToken(VtlParser.RULE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ITerminalNode VALUE_DOMAIN() { return GetToken(VtlParser.VALUE_DOMAIN, 0); }
		public ITerminalNode VARIABLE() { return GetToken(VtlParser.VARIABLE, 0); }
		public ITerminalNode CONDITION() { return GetToken(VtlParser.CONDITION, 0); }
		public ValueDomainSignatureContext valueDomainSignature() {
			return GetRuleContext<ValueDomainSignatureContext>(0);
		}
		public HierRuleSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierRuleSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterHierRuleSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitHierRuleSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierRuleSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierRuleSignatureContext hierRuleSignature() {
		HierRuleSignatureContext _localctx = new HierRuleSignatureContext(Context, State);
		EnterRule(_localctx, 154, RULE_hierRuleSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUE_DOMAIN || _la==VARIABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONDITION) {
				{
				State = 1558; Match(CONDITION);
				State = 1559; valueDomainSignature();
				}
			}

			State = 1562; Match(RULE);
			State = 1563; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDomainSignatureContext : ParserRuleContext {
		public SignatureContext[] signature() {
			return GetRuleContexts<SignatureContext>();
		}
		public SignatureContext signature(int i) {
			return GetRuleContext<SignatureContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ValueDomainSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDomainSignature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValueDomainSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValueDomainSignature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueDomainSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueDomainSignatureContext valueDomainSignature() {
		ValueDomainSignatureContext _localctx = new ValueDomainSignatureContext(Context, State);
		EnterRule(_localctx, 156, RULE_valueDomainSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565; signature();
			State = 1570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1566; Match(COMMA);
				State = 1567; signature();
				}
				}
				State = 1572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeItemRelationContext : ParserRuleContext {
		public ValueDomainValueContext codetemRef;
		public CodeItemRelationClauseContext[] codeItemRelationClause() {
			return GetRuleContexts<CodeItemRelationClauseContext>();
		}
		public CodeItemRelationClauseContext codeItemRelationClause(int i) {
			return GetRuleContext<CodeItemRelationClauseContext>(i);
		}
		public ValueDomainValueContext valueDomainValue() {
			return GetRuleContext<ValueDomainValueContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(VtlParser.WHEN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VtlParser.THEN, 0); }
		public ComparisonOperandContext comparisonOperand() {
			return GetRuleContext<ComparisonOperandContext>(0);
		}
		public CodeItemRelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeItemRelation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCodeItemRelation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCodeItemRelation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeItemRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeItemRelationContext codeItemRelation() {
		CodeItemRelationContext _localctx = new CodeItemRelationContext(Context, State);
		EnterRule(_localctx, 158, RULE_codeItemRelation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1573; Match(WHEN);
				State = 1574; exprComponent(0);
				State = 1575; Match(THEN);
				}
			}

			State = 1579; _localctx.codetemRef = valueDomainValue();
			State = 1581;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << LT) | (1L << MT) | (1L << ME) | (1L << NEQ) | (1L << LE))) != 0)) {
				{
				State = 1580; comparisonOperand();
				}
			}

			State = 1583; codeItemRelationClause();
			State = 1587;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (INTEGER_CONSTANT - 229)) | (1L << (NUMBER_CONSTANT - 229)) | (1L << (IDENTIFIER - 229)))) != 0)) {
				{
				{
				State = 1584; codeItemRelationClause();
				}
				}
				State = 1589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeItemRelationClauseContext : ParserRuleContext {
		public IToken opAdd;
		public ValueDomainValueContext rightCodeItem;
		public ExprComponentContext rightCondition;
		public ValueDomainValueContext valueDomainValue() {
			return GetRuleContext<ValueDomainValueContext>(0);
		}
		public ITerminalNode QLPAREN() { return GetToken(VtlParser.QLPAREN, 0); }
		public ITerminalNode QRPAREN() { return GetToken(VtlParser.QRPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(VtlParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(VtlParser.MINUS, 0); }
		public CodeItemRelationClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeItemRelationClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCodeItemRelationClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCodeItemRelationClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeItemRelationClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeItemRelationClauseContext codeItemRelationClause() {
		CodeItemRelationClauseContext _localctx = new CodeItemRelationClauseContext(Context, State);
		EnterRule(_localctx, 160, RULE_codeItemRelationClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1590;
				_localctx.opAdd = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.opAdd = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1593; _localctx.rightCodeItem = valueDomainValue();
			State = 1598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QLPAREN) {
				{
				State = 1594; Match(QLPAREN);
				State = 1595; _localctx.rightCondition = exprComponent(0);
				State = 1596; Match(QRPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDomainValueContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(VtlParser.INTEGER_CONSTANT, 0); }
		public ITerminalNode NUMBER_CONSTANT() { return GetToken(VtlParser.NUMBER_CONSTANT, 0); }
		public ValueDomainValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDomainValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValueDomainValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValueDomainValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueDomainValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueDomainValueContext valueDomainValue() {
		ValueDomainValueContext _localctx = new ValueDomainValueContext(Context, State);
		EnterRule(_localctx, 162, RULE_valueDomainValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (INTEGER_CONSTANT - 229)) | (1L << (NUMBER_CONSTANT - 229)) | (1L << (IDENTIFIER - 229)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeConstraintContext : ParserRuleContext {
		public ScalarTypeConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarTypeConstraint; } }
	 
		public ScalarTypeConstraintContext() { }
		public virtual void CopyFrom(ScalarTypeConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RangeConstraintContext : ScalarTypeConstraintContext {
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public ScalarItemContext[] scalarItem() {
			return GetRuleContexts<ScalarItemContext>();
		}
		public ScalarItemContext scalarItem(int i) {
			return GetRuleContext<ScalarItemContext>(i);
		}
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public RangeConstraintContext(ScalarTypeConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRangeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRangeConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionConstraintContext : ScalarTypeConstraintContext {
		public ITerminalNode QLPAREN() { return GetToken(VtlParser.QLPAREN, 0); }
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode QRPAREN() { return GetToken(VtlParser.QRPAREN, 0); }
		public ConditionConstraintContext(ScalarTypeConstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConditionConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConditionConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeConstraintContext scalarTypeConstraint() {
		ScalarTypeConstraintContext _localctx = new ScalarTypeConstraintContext(Context, State);
		EnterRule(_localctx, 164, RULE_scalarTypeConstraint);
		int _la;
		try {
			State = 1617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QLPAREN:
				_localctx = new ConditionConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1602; Match(QLPAREN);
				State = 1603; exprComponent(0);
				State = 1604; Match(QRPAREN);
				}
				break;
			case GLPAREN:
				_localctx = new RangeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1606; Match(GLPAREN);
				State = 1607; scalarItem();
				State = 1612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1608; Match(COMMA);
					State = 1609; scalarItem();
					}
					}
					State = 1614;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1615; Match(GRPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompConstraintContext : ParserRuleContext {
		public ComponentTypeContext componentType() {
			return GetRuleContext<ComponentTypeContext>(0);
		}
		public ComponentIDContext componentID() {
			return GetRuleContext<ComponentIDContext>(0);
		}
		public MultModifierContext multModifier() {
			return GetRuleContext<MultModifierContext>(0);
		}
		public CompConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterCompConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitCompConstraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompConstraintContext compConstraint() {
		CompConstraintContext _localctx = new CompConstraintContext(Context, State);
		EnterRule(_localctx, 166, RULE_compConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1619; componentType();
			State = 1622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 1620; componentID();
				}
				break;
			case OPTIONAL:
				{
				State = 1621; multModifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultModifierContext : ParserRuleContext {
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public ITerminalNode PLUS() { return GetToken(VtlParser.PLUS, 0); }
		public ITerminalNode MUL() { return GetToken(VtlParser.MUL, 0); }
		public MultModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterMultModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitMultModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultModifierContext multModifier() {
		MultModifierContext _localctx = new MultModifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_multModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624; Match(OPTIONAL);
			State = 1626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MUL) {
				{
				State = 1625;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MUL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidationOutputContext : ParserRuleContext {
		public ITerminalNode INVALID() { return GetToken(VtlParser.INVALID, 0); }
		public ITerminalNode ALL_MEASURES() { return GetToken(VtlParser.ALL_MEASURES, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public ValidationOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validationOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValidationOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValidationOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidationOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidationOutputContext validationOutput() {
		ValidationOutputContext _localctx = new ValidationOutputContext(Context, State);
		EnterRule(_localctx, 170, RULE_validationOutput);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==INVALID || _la==ALL_MEASURES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidationModeContext : ParserRuleContext {
		public ITerminalNode NON_NULL() { return GetToken(VtlParser.NON_NULL, 0); }
		public ITerminalNode NON_ZERO() { return GetToken(VtlParser.NON_ZERO, 0); }
		public ITerminalNode PARTIAL_NULL() { return GetToken(VtlParser.PARTIAL_NULL, 0); }
		public ITerminalNode PARTIAL_ZERO() { return GetToken(VtlParser.PARTIAL_ZERO, 0); }
		public ITerminalNode ALWAYS_NULL() { return GetToken(VtlParser.ALWAYS_NULL, 0); }
		public ITerminalNode ALWAYS_ZERO() { return GetToken(VtlParser.ALWAYS_ZERO, 0); }
		public ValidationModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validationMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValidationMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValidationMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidationMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidationModeContext validationMode() {
		ValidationModeContext _localctx = new ValidationModeContext(Context, State);
		EnterRule(_localctx, 172, RULE_validationMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (NON_NULL - 213)) | (1L << (NON_ZERO - 213)) | (1L << (PARTIAL_NULL - 213)) | (1L << (PARTIAL_ZERO - 213)) | (1L << (ALWAYS_NULL - 213)) | (1L << (ALWAYS_ZERO - 213)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionClauseContext : ParserRuleContext {
		public ITerminalNode CONDITION() { return GetToken(VtlParser.CONDITION, 0); }
		public ComponentIDContext[] componentID() {
			return GetRuleContexts<ComponentIDContext>();
		}
		public ComponentIDContext componentID(int i) {
			return GetRuleContext<ComponentIDContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ConditionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConditionClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConditionClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionClauseContext conditionClause() {
		ConditionClauseContext _localctx = new ConditionClauseContext(Context, State);
		EnterRule(_localctx, 174, RULE_conditionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(CONDITION);
			State = 1633; componentID();
			State = 1638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1634; Match(COMMA);
				State = 1635; componentID();
				}
				}
				State = 1640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputModeContext : ParserRuleContext {
		public ITerminalNode DATASET() { return GetToken(VtlParser.DATASET, 0); }
		public ITerminalNode DATASET_PRIORITY() { return GetToken(VtlParser.DATASET_PRIORITY, 0); }
		public InputModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputMode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInputMode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInputMode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputModeContext inputMode() {
		InputModeContext _localctx = new InputModeContext(Context, State);
		EnterRule(_localctx, 176, RULE_inputMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641;
			_la = TokenStream.LA(1);
			if ( !(_la==DATASET || _la==DATASET_PRIORITY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImbalanceExprContext : ParserRuleContext {
		public ITerminalNode IMBALANCE() { return GetToken(VtlParser.IMBALANCE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ImbalanceExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imbalanceExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterImbalanceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitImbalanceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImbalanceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImbalanceExprContext imbalanceExpr() {
		ImbalanceExprContext _localctx = new ImbalanceExprContext(Context, State);
		EnterRule(_localctx, 178, RULE_imbalanceExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643; Match(IMBALANCE);
			State = 1644; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputModeHierarchyContext : ParserRuleContext {
		public ITerminalNode RULE() { return GetToken(VtlParser.RULE, 0); }
		public ITerminalNode DATASET() { return GetToken(VtlParser.DATASET, 0); }
		public ITerminalNode RULE_PRIORITY() { return GetToken(VtlParser.RULE_PRIORITY, 0); }
		public InputModeHierarchyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputModeHierarchy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterInputModeHierarchy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitInputModeHierarchy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputModeHierarchy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputModeHierarchyContext inputModeHierarchy() {
		InputModeHierarchyContext _localctx = new InputModeHierarchyContext(Context, State);
		EnterRule(_localctx, 180, RULE_inputModeHierarchy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1646;
			_la = TokenStream.LA(1);
			if ( !(_la==DATASET || _la==RULE || _la==RULE_PRIORITY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputModeHierarchyContext : ParserRuleContext {
		public ITerminalNode COMPUTED() { return GetToken(VtlParser.COMPUTED, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public OutputModeHierarchyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputModeHierarchy; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOutputModeHierarchy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOutputModeHierarchy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputModeHierarchy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputModeHierarchyContext outputModeHierarchy() {
		OutputModeHierarchyContext _localctx = new OutputModeHierarchyContext(Context, State);
		EnterRule(_localctx, 182, RULE_outputModeHierarchy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==COMPUTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 184, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarIDContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public VarIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterVarID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitVarID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarIDContext varID() {
		VarIDContext _localctx = new VarIDContext(Context, State);
		EnterRule(_localctx, 186, RULE_varID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleComponentIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public SimpleComponentIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleComponentId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterSimpleComponentId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitSimpleComponentId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleComponentId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleComponentIdContext simpleComponentId() {
		SimpleComponentIdContext _localctx = new SimpleComponentIdContext(Context, State);
		EnterRule(_localctx, 188, RULE_simpleComponentId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentIDContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VtlParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VtlParser.IDENTIFIER, i);
		}
		public ITerminalNode MEMBERSHIP() { return GetToken(VtlParser.MEMBERSHIP, 0); }
		public ComponentIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComponentID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComponentID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentIDContext componentID() {
		ComponentIDContext _localctx = new ComponentIDContext(Context, State);
		EnterRule(_localctx, 190, RULE_componentID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656; Match(IDENTIFIER);
			State = 1659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 1657; Match(MEMBERSHIP);
				State = 1658; Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListsContext : ParserRuleContext {
		public ITerminalNode GLPAREN() { return GetToken(VtlParser.GLPAREN, 0); }
		public ScalarItemContext[] scalarItem() {
			return GetRuleContexts<ScalarItemContext>();
		}
		public ScalarItemContext scalarItem(int i) {
			return GetRuleContext<ScalarItemContext>(i);
		}
		public ITerminalNode GRPAREN() { return GetToken(VtlParser.GRPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VtlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VtlParser.COMMA, i);
		}
		public ListsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lists; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterLists(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitLists(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListsContext lists() {
		ListsContext _localctx = new ListsContext(Context, State);
		EnterRule(_localctx, 192, RULE_lists);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; Match(GLPAREN);
			State = 1662; scalarItem();
			State = 1667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1663; Match(COMMA);
				State = 1664; scalarItem();
				}
				}
				State = 1669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1670; Match(GRPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErCodeContext : ParserRuleContext {
		public ITerminalNode ERRORCODE() { return GetToken(VtlParser.ERRORCODE, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ErCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterErCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitErCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErCodeContext erCode() {
		ErCodeContext _localctx = new ErCodeContext(Context, State);
		EnterRule(_localctx, 194, RULE_erCode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1672; Match(ERRORCODE);
			State = 1673; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErLevelContext : ParserRuleContext {
		public ITerminalNode ERRORLEVEL() { return GetToken(VtlParser.ERRORLEVEL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ErLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_erLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterErLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitErLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErLevelContext erLevel() {
		ErLevelContext _localctx = new ErLevelContext(Context, State);
		EnterRule(_localctx, 196, RULE_erLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1675; Match(ERRORLEVEL);
			State = 1676; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperandContext : ParserRuleContext {
		public ITerminalNode MT() { return GetToken(VtlParser.MT, 0); }
		public ITerminalNode ME() { return GetToken(VtlParser.ME, 0); }
		public ITerminalNode LE() { return GetToken(VtlParser.LE, 0); }
		public ITerminalNode LT() { return GetToken(VtlParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(VtlParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VtlParser.NEQ, 0); }
		public ComparisonOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComparisonOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComparisonOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperandContext comparisonOperand() {
		ComparisonOperandContext _localctx = new ComparisonOperandContext(Context, State);
		EnterRule(_localctx, 198, RULE_comparisonOperand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << LT) | (1L << MT) | (1L << ME) | (1L << NEQ) | (1L << LE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public OptionalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOptionalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOptionalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalExprContext optionalExpr() {
		OptionalExprContext _localctx = new OptionalExprContext(Context, State);
		EnterRule(_localctx, 200, RULE_optionalExpr);
		try {
			State = 1682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case EVAL:
			case IF:
			case CURRENT_DATE:
			case NOT:
			case BETWEEN:
			case NULL_CONSTANT:
			case ISNULL:
			case UNION:
			case SYMDIFF:
			case INTERSECT:
			case CHECK:
			case EXISTS_IN:
			case MIN:
			case MAX:
			case ABS:
			case LN:
			case LOG:
			case TRUNC:
			case ROUND:
			case POWER:
			case MOD:
			case LEN:
			case TRIM:
			case UCASE:
			case LCASE:
			case SUBSTR:
			case SUM:
			case AVG:
			case MEDIAN:
			case COUNT:
			case EXP:
			case CHARSET_MATCH:
			case NVL:
			case HIERARCHY:
			case LTRIM:
			case RTRIM:
			case INSTR:
			case REPLACE:
			case CEIL:
			case FLOOR:
			case SQRT:
			case SETDIFF:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case FIRST_VALUE:
			case LAST_VALUE:
			case LAG:
			case LEAD:
			case RATIO_TO_REPORT:
			case FILL_TIME_SERIES:
			case FLOW_TO_STOCK:
			case STOCK_TO_FLOW:
			case TIMESHIFT:
			case INNER_JOIN:
			case LEFT_JOIN:
			case CROSS_JOIN:
			case FULL_JOIN:
			case PERIOD_INDICATOR:
			case TIME_AGG:
			case CAST:
			case CHECK_DATAPOINT:
			case CHECK_HIERARCHY:
			case INTEGER_CONSTANT:
			case NUMBER_CONSTANT:
			case BOOLEAN_CONSTANT:
			case STRING_CONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1680; expr(0);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1681; Match(OPTIONAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalExprComponentContext : ParserRuleContext {
		public ExprComponentContext exprComponent() {
			return GetRuleContext<ExprComponentContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VtlParser.OPTIONAL, 0); }
		public OptionalExprComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalExprComponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOptionalExprComponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOptionalExprComponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalExprComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalExprComponentContext optionalExprComponent() {
		OptionalExprComponentContext _localctx = new OptionalExprComponentContext(Context, State);
		EnterRule(_localctx, 202, RULE_optionalExprComponent);
		try {
			State = 1686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
			case PLUS:
			case MINUS:
			case EVAL:
			case IF:
			case CURRENT_DATE:
			case NOT:
			case BETWEEN:
			case NULL_CONSTANT:
			case ISNULL:
			case RANK:
			case MIN:
			case MAX:
			case ABS:
			case LN:
			case LOG:
			case TRUNC:
			case ROUND:
			case POWER:
			case MOD:
			case LEN:
			case TRIM:
			case UCASE:
			case LCASE:
			case SUBSTR:
			case SUM:
			case AVG:
			case MEDIAN:
			case COUNT:
			case EXP:
			case CHARSET_MATCH:
			case NVL:
			case LTRIM:
			case RTRIM:
			case INSTR:
			case REPLACE:
			case CEIL:
			case FLOOR:
			case SQRT:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case FIRST_VALUE:
			case LAST_VALUE:
			case LAG:
			case LEAD:
			case RATIO_TO_REPORT:
			case FILL_TIME_SERIES:
			case FLOW_TO_STOCK:
			case STOCK_TO_FLOW:
			case TIMESHIFT:
			case PERIOD_INDICATOR:
			case TIME_AGG:
			case CAST:
			case INTEGER_CONSTANT:
			case NUMBER_CONSTANT:
			case BOOLEAN_CONSTANT:
			case STRING_CONSTANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1684; exprComponent(0);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1685; Match(OPTIONAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentRoleContext : ParserRuleContext {
		public ITerminalNode MEASURE() { return GetToken(VtlParser.MEASURE, 0); }
		public ITerminalNode COMPONENT() { return GetToken(VtlParser.COMPONENT, 0); }
		public ITerminalNode DIMENSION() { return GetToken(VtlParser.DIMENSION, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VtlParser.ATTRIBUTE, 0); }
		public ViralAttributeContext viralAttribute() {
			return GetRuleContext<ViralAttributeContext>(0);
		}
		public ComponentRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentRole; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterComponentRole(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitComponentRole(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentRoleContext componentRole() {
		ComponentRoleContext _localctx = new ComponentRoleContext(Context, State);
		EnterRule(_localctx, 204, RULE_componentRole);
		try {
			State = 1693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEASURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1688; Match(MEASURE);
				}
				break;
			case COMPONENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1689; Match(COMPONENT);
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1690; Match(DIMENSION);
				}
				break;
			case ATTRIBUTE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1691; Match(ATTRIBUTE);
				}
				break;
			case VIRAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1692; viralAttribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViralAttributeContext : ParserRuleContext {
		public ITerminalNode VIRAL() { return GetToken(VtlParser.VIRAL, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VtlParser.ATTRIBUTE, 0); }
		public ViralAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viralAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterViralAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitViralAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViralAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViralAttributeContext viralAttribute() {
		ViralAttributeContext _localctx = new ViralAttributeContext(Context, State);
		EnterRule(_localctx, 206, RULE_viralAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695; Match(VIRAL);
			State = 1696; Match(ATTRIBUTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDomainIDContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public ValueDomainIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDomainID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterValueDomainID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitValueDomainID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueDomainID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueDomainIDContext valueDomainID() {
		ValueDomainIDContext _localctx = new ValueDomainIDContext(Context, State);
		EnterRule(_localctx, 208, RULE_valueDomainID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorIDContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public OperatorIDContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorID; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterOperatorID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitOperatorID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorIDContext operatorID() {
		OperatorIDContext _localctx = new OperatorIDContext(Context, State);
		EnterRule(_localctx, 210, RULE_operatorID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(VtlParser.IDENTIFIER, 0); }
		public RoutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRoutineName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRoutineName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineNameContext routineName() {
		RoutineNameContext _localctx = new RoutineNameContext(Context, State);
		EnterRule(_localctx, 212, RULE_routineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(VtlParser.INTEGER_CONSTANT, 0); }
		public ITerminalNode NUMBER_CONSTANT() { return GetToken(VtlParser.NUMBER_CONSTANT, 0); }
		public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(VtlParser.BOOLEAN_CONSTANT, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(VtlParser.STRING_CONSTANT, 0); }
		public ITerminalNode NULL_CONSTANT() { return GetToken(VtlParser.NULL_CONSTANT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 214, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_CONSTANT || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (INTEGER_CONSTANT - 229)) | (1L << (NUMBER_CONSTANT - 229)) | (1L << (BOOLEAN_CONSTANT - 229)) | (1L << (STRING_CONSTANT - 229)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicScalarTypeContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(VtlParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(VtlParser.INTEGER, 0); }
		public ITerminalNode NUMBER() { return GetToken(VtlParser.NUMBER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VtlParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(VtlParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(VtlParser.TIME, 0); }
		public ITerminalNode TIME_PERIOD() { return GetToken(VtlParser.TIME_PERIOD, 0); }
		public ITerminalNode DURATION() { return GetToken(VtlParser.DURATION, 0); }
		public ITerminalNode SCALAR() { return GetToken(VtlParser.SCALAR, 0); }
		public BasicScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicScalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterBasicScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitBasicScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicScalarTypeContext basicScalarType() {
		BasicScalarTypeContext _localctx = new BasicScalarTypeContext(Context, State);
		EnterRule(_localctx, 216, RULE_basicScalarType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (BOOLEAN - 156)) | (1L << (DATE - 156)) | (1L << (TIME_PERIOD - 156)) | (1L << (NUMBER - 156)) | (1L << (STRING - 156)) | (1L << (TIME - 156)) | (1L << (INTEGER - 156)) | (1L << (DURATION - 156)))) != 0) || _la==SCALAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(VtlParser.BOOLEAN_CONSTANT, 0); }
		public ITerminalNode ALL() { return GetToken(VtlParser.ALL, 0); }
		public RetainTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.EnterRetainType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVtlListener typedListener = listener as IVtlListener;
			if (typedListener != null) typedListener.ExitRetainType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVtlVisitor<TResult> typedVisitor = visitor as IVtlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetainType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetainTypeContext retainType() {
		RetainTypeContext _localctx = new RetainTypeContext(Context, State);
		EnterRule(_localctx, 218, RULE_retainType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1708;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==BOOLEAN_CONSTANT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		case 3: return exprComponent_sempred((ExprComponentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 6);
		}
		return true;
	}
	private bool exprComponent_sempred(ExprComponentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xEF', '\x6B1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xE2', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xE5', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xF2', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x105', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x123', '\n', 
		'\x4', '\a', '\x4', '\x125', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x128', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x13B', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x151', '\n', '\x5', '\a', '\x5', '\x153', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x156', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x160', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x16E', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x177', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x17D', '\n', '\t', '\f', '\t', '\xE', '\t', '\x180', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x186', 
		'\n', '\n', '\x5', '\n', '\x188', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\x191', '\n', '\f', '\f', '\f', '\xE', '\f', '\x194', '\v', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x19A', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x19D', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x1AC', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x1AF', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\x1B5', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\x1B8', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x1C6', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\x1CF', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x1D2', '\v', '\x12', 
		'\x5', '\x12', '\x1D4', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x1D9', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x1FA', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\x201', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x204', '\v', '\x13', '\x5', '\x13', '\x206', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x210', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x215', 
		'\n', '\x13', '\a', '\x13', '\x217', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\x21A', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x21F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x223', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x22D', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x231', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x235', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x23C', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x23F', '\v', '\x14', '\x5', '\x14', '\x241', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x24B', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x24F', '\n', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x259', '\n', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x25E', 
		'\n', '\x14', '\a', '\x14', '\x260', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x263', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x268', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x26C', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x270', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x274', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x278', '\n', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x288', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x28C', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x297', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x2A2', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x2A6', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x2AA', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2BA', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2BE', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2C9', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x2D4', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x2D8', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x2DC', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x2E8', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x2F3', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x2FF', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x30A', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x328', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x32C', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x343', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x348', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x350', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x365', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x369', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x36D', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x373', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x378', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x380', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x395', '\n', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x399', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x39D', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x3A3', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x6', '\x1F', '\x3AA', '\n', '\x1F', '\r', '\x1F', '\xE', '\x1F', '\x3AB', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x6', '\x1F', '\x3B5', '\n', '\x1F', '\r', 
		'\x1F', '\xE', '\x1F', '\x3B6', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x5', '\x1F', '\x3C2', '\n', '\x1F', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x3CA', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x3CE', '\n', ' ', '\x3', 
		' ', '\x5', ' ', '\x3D1', '\n', ' ', '\x3', ' ', '\x5', ' ', '\x3D4', 
		'\n', ' ', '\x3', ' ', '\x5', ' ', '\x3D7', '\n', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x3E4', '\n', '!', 
		'\f', '!', '\xE', '!', '\x3E7', '\v', '!', '\x5', '!', '\x3E9', '\n', 
		'!', '\x3', '!', '\x5', '!', '\x3EC', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x5', '!', '\x3F6', '\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x3FA', 
		'\n', '!', '\x3', '!', '\x5', '!', '\x3FD', '\n', '!', '\x3', '!', '\x5', 
		'!', '\x400', '\n', '!', '\x3', '!', '\x5', '!', '\x403', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x40B', '\n', '!', '\x3', '!', '\x5', '!', '\x40E', '\n', '!', '\x3', 
		'!', '\x5', '!', '\x411', '\n', '!', '\x3', '!', '\x5', '!', '\x414', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x418', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x430', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x437', '\n', '%', '\x5', '%', '\x439', '\n', '%', '\x3', '%', '\x3', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x5', '&', '\x443', '\n', '&', '\x3', '&', '\x5', '&', '\x446', 
		'\n', '&', '\x3', '&', '\x5', '&', '\x449', '\n', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x454', '\n', '&', '\x5', '&', '\x456', 
		'\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x45B', '\n', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x5', '&', '\x46B', '\n', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x473', '\n', '\'', '\x3', '\'', '\x5', '\'', '\x476', '\n', '\'', 
		'\x3', '\'', '\x5', '\'', '\x479', '\n', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x484', '\n', '\'', '\x5', '\'', '\x486', 
		'\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x48B', 
		'\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x497', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x4A7', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x4B0', '\n', 
		')', '\f', ')', '\xE', ')', '\x4B3', '\v', ')', '\x3', '*', '\x5', '*', 
		'\x4B6', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x5', '+', '\x4BD', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x5', '-', '\x4CF', '\n', '-', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x4D3', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', 
		'\x4D8', '\n', '.', '\f', '.', '\xE', '.', '\x4DB', '\v', '.', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\a', '/', '\x4E0', '\n', '/', '\f', '/', 
		'\xE', '/', '\x4E3', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\a', '/', '\x4E9', '\n', '/', '\f', '/', '\xE', '/', '\x4EC', '\v', 
		'/', '\x5', '/', '\x4EE', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x4F3', '\n', '\x30', '\x3', '\x31', '\x5', '\x31', 
		'\x4F6', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', 
		'\x31', '\x4FB', '\n', '\x31', '\x3', '\x31', '\x5', '\x31', '\x4FE', 
		'\n', '\x31', '\x3', '\x31', '\x5', '\x31', '\x501', '\n', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x50B', '\n', '\x33', 
		'\f', '\x33', '\xE', '\x33', '\x50E', '\v', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x515', 
		'\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x518', '\v', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x51C', '\n', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x521', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x535', '\n', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\a', '\x39', '\x53C', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x53F', 
		'\v', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x544', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x54D', '\n', ';', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x5', '<', '\x552', '\n', '<', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x556', '\n', '=', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x5', '>', '\x55D', '\n', '>', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x5', '?', '\x562', '\n', '?', '\x3', '@', '\x3', 
		'@', '\x5', '@', '\x566', '\n', '@', '\x3', '@', '\x5', '@', '\x569', 
		'\n', '@', '\x3', '@', '\x5', '@', '\x56C', '\n', '@', '\x3', '@', '\x5', 
		'@', '\x56F', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x576', '\n', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\a', 
		'\x42', '\x57D', '\n', '\x42', '\f', '\x42', '\xE', '\x42', '\x580', '\v', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x584', '\n', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x588', '\n', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x58F', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x597', '\n', 
		'\x45', '\f', '\x45', '\xE', '\x45', '\x59A', '\v', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x59E', '\n', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x5A5', 
		'\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x5A8', '\v', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x5AC', '\n', '\x45', '\x5', '\x45', 
		'\x5AE', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\a', 
		'\x46', '\x5B8', '\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x5BB', '\v', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x5BF', '\n', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x5C2', '\n', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\a', '\x46', '\x5CB', '\n', '\x46', '\f', '\x46', '\xE', '\x46', 
		'\x5CE', '\v', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x5D2', 
		'\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x5D6', '\n', 
		'\x46', '\x5', '\x46', '\x5D8', '\n', '\x46', '\x3', 'G', '\x3', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\a', 'I', '\x5E2', '\n', 'I', '\f', 'I', '\xE', 'I', '\x5E5', '\v', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x5EA', '\n', 'J', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x5EF', '\n', 'K', '\f', 'K', 
		'\xE', 'K', '\x5F2', '\v', 'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x5F6', 
		'\n', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', 
		'\x5FC', '\n', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x600', '\n', 
		'L', '\x3', 'L', '\x5', 'L', '\x603', '\n', 'L', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\a', 'M', '\x608', '\n', 'M', '\f', 'M', '\xE', 'M', '\x60B', 
		'\v', 'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x60F', '\n', 'N', '\x3', 
		'N', '\x3', 'N', '\x5', 'N', '\x613', '\n', 'N', '\x3', 'N', '\x5', 'N', 
		'\x616', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x61B', 
		'\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\a', 'P', '\x623', '\n', 'P', '\f', 'P', '\xE', 'P', '\x626', 
		'\v', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', 
		'\x62C', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x630', '\n', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\a', 'Q', '\x634', '\n', 'Q', '\f', 'Q', 
		'\xE', 'Q', '\x637', '\v', 'Q', '\x3', 'R', '\x5', 'R', '\x63A', '\n', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 
		'R', '\x641', '\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\a', 'T', '\x64D', '\n', 'T', '\f', 'T', '\xE', 'T', '\x650', '\v', 'T', 
		'\x3', 'T', '\x3', 'T', '\x5', 'T', '\x654', '\n', 'T', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x659', '\n', 'U', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\x65D', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 
		'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\x667', 
		'\n', 'Y', '\f', 'Y', '\xE', 'Y', '\x66A', '\v', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', 
		']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', 
		'`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', 
		'\x67E', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\a', '\x62', '\x684', '\n', '\x62', '\f', '\x62', '\xE', '\x62', 
		'\x687', '\v', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x695', 
		'\n', '\x66', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\x699', '\n', 'g', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', 
		'\x6A0', '\n', 'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'j', '\x3', 
		'j', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x3', 
		'm', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x2', 
		'\x4', '\x6', '\b', 'p', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', 
		'\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', 
		'\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\x2', 
		'\'', '\x4', '\x2', '\xF', '\x10', ')', ')', '\x3', '\x2', '\x11', '\x12', 
		'\x4', '\x2', '\xF', '\x10', 'T', 'T', '\x3', '\x2', '\'', '(', '\x3', 
		'\x2', '+', ',', '\x3', '\x2', ' ', '!', '\x4', '\x2', '\xC0', '\xC0', 
		'\xC2', '\xC2', '\x3', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\xB9', '\xBA', 
		'\x5', '\x2', 'S', 'S', 'U', 'W', 'y', 'z', '\x6', '\x2', 'K', 'K', 'M', 
		'M', '\x62', '\x62', '}', '\x7F', '\x3', '\x2', 'O', 'P', '\x4', '\x2', 
		'N', 'N', 'Q', 'R', '\x4', '\x2', '>', '>', '\xC7', '\xC7', '\x3', '\x2', 
		'\x98', '\x99', '\x4', '\x2', 'i', 'i', '\xEA', '\xEA', '\x3', '\x2', 
		'H', 'I', '\x4', '\x2', '\x32', '\x32', '\x81', '\x81', '\x4', '\x2', 
		'>', '>', 'j', 'j', '\x5', '\x2', '\x46', 'G', 'Y', '\\', '\x82', '\x85', 
		'\x6', '\x2', '\x46', 'G', 'Y', '\\', '\x82', '\x85', '\x89', '\x8A', 
		'\x3', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x44', '\x45', '\x4', '\x2', 
		'\x42', '\x42', '\x87', '\x87', '\x3', '\x2', 'k', 'l', '\x3', '\x2', 
		'\xF', '\x10', '\x4', '\x2', '\xE7', '\xE8', '\xEB', '\xEB', '\x4', '\x2', 
		'\xF', '\xF', '\x11', '\x11', '\x5', '\x2', '>', '>', 'j', 'j', '\xDE', 
		'\xDE', '\x3', '\x2', '\xD7', '\xDC', '\x4', '\x2', 'o', 'o', '\xD2', 
		'\xD2', '\x5', '\x2', 'o', 'o', 'v', 'v', '\xD1', '\xD1', '\x4', '\x2', 
		'>', '>', '\xD6', '\xD6', '\x3', '\x2', '\t', '\xE', '\x4', '\x2', '-', 
		'-', '\xE7', '\xEA', '\x5', '\x2', '\x9E', '\xA4', '\xC8', '\xC8', '\xDF', 
		'\xDF', '\x4', '\x2', '>', '>', '\xE9', '\xE9', '\x2', '\x754', '\x2', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x104', '\x3', '\x2', '\x2', '\x2', '\b', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x15F', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\xE', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x178', '\x3', '\x2', '\x2', '\x2', '\x12', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x189', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x18', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1B0', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\"', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x234', '\x3', '\x2', '\x2', '\x2', '&', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x273', '\x3', '\x2', '\x2', '\x2', '*', '\x277', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x30', '\x2F2', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x309', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x342', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x372', '\x3', '\x2', '\x2', '\x2', ':', '\x3A2', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x3C1', '\x3', '\x2', '\x2', '\x2', '>', '\x3C3', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x417', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x419', '\x3', '\x2', '\x2', '\x2', '\x44', '\x420', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x42F', '\x3', '\x2', '\x2', '\x2', 'H', '\x431', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x46A', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x4A6', '\x3', '\x2', '\x2', '\x2', 'N', '\x4A8', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x4AC', '\x3', '\x2', '\x2', '\x2', 'R', '\x4B5', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x4BC', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x4C2', '\x3', '\x2', '\x2', '\x2', 'X', '\x4D2', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\\', '\x4DC', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x4EF', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x62', '\x502', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x505', '\x3', '\x2', '\x2', '\x2', '\x66', '\x50F', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x519', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x520', '\x3', '\x2', '\x2', '\x2', 'l', '\x527', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x534', '\x3', '\x2', '\x2', '\x2', 'p', '\x543', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x545', '\x3', '\x2', '\x2', '\x2', 
		't', '\x548', '\x3', '\x2', '\x2', '\x2', 'v', '\x551', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x555', '\x3', '\x2', '\x2', '\x2', 'z', '\x55C', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x561', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x565', '\x3', '\x2', '\x2', '\x2', '\x80', '\x570', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x577', '\x3', '\x2', '\x2', '\x2', '\x84', '\x587', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x589', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x5D7', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x5DB', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x5DD', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x5E6', '\x3', '\x2', '\x2', '\x2', '\x94', '\x5EB', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x5F5', '\x3', '\x2', '\x2', '\x2', '\x98', '\x604', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x617', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x61F', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x62B', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x639', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x642', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x653', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x655', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x65A', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x65E', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x660', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x662', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x66B', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x66D', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x670', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x672', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x674', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x676', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x678', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x67A', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x67F', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x68A', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x68D', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x690', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x694', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x698', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x69F', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x6A1', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x6A4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x6A6', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x6A8', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x6AC', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x6AE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\x5', '\x4', '\x3', '\x2', '\xDF', '\xE0', '\a', '\xED', '\x2', '\x2', 
		'\xE0', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', '\x2', '\x2', '\x3', '\xE7', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x5', '\xBC', '_', '\x2', 
		'\xE9', '\xEA', '\a', '\x16', '\x2', '\x2', '\xEA', '\xEB', '\x5', '\x6', 
		'\x4', '\x2', '\xEB', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\x5', '\xBC', '_', '\x2', '\xED', '\xEE', '\a', 'r', '\x2', '\x2', '\xEE', 
		'\xEF', '\x5', '\x6', '\x4', '\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF2', '\x5', '\"', '\x12', '\x2', '\xF1', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\b', '\x4', '\x1', '\x2', '\xF4', '\xF5', '\a', 
		'\x3', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x6', '\x4', '\x2', '\xF6', 
		'\xF7', '\a', '\x4', '\x2', '\x2', '\xF7', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\x105', '\x5', '\f', '\a', '\x2', '\xF9', '\xFA', '\t', 
		'\x2', '\x2', '\x2', '\xFA', '\x105', '\x5', '\x6', '\x4', '\f', '\xFB', 
		'\xFC', '\a', '\x19', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x6', '\x4', 
		'\x2', '\xFD', '\xFE', '\a', '\x1A', '\x2', '\x2', '\xFE', '\xFF', '\x5', 
		'\x6', '\x4', '\x2', '\xFF', '\x100', '\a', '\x1B', '\x2', '\x2', '\x100', 
		'\x101', '\x5', '\x6', '\x4', '\x5', '\x101', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x105', '\x5', '\xD8', 'm', '\x2', '\x103', '\x105', 
		'\x5', '\xBC', '_', '\x2', '\x104', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x104', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x126', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\f', 
		'\v', '\x2', '\x2', '\x107', '\x108', '\t', '\x3', '\x2', '\x2', '\x108', 
		'\x125', '\x5', '\x6', '\x4', '\f', '\x109', '\x10A', '\f', '\n', '\x2', 
		'\x2', '\x10A', '\x10B', '\t', '\x4', '\x2', '\x2', '\x10B', '\x125', 
		'\x5', '\x6', '\x4', '\v', '\x10C', '\x10D', '\f', '\t', '\x2', '\x2', 
		'\x10D', '\x10E', '\x5', '\xC8', '\x65', '\x2', '\x10E', '\x10F', '\x5', 
		'\x6', '\x4', '\n', '\x10F', '\x125', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\f', '\a', '\x2', '\x2', '\x111', '\x112', '\a', '&', '\x2', 
		'\x2', '\x112', '\x125', '\x5', '\x6', '\x4', '\b', '\x113', '\x114', 
		'\f', '\x6', '\x2', '\x2', '\x114', '\x115', '\t', '\x5', '\x2', '\x2', 
		'\x115', '\x125', '\x5', '\x6', '\x4', '\a', '\x116', '\x117', '\f', '\xE', 
		'\x2', '\x2', '\x117', '\x118', '\a', '\x5', '\x2', '\x2', '\x118', '\x119', 
		'\x5', '\xE', '\b', '\x2', '\x119', '\x11A', '\a', '\x6', '\x2', '\x2', 
		'\x11A', '\x125', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\f', 
		'\r', '\x2', '\x2', '\x11C', '\x11D', '\a', '\x17', '\x2', '\x2', '\x11D', 
		'\x125', '\x5', '\xBE', '`', '\x2', '\x11E', '\x11F', '\f', '\b', '\x2', 
		'\x2', '\x11F', '\x122', '\t', '\x6', '\x2', '\x2', '\x120', '\x123', 
		'\x5', '\xC2', '\x62', '\x2', '\x121', '\x123', '\x5', '\xD2', 'j', '\x2', 
		'\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x125', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x124', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x124', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x116', '\x3', '\x2', '\x2', '\x2', '\x124', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\b', '\x5', '\x1', '\x2', '\x12A', '\x12B', '\a', '\x3', '\x2', 
		'\x2', '\x12B', '\x12C', '\x5', '\b', '\x5', '\x2', '\x12C', '\x12D', 
		'\a', '\x4', '\x2', '\x2', '\x12D', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x13B', '\x5', '\n', '\x6', '\x2', '\x12F', '\x130', '\t', '\x2', 
		'\x2', '\x2', '\x130', '\x13B', '\x5', '\b', '\x5', '\f', '\x131', '\x132', 
		'\a', '\x19', '\x2', '\x2', '\x132', '\x133', '\x5', '\b', '\x5', '\x2', 
		'\x133', '\x134', '\a', '\x1A', '\x2', '\x2', '\x134', '\x135', '\x5', 
		'\b', '\x5', '\x2', '\x135', '\x136', '\a', '\x1B', '\x2', '\x2', '\x136', 
		'\x137', '\x5', '\b', '\x5', '\x5', '\x137', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x13B', '\x5', '\xD8', 'm', '\x2', '\x139', '\x13B', 
		'\x5', '\xC0', '\x61', '\x2', '\x13A', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x131', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x154', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\f', '\v', '\x2', '\x2', '\x13D', '\x13E', '\t', '\x3', '\x2', '\x2', 
		'\x13E', '\x153', '\x5', '\b', '\x5', '\f', '\x13F', '\x140', '\f', '\n', 
		'\x2', '\x2', '\x140', '\x141', '\t', '\x4', '\x2', '\x2', '\x141', '\x153', 
		'\x5', '\b', '\x5', '\v', '\x142', '\x143', '\f', '\t', '\x2', '\x2', 
		'\x143', '\x144', '\x5', '\xC8', '\x65', '\x2', '\x144', '\x145', '\x5', 
		'\b', '\x5', '\n', '\x145', '\x153', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\f', '\a', '\x2', '\x2', '\x147', '\x148', '\a', '&', '\x2', 
		'\x2', '\x148', '\x153', '\x5', '\b', '\x5', '\b', '\x149', '\x14A', '\f', 
		'\x6', '\x2', '\x2', '\x14A', '\x14B', '\t', '\x5', '\x2', '\x2', '\x14B', 
		'\x153', '\x5', '\b', '\x5', '\a', '\x14C', '\x14D', '\f', '\b', '\x2', 
		'\x2', '\x14D', '\x150', '\t', '\x6', '\x2', '\x2', '\x14E', '\x151', 
		'\x5', '\xC2', '\x62', '\x2', '\x14F', '\x151', '\x5', '\xD2', 'j', '\x2', 
		'\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x153', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x152', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x142', '\x3', '\x2', '\x2', '\x2', '\x152', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x153', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x155', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x157', '\x160', 
		'\x5', '&', '\x14', '\x2', '\x158', '\x160', '\x5', '.', '\x18', '\x2', 
		'\x159', '\x160', '\x5', '\x32', '\x1A', '\x2', '\x15A', '\x160', '\x5', 
		'\x36', '\x1C', '\x2', '\x15B', '\x160', '\x5', ':', '\x1E', '\x2', '\x15C', 
		'\x160', '\x5', '\x44', '#', '\x2', '\x15D', '\x160', '\x5', '\x46', '$', 
		'\x2', '\x15E', '\x160', '\x5', 'L', '\'', '\x2', '\x15F', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x160', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x161', '\x16E', '\x5', ' ', '\x11', '\x2', '\x162', '\x16E', 
		'\x5', '$', '\x13', '\x2', '\x163', '\x16E', '\x5', ',', '\x17', '\x2', 
		'\x164', '\x16E', '\x5', '\x30', '\x19', '\x2', '\x165', '\x16E', '\x5', 
		'\x34', '\x1B', '\x2', '\x166', '\x16E', '\x5', '\x38', '\x1D', '\x2', 
		'\x167', '\x16E', '\x5', '<', '\x1F', '\x2', '\x168', '\x16E', '\x5', 
		'>', ' ', '\x2', '\x169', '\x16E', '\x5', '@', '!', '\x2', '\x16A', '\x16E', 
		'\x5', '\x42', '\"', '\x2', '\x16B', '\x16E', '\x5', 'H', '%', '\x2', 
		'\x16C', '\x16E', '\x5', 'J', '&', '\x2', '\x16D', '\x161', '\x3', '\x2', 
		'\x2', '\x2', '\x16D', '\x162', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x165', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x167', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\r', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x177', '\x5', '\x10', 
		'\t', '\x2', '\x170', '\x177', '\x5', '\x12', '\n', '\x2', '\x171', '\x177', 
		'\x5', '\x14', '\v', '\x2', '\x172', '\x177', '\x5', '\x16', '\f', '\x2', 
		'\x173', '\x177', '\x5', '\x18', '\r', '\x2', '\x174', '\x177', '\x5', 
		'\x1A', '\xE', '\x2', '\x175', '\x177', '\x5', '\x1E', '\x10', '\x2', 
		'\x176', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x176', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x171', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x172', '\x3', '\x2', '\x2', '\x2', '\x176', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x176', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', '$', '\x2', '\x2', '\x179', '\x17E', '\x5', 'N', 
		'(', '\x2', '\x17A', '\x17B', '\a', '\x13', '\x2', '\x2', '\x17B', '\x17D', 
		'\x5', 'N', '(', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x182', '\a', '?', '\x2', '\x2', '\x182', '\x187', '\x5', 
		'P', ')', '\x2', '\x183', '\x185', '\x5', 'p', '\x39', '\x2', '\x184', 
		'\x186', '\x5', 'r', ':', '\x2', '\x185', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18A', '\a', '`', '\x2', '\x2', '\x18A', 
		'\x18B', '\x5', '\b', '\x5', '\x2', '\x18B', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x18D', '\a', '\"', '\x2', '\x2', '\x18D', '\x192', '\x5', 
		'T', '+', '\x2', '\x18E', '\x18F', '\a', '\x13', '\x2', '\x2', '\x18F', 
		'\x191', '\x5', 'T', '+', '\x2', '\x190', '\x18E', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x194', '\x3', '\x2', '\x2', '\x2', '\x192', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x17', '\x3', '\x2', '\x2', '\x2', '\x194', '\x192', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x196', '\t', '\a', '\x2', '\x2', '\x196', 
		'\x19B', '\x5', '\xC0', '\x61', '\x2', '\x197', '\x198', '\a', '\x13', 
		'\x2', '\x2', '\x198', '\x19A', '\x5', '\xC0', '\x61', '\x2', '\x199', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\t', 
		'\b', '\x2', '\x2', '\x19F', '\x1A0', '\x5', '\xC0', '\x61', '\x2', '\x1A0', 
		'\x1A1', '\a', '\x13', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', '\xC0', 
		'\x61', '\x2', '\x1A2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\a', '\xC1', '\x2', '\x2', '\x1A4', '\x1A5', '\x5', '\xC0', '\x61', '\x2', 
		'\x1A5', '\x1A6', '\a', '\x13', '\x2', '\x2', '\x1A6', '\x1A7', '\x5', 
		'\xC0', '\x61', '\x2', '\x1A7', '\x1A8', '\a', '+', '\x2', '\x2', '\x1A8', 
		'\x1AD', '\x5', '\xD8', 'm', '\x2', '\x1A9', '\x1AA', '\a', '\x13', '\x2', 
		'\x2', '\x1AA', '\x1AC', '\x5', '\xD8', 'm', '\x2', '\x1AB', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\xC3', '\x2', 
		'\x2', '\x1B1', '\x1B6', '\x5', 'V', ',', '\x2', '\x1B2', '\x1B3', '\a', 
		'\x13', '\x2', '\x2', '\x1B3', '\x1B5', '\x5', 'V', ',', '\x2', '\x1B4', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\t', 
		'\t', '\x2', '\x2', '\x1BA', '\x1BB', '\a', '\x3', '\x2', '\x2', '\x1BB', 
		'\x1BC', '\x5', '\\', '/', '\x2', '\x1BC', '\x1BD', '\x5', '`', '\x31', 
		'\x2', '\x1BD', '\x1BE', '\a', '\x4', '\x2', '\x2', '\x1BE', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\t', '\n', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\a', '\x3', '\x2', '\x2', '\x1C1', '\x1C2', '\x5', 
		'Z', '.', '\x2', '\x1C2', '\x1C3', '\x5', '`', '\x31', '\x2', '\x1C3', 
		'\x1C4', '\a', '\x4', '\x2', '\x2', '\x1C4', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1C8', '\a', 'q', '\x2', '\x2', '\x1C8', '\x1C9', '\a', 'p', 
		'\x2', '\x2', '\x1C9', '\x1CA', '\x5', '\xD4', 'k', '\x2', '\x1CA', '\x1D3', 
		'\a', '\x3', '\x2', '\x2', '\x1CB', '\x1D0', '\x5', 't', ';', '\x2', '\x1CC', 
		'\x1CD', '\a', '\x13', '\x2', '\x2', '\x1CD', '\x1CF', '\x5', 't', ';', 
		'\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D8', 
		'\a', '\x4', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '\xBF', '\x2', '\x2', 
		'\x1D7', '\x1D9', '\x5', 'v', '<', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '\xAE', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\x5', '\x6', '\x4', '\x2', '\x1DC', '\x1DD', '\a', 
		'w', '\x2', '\x2', '\x1DD', '\x1DE', '\a', 'p', '\x2', '\x2', '\x1DE', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', 'q', '\x2', 
		'\x2', '\x1E0', '\x1E1', '\a', 's', '\x2', '\x2', '\x1E1', '\x1E2', '\a', 
		'u', '\x2', '\x2', '\x1E2', '\x1E3', '\x5', '\x8E', 'H', '\x2', '\x1E3', 
		'\x1E4', '\a', '\x3', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', '\x90', 'I', 
		'\x2', '\x1E5', '\x1E6', '\a', '\x4', '\x2', '\x2', '\x1E6', '\x1E7', 
		'\a', '\xAE', '\x2', '\x2', '\x1E7', '\x1E8', '\x5', '\x94', 'K', '\x2', 
		'\x1E8', '\x1E9', '\a', 'w', '\x2', '\x2', '\x1E9', '\x1EA', '\a', 's', 
		'\x2', '\x2', '\x1EA', '\x1EB', '\a', 'u', '\x2', '\x2', '\x1EB', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', 'q', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\a', 't', '\x2', '\x2', '\x1EE', '\x1EF', '\a', 'u', 
		'\x2', '\x2', '\x1EF', '\x1F0', '\x5', '\x8E', 'H', '\x2', '\x1F0', '\x1F1', 
		'\a', '\x3', '\x2', '\x2', '\x1F1', '\x1F2', '\x5', '\x9C', 'O', '\x2', 
		'\x1F2', '\x1F3', '\a', '\x4', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '\xAE', 
		'\x2', '\x2', '\x1F4', '\x1F5', '\x5', '\x98', 'M', '\x2', '\x1F5', '\x1F6', 
		'\a', 'w', '\x2', '\x2', '\x1F6', '\x1F7', '\a', 't', '\x2', '\x2', '\x1F7', 
		'\x1F8', '\a', 'u', '\x2', '\x2', '\x1F8', '\x1FA', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '#', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x5', '\xD4', 
		'k', '\x2', '\x1FC', '\x205', '\a', '\x3', '\x2', '\x2', '\x1FD', '\x202', 
		'\x5', '*', '\x16', '\x2', '\x1FE', '\x1FF', '\a', '\x13', '\x2', '\x2', 
		'\x1FF', '\x201', '\x5', '*', '\x16', '\x2', '\x200', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x201', '\x204', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x203', '\x206', '\x3', '\x2', '\x2', '\x2', '\x204', '\x202', 
		'\x3', '\x2', '\x2', '\x2', '\x205', '\x1FD', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x206', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', 
		'\x2', '\x2', '\x2', '\x207', '\x208', '\a', '\x4', '\x2', '\x2', '\x208', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\a', '\x18', '\x2', 
		'\x2', '\x20A', '\x20B', '\a', '\x3', '\x2', '\x2', '\x20B', '\x20C', 
		'\x5', '\xD6', 'l', '\x2', '\x20C', '\x20F', '\a', '\x3', '\x2', '\x2', 
		'\x20D', '\x210', '\x5', '\xBC', '_', '\x2', '\x20E', '\x210', '\x5', 
		'X', '-', '\x2', '\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20F', 
		'\x20E', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x210', '\x218', '\x3', '\x2', '\x2', '\x2', '\x211', '\x214', 
		'\a', '\x13', '\x2', '\x2', '\x212', '\x215', '\x5', '\xBC', '_', '\x2', 
		'\x213', '\x215', '\x5', 'X', '-', '\x2', '\x214', '\x212', '\x3', '\x2', 
		'\x2', '\x2', '\x214', '\x213', '\x3', '\x2', '\x2', '\x2', '\x215', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x218', '\x216', '\x3', 
		'\x2', '\x2', '\x2', '\x218', '\x219', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21B', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x21E', '\a', '\x4', '\x2', '\x2', '\x21C', '\x21D', 
		'\a', '\xE6', '\x2', '\x2', '\x21D', '\x21F', '\a', '\xEA', '\x2', '\x2', 
		'\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x21F', '\x222', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x221', '\a', '\xBF', '\x2', '\x2', '\x221', '\x223', '\x5', '\x84', 
		'\x43', '\x2', '\x222', '\x220', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\x3', '\x2', '\x2', 
		'\x2', '\x224', '\x225', '\a', '\x4', '\x2', '\x2', '\x225', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\a', '\xD0', '\x2', '\x2', 
		'\x227', '\x228', '\a', '\x3', '\x2', '\x2', '\x228', '\x229', '\x5', 
		'\x6', '\x4', '\x2', '\x229', '\x22C', '\a', '\x13', '\x2', '\x2', '\x22A', 
		'\x22D', '\x5', '\xDA', 'n', '\x2', '\x22B', '\x22D', '\x5', '\x8C', 'G', 
		'\x2', '\x22C', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\x22D', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x22E', '\x22F', '\a', '\x13', '\x2', '\x2', '\x22F', '\x231', '\a', 
		'\xEA', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', 
		'\x231', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x233', '\a', '\x4', '\x2', '\x2', '\x233', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x234', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x209', '\x3', '\x2', '\x2', '\x2', '\x234', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '%', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x237', '\x5', '\xD4', 'k', '\x2', '\x237', '\x240', '\a', '\x3', '\x2', 
		'\x2', '\x238', '\x23D', '\x5', '(', '\x15', '\x2', '\x239', '\x23A', 
		'\a', '\x13', '\x2', '\x2', '\x23A', '\x23C', '\x5', '(', '\x15', '\x2', 
		'\x23B', '\x239', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23D', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x240', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x241', '\x242', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\a', 
		'\x4', '\x2', '\x2', '\x243', '\x270', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x245', '\a', '\xD0', '\x2', '\x2', '\x245', '\x246', '\a', '\x3', '\x2', 
		'\x2', '\x246', '\x247', '\x5', '\b', '\x5', '\x2', '\x247', '\x24A', 
		'\a', '\x13', '\x2', '\x2', '\x248', '\x24B', '\x5', '\xDA', 'n', '\x2', 
		'\x249', '\x24B', '\x5', '\x8C', 'G', '\x2', '\x24A', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x24A', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24B', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\a', '\x13', '\x2', 
		'\x2', '\x24D', '\x24F', '\a', '\xEA', '\x2', '\x2', '\x24E', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\a', 
		'\x4', '\x2', '\x2', '\x251', '\x270', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x253', '\a', '\x18', '\x2', '\x2', '\x253', '\x254', '\a', '\x3', '\x2', 
		'\x2', '\x254', '\x255', '\x5', '\xD6', 'l', '\x2', '\x255', '\x258', 
		'\a', '\x3', '\x2', '\x2', '\x256', '\x259', '\x5', '\xC0', '\x61', '\x2', 
		'\x257', '\x259', '\x5', 'X', '-', '\x2', '\x258', '\x256', '\x3', '\x2', 
		'\x2', '\x2', '\x258', '\x257', '\x3', '\x2', '\x2', '\x2', '\x258', '\x259', 
		'\x3', '\x2', '\x2', '\x2', '\x259', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x25D', '\a', '\x13', '\x2', '\x2', '\x25B', '\x25E', '\x5', 
		'\xC0', '\x61', '\x2', '\x25C', '\x25E', '\x5', 'X', '-', '\x2', '\x25D', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25C', '\x3', '\x2', '\x2', 
		'\x2', '\x25E', '\x260', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x263', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x261', '\x262', '\x3', 
		'\x2', '\x2', '\x2', '\x262', '\x264', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x264', '\x267', '\a', '\x4', '\x2', 
		'\x2', '\x265', '\x266', '\a', '\xE6', '\x2', '\x2', '\x266', '\x268', 
		'\a', '\xEA', '\x2', '\x2', '\x267', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x267', '\x268', '\x3', '\x2', '\x2', '\x2', '\x268', '\x26B', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x26A', '\a', '\xBF', '\x2', '\x2', '\x26A', 
		'\x26C', '\x5', 'x', '=', '\x2', '\x26B', '\x269', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '\x4', '\x2', '\x2', 
		'\x26E', '\x270', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x244', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x252', '\x3', '\x2', '\x2', '\x2', '\x270', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x274', '\x5', '\b', '\x5', '\x2', '\x272', '\x274', 
		'\a', 'i', '\x2', '\x2', '\x273', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x273', '\x272', '\x3', '\x2', '\x2', '\x2', '\x274', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x275', '\x278', '\x5', '\x6', '\x4', '\x2', '\x276', '\x278', 
		'\a', 'i', '\x2', '\x2', '\x277', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x276', '\x3', '\x2', '\x2', '\x2', '\x278', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x279', '\x27A', '\t', '\v', '\x2', '\x2', '\x27A', '\x27B', 
		'\a', '\x3', '\x2', '\x2', '\x27B', '\x27C', '\x5', '\x6', '\x4', '\x2', 
		'\x27C', '\x27D', '\a', '\x4', '\x2', '\x2', '\x27D', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x27F', '\a', 'X', '\x2', '\x2', '\x27F', 
		'\x280', '\a', '\x3', '\x2', '\x2', '\x280', '\x28B', '\x5', '\x6', '\x4', 
		'\x2', '\x281', '\x282', '\a', '\x13', '\x2', '\x2', '\x282', '\x283', 
		'\x5', '\xCA', '\x66', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'\x284', '\x285', '\a', '\x13', '\x2', '\x2', '\x285', '\x286', '\x5', 
		'\xCA', '\x66', '\x2', '\x286', '\x288', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\x3', '\x2', '\x2', 
		'\x2', '\x288', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', 
		'\a', '\x13', '\x2', '\x2', '\x28A', '\x28C', '\x5', '\xCA', '\x66', '\x2', 
		'\x28B', '\x287', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x28E', '\a', '\x4', '\x2', '\x2', '\x28E', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x28F', '\x290', '\a', '|', '\x2', '\x2', '\x290', '\x291', '\a', 
		'\x3', '\x2', '\x2', '\x291', '\x292', '\x5', '\x6', '\x4', '\x2', '\x292', 
		'\x293', '\a', '\x13', '\x2', '\x2', '\x293', '\x296', '\x5', '\x6', '\x4', 
		'\x2', '\x294', '\x295', '\a', '\x13', '\x2', '\x2', '\x295', '\x297', 
		'\x5', '\xCA', '\x66', '\x2', '\x296', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x296', '\x297', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', '\x3', 
		'\x2', '\x2', '\x2', '\x298', '\x299', '\a', '\x4', '\x2', '\x2', '\x299', 
		'\x2AA', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', '{', '\x2', 
		'\x2', '\x29B', '\x29C', '\a', '\x3', '\x2', '\x2', '\x29C', '\x29D', 
		'\x5', '\x6', '\x4', '\x2', '\x29D', '\x29E', '\a', '\x13', '\x2', '\x2', 
		'\x29E', '\x2A1', '\x5', '\x6', '\x4', '\x2', '\x29F', '\x2A0', '\a', 
		'\x13', '\x2', '\x2', '\x2A0', '\x2A2', '\x5', '\xCA', '\x66', '\x2', 
		'\x2A1', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', 
		'\x2', '\x2', '\x2', '\x2A2', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A3', 
		'\x2A4', '\a', '\x13', '\x2', '\x2', '\x2A4', '\x2A6', '\x5', '\xCA', 
		'\x66', '\x2', '\x2A5', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A5', 
		'\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x2A7', '\x3', '\x2', '\x2', 
		'\x2', '\x2A7', '\x2A8', '\a', '\x4', '\x2', '\x2', '\x2A8', '\x2AA', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'\x2A9', '\x27E', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x2A9', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\t', '\v', '\x2', 
		'\x2', '\x2AC', '\x2AD', '\a', '\x3', '\x2', '\x2', '\x2AD', '\x2AE', 
		'\x5', '\b', '\x5', '\x2', '\x2AE', '\x2AF', '\a', '\x4', '\x2', '\x2', 
		'\x2AF', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B1', '\a', 
		'X', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x3', '\x2', '\x2', '\x2B2', 
		'\x2BD', '\x5', '\b', '\x5', '\x2', '\x2B3', '\x2B4', '\a', '\x13', '\x2', 
		'\x2', '\x2B4', '\x2B5', '\x5', '\xCC', 'g', '\x2', '\x2B5', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\a', '\x13', '\x2', '\x2', 
		'\x2B7', '\x2B8', '\x5', '\xCC', 'g', '\x2', '\x2B8', '\x2BA', '\x3', 
		'\x2', '\x2', '\x2', '\x2B9', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B9', 
		'\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2BB', '\x2BC', '\a', '\x13', '\x2', '\x2', '\x2BC', '\x2BE', 
		'\x5', '\xCC', 'g', '\x2', '\x2BD', '\x2B9', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\a', '\x4', '\x2', '\x2', '\x2C0', 
		'\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\a', '|', '\x2', 
		'\x2', '\x2C2', '\x2C3', '\a', '\x3', '\x2', '\x2', '\x2C3', '\x2C4', 
		'\x5', '\b', '\x5', '\x2', '\x2C4', '\x2C5', '\a', '\x13', '\x2', '\x2', 
		'\x2C5', '\x2C8', '\x5', '\b', '\x5', '\x2', '\x2C6', '\x2C7', '\a', '\x13', 
		'\x2', '\x2', '\x2C7', '\x2C9', '\x5', '\xCC', 'g', '\x2', '\x2C8', '\x2C6', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C9', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\a', 
		'\x4', '\x2', '\x2', '\x2CB', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x2CD', '\a', '{', '\x2', '\x2', '\x2CD', '\x2CE', '\a', '\x3', '\x2', 
		'\x2', '\x2CE', '\x2CF', '\x5', '\b', '\x5', '\x2', '\x2CF', '\x2D0', 
		'\a', '\x13', '\x2', '\x2', '\x2D0', '\x2D3', '\x5', '\b', '\x5', '\x2', 
		'\x2D1', '\x2D2', '\a', '\x13', '\x2', '\x2', '\x2D2', '\x2D4', '\x5', 
		'\xCC', 'g', '\x2', '\x2D3', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D3', 
		'\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D7', '\x3', '\x2', '\x2', 
		'\x2', '\x2D5', '\x2D6', '\a', '\x13', '\x2', '\x2', '\x2D6', '\x2D8', 
		'\x5', '\xCC', 'g', '\x2', '\x2D7', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2D7', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', '\x3', 
		'\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\a', '\x4', '\x2', '\x2', '\x2DA', 
		'\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2AB', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2C1', 
		'\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2CC', '\x3', '\x2', '\x2', '\x2', 
		'\x2DC', '/', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\t', '\f', 
		'\x2', '\x2', '\x2DE', '\x2DF', '\a', '\x3', '\x2', '\x2', '\x2DF', '\x2E0', 
		'\x5', '\x6', '\x4', '\x2', '\x2E0', '\x2E1', '\a', '\x4', '\x2', '\x2', 
		'\x2E1', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E3', '\t', 
		'\r', '\x2', '\x2', '\x2E3', '\x2E4', '\a', '\x3', '\x2', '\x2', '\x2E4', 
		'\x2E7', '\x5', '\x6', '\x4', '\x2', '\x2E5', '\x2E6', '\a', '\x13', '\x2', 
		'\x2', '\x2E6', '\x2E8', '\x5', '\xCA', '\x66', '\x2', '\x2E7', '\x2E5', 
		'\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'\x2E8', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\a', 
		'\x4', '\x2', '\x2', '\x2EA', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2EC', '\t', '\xE', '\x2', '\x2', '\x2EC', '\x2ED', '\a', '\x3', '\x2', 
		'\x2', '\x2ED', '\x2EE', '\x5', '\x6', '\x4', '\x2', '\x2EE', '\x2EF', 
		'\a', '\x13', '\x2', '\x2', '\x2EF', '\x2F0', '\x5', '\x6', '\x4', '\x2', 
		'\x2F0', '\x2F1', '\a', '\x4', '\x2', '\x2', '\x2F1', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F2', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2EB', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', 
		'\t', '\f', '\x2', '\x2', '\x2F5', '\x2F6', '\a', '\x3', '\x2', '\x2', 
		'\x2F6', '\x2F7', '\x5', '\b', '\x5', '\x2', '\x2F7', '\x2F8', '\a', '\x4', 
		'\x2', '\x2', '\x2F8', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', 
		'\t', '\r', '\x2', '\x2', '\x2FA', '\x2FB', '\a', '\x3', '\x2', '\x2', 
		'\x2FB', '\x2FE', '\x5', '\b', '\x5', '\x2', '\x2FC', '\x2FD', '\a', '\x13', 
		'\x2', '\x2', '\x2FD', '\x2FF', '\x5', '\xCC', 'g', '\x2', '\x2FE', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\x2FF', '\x300', '\x3', '\x2', '\x2', '\x2', '\x300', '\x301', '\a', 
		'\x4', '\x2', '\x2', '\x301', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x303', '\t', '\xE', '\x2', '\x2', '\x303', '\x304', '\a', '\x3', '\x2', 
		'\x2', '\x304', '\x305', '\x5', '\b', '\x5', '\x2', '\x305', '\x306', 
		'\a', '\x13', '\x2', '\x2', '\x306', '\x307', '\x5', '\b', '\x5', '\x2', 
		'\x307', '\x308', '\a', '\x4', '\x2', '\x2', '\x308', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x309', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x309', 
		'\x2F9', '\x3', '\x2', '\x2', '\x2', '\x309', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', 
		'\a', '*', '\x2', '\x2', '\x30C', '\x30D', '\a', '\x3', '\x2', '\x2', 
		'\x30D', '\x30E', '\x5', '\x6', '\x4', '\x2', '\x30E', '\x30F', '\a', 
		'\x13', '\x2', '\x2', '\x30F', '\x310', '\x5', '\x6', '\x4', '\x2', '\x310', 
		'\x311', '\a', '\x13', '\x2', '\x2', '\x311', '\x312', '\x5', '\x6', '\x4', 
		'\x2', '\x312', '\x313', '\a', '\x4', '\x2', '\x2', '\x313', '\x32C', 
		'\x3', '\x2', '\x2', '\x2', '\x314', '\x315', '\a', '\x65', '\x2', '\x2', 
		'\x315', '\x316', '\a', '\x3', '\x2', '\x2', '\x316', '\x317', '\x5', 
		'\x6', '\x4', '\x2', '\x317', '\x318', '\a', '\x13', '\x2', '\x2', '\x318', 
		'\x319', '\x5', '\x6', '\x4', '\x2', '\x319', '\x31A', '\a', '\x4', '\x2', 
		'\x2', '\x31A', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', 
		'\a', '.', '\x2', '\x2', '\x31C', '\x31D', '\a', '\x3', '\x2', '\x2', 
		'\x31D', '\x31E', '\x5', '\x6', '\x4', '\x2', '\x31E', '\x31F', '\a', 
		'\x4', '\x2', '\x2', '\x31F', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x320', 
		'\x321', '\a', '\x39', '\x2', '\x2', '\x321', '\x322', '\a', '\x3', '\x2', 
		'\x2', '\x322', '\x323', '\x5', '\x6', '\x4', '\x2', '\x323', '\x324', 
		'\a', '\x13', '\x2', '\x2', '\x324', '\x327', '\x5', '\x6', '\x4', '\x2', 
		'\x325', '\x326', '\a', '\x13', '\x2', '\x2', '\x326', '\x328', '\x5', 
		'\xDC', 'o', '\x2', '\x327', '\x325', '\x3', '\x2', '\x2', '\x2', '\x327', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x328', '\x329', '\x3', '\x2', '\x2', 
		'\x2', '\x329', '\x32A', '\a', '\x4', '\x2', '\x2', '\x32A', '\x32C', 
		'\x3', '\x2', '\x2', '\x2', '\x32B', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\x32B', '\x314', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x31B', '\x3', 
		'\x2', '\x2', '\x2', '\x32B', '\x320', '\x3', '\x2', '\x2', '\x2', '\x32C', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', '\a', '*', '\x2', 
		'\x2', '\x32E', '\x32F', '\a', '\x3', '\x2', '\x2', '\x32F', '\x330', 
		'\x5', '\b', '\x5', '\x2', '\x330', '\x331', '\a', '\x13', '\x2', '\x2', 
		'\x331', '\x332', '\x5', '\b', '\x5', '\x2', '\x332', '\x333', '\a', '\x13', 
		'\x2', '\x2', '\x333', '\x334', '\x5', '\b', '\x5', '\x2', '\x334', '\x335', 
		'\a', '\x4', '\x2', '\x2', '\x335', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\x336', '\x337', '\a', '\x65', '\x2', '\x2', '\x337', '\x338', '\a', 
		'\x3', '\x2', '\x2', '\x338', '\x339', '\x5', '\b', '\x5', '\x2', '\x339', 
		'\x33A', '\a', '\x13', '\x2', '\x2', '\x33A', '\x33B', '\x5', '\b', '\x5', 
		'\x2', '\x33B', '\x33C', '\a', '\x4', '\x2', '\x2', '\x33C', '\x343', 
		'\x3', '\x2', '\x2', '\x2', '\x33D', '\x33E', '\a', '.', '\x2', '\x2', 
		'\x33E', '\x33F', '\a', '\x3', '\x2', '\x2', '\x33F', '\x340', '\x5', 
		'\b', '\x5', '\x2', '\x340', '\x341', '\a', '\x4', '\x2', '\x2', '\x341', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x342', '\x32D', '\x3', '\x2', '\x2', 
		'\x2', '\x342', '\x336', '\x3', '\x2', '\x2', '\x2', '\x342', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x343', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x344', '\x345', '\a', '\xC6', '\x2', '\x2', '\x345', '\x347', '\a', 
		'\x3', '\x2', '\x2', '\x346', '\x348', '\x5', '\x6', '\x4', '\x2', '\x347', 
		'\x346', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x348', '\x349', '\x3', '\x2', '\x2', '\x2', '\x349', '\x373', 
		'\a', '\x4', '\x2', '\x2', '\x34A', '\x34B', '\a', '\x97', '\x2', '\x2', 
		'\x34B', '\x34C', '\a', '\x3', '\x2', '\x2', '\x34C', '\x34F', '\x5', 
		'\x6', '\x4', '\x2', '\x34D', '\x34E', '\a', '\x13', '\x2', '\x2', '\x34E', 
		'\x350', '\t', '\xF', '\x2', '\x2', '\x34F', '\x34D', '\x3', '\x2', '\x2', 
		'\x2', '\x34F', '\x350', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', 
		'\x3', '\x2', '\x2', '\x2', '\x351', '\x352', '\a', '\x4', '\x2', '\x2', 
		'\x352', '\x373', '\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\t', 
		'\x10', '\x2', '\x2', '\x354', '\x355', '\a', '\x3', '\x2', '\x2', '\x355', 
		'\x356', '\x5', '\x6', '\x4', '\x2', '\x356', '\x357', '\a', '\x4', '\x2', 
		'\x2', '\x357', '\x373', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', 
		'\a', '\x9A', '\x2', '\x2', '\x359', '\x35A', '\a', '\x3', '\x2', '\x2', 
		'\x35A', '\x35B', '\x5', '\x6', '\x4', '\x2', '\x35B', '\x35C', '\a', 
		'\x13', '\x2', '\x2', '\x35C', '\x35D', '\x5', 'l', '\x37', '\x2', '\x35D', 
		'\x35E', '\a', '\x4', '\x2', '\x2', '\x35E', '\x373', '\x3', '\x2', '\x2', 
		'\x2', '\x35F', '\x360', '\a', '\xC9', '\x2', '\x2', '\x360', '\x361', 
		'\a', '\x3', '\x2', '\x2', '\x361', '\x364', '\a', '\xEA', '\x2', '\x2', 
		'\x362', '\x363', '\a', '\x13', '\x2', '\x2', '\x363', '\x365', '\t', 
		'\x11', '\x2', '\x2', '\x364', '\x362', '\x3', '\x2', '\x2', '\x2', '\x364', 
		'\x365', '\x3', '\x2', '\x2', '\x2', '\x365', '\x368', '\x3', '\x2', '\x2', 
		'\x2', '\x366', '\x367', '\a', '\x13', '\x2', '\x2', '\x367', '\x369', 
		'\x5', '\xCA', '\x66', '\x2', '\x368', '\x366', '\x3', '\x2', '\x2', '\x2', 
		'\x368', '\x369', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36C', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x36B', '\a', '\x13', '\x2', '\x2', '\x36B', 
		'\x36D', '\t', '\x12', '\x2', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', 
		'\x2', '\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36E', 
		'\x3', '\x2', '\x2', '\x2', '\x36E', '\x373', '\a', '\x4', '\x2', '\x2', 
		'\x36F', '\x370', '\a', '\x1E', '\x2', '\x2', '\x370', '\x371', '\a', 
		'\x3', '\x2', '\x2', '\x371', '\x373', '\a', '\x4', '\x2', '\x2', '\x372', 
		'\x344', '\x3', '\x2', '\x2', '\x2', '\x372', '\x34A', '\x3', '\x2', '\x2', 
		'\x2', '\x372', '\x353', '\x3', '\x2', '\x2', '\x2', '\x372', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x372', '\x35F', '\x3', '\x2', '\x2', '\x2', 
		'\x372', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x373', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\x375', '\a', '\xC6', '\x2', '\x2', '\x375', 
		'\x377', '\a', '\x3', '\x2', '\x2', '\x376', '\x378', '\x5', '\b', '\x5', 
		'\x2', '\x377', '\x376', '\x3', '\x2', '\x2', '\x2', '\x377', '\x378', 
		'\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\x3', '\x2', '\x2', '\x2', 
		'\x379', '\x3A3', '\a', '\x4', '\x2', '\x2', '\x37A', '\x37B', '\a', '\x97', 
		'\x2', '\x2', '\x37B', '\x37C', '\a', '\x3', '\x2', '\x2', '\x37C', '\x37F', 
		'\x5', '\b', '\x5', '\x2', '\x37D', '\x37E', '\a', '\x13', '\x2', '\x2', 
		'\x37E', '\x380', '\t', '\xF', '\x2', '\x2', '\x37F', '\x37D', '\x3', 
		'\x2', '\x2', '\x2', '\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x381', '\x382', '\a', '\x4', '\x2', 
		'\x2', '\x382', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\t', '\x10', '\x2', '\x2', '\x384', '\x385', '\a', '\x3', '\x2', '\x2', 
		'\x385', '\x386', '\x5', '\b', '\x5', '\x2', '\x386', '\x387', '\a', '\x4', 
		'\x2', '\x2', '\x387', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x388', '\x389', 
		'\a', '\x9A', '\x2', '\x2', '\x389', '\x38A', '\a', '\x3', '\x2', '\x2', 
		'\x38A', '\x38B', '\x5', '\b', '\x5', '\x2', '\x38B', '\x38C', '\a', '\x13', 
		'\x2', '\x2', '\x38C', '\x38D', '\x5', 'l', '\x37', '\x2', '\x38D', '\x38E', 
		'\a', '\x4', '\x2', '\x2', '\x38E', '\x3A3', '\x3', '\x2', '\x2', '\x2', 
		'\x38F', '\x390', '\a', '\xC9', '\x2', '\x2', '\x390', '\x391', '\a', 
		'\x3', '\x2', '\x2', '\x391', '\x394', '\a', '\xEA', '\x2', '\x2', '\x392', 
		'\x393', '\a', '\x13', '\x2', '\x2', '\x393', '\x395', '\t', '\x11', '\x2', 
		'\x2', '\x394', '\x392', '\x3', '\x2', '\x2', '\x2', '\x394', '\x395', 
		'\x3', '\x2', '\x2', '\x2', '\x395', '\x398', '\x3', '\x2', '\x2', '\x2', 
		'\x396', '\x397', '\a', '\x13', '\x2', '\x2', '\x397', '\x399', '\x5', 
		'\xCC', 'g', '\x2', '\x398', '\x396', '\x3', '\x2', '\x2', '\x2', '\x398', 
		'\x399', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39C', '\x3', '\x2', '\x2', 
		'\x2', '\x39A', '\x39B', '\a', '\x13', '\x2', '\x2', '\x39B', '\x39D', 
		'\t', '\x12', '\x2', '\x2', '\x39C', '\x39A', '\x3', '\x2', '\x2', '\x2', 
		'\x39C', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x39E', '\x3A3', '\a', '\x4', '\x2', '\x2', '\x39F', 
		'\x3A0', '\a', '\x1E', '\x2', '\x2', '\x3A0', '\x3A1', '\a', '\x3', '\x2', 
		'\x2', '\x3A1', '\x3A3', '\a', '\x4', '\x2', '\x2', '\x3A2', '\x374', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x37A', '\x3', '\x2', '\x2', '\x2', 
		'\x3A2', '\x383', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x388', '\x3', 
		'\x2', '\x2', '\x2', '\x3A2', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x3A2', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A3', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x3A4', '\x3A5', '\a', '\x30', '\x2', '\x2', '\x3A5', '\x3A6', 
		'\a', '\x3', '\x2', '\x2', '\x3A6', '\x3A9', '\x5', '\x6', '\x4', '\x2', 
		'\x3A7', '\x3A8', '\a', '\x13', '\x2', '\x2', '\x3A8', '\x3AA', '\x5', 
		'\x6', '\x4', '\x2', '\x3A9', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3A9', '\x3', '\x2', '\x2', 
		'\x2', '\x3AB', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', 
		'\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\a', '\x4', '\x2', '\x2', 
		'\x3AE', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', '\a', 
		'\x33', '\x2', '\x2', '\x3B0', '\x3B1', '\a', '\x3', '\x2', '\x2', '\x3B1', 
		'\x3B4', '\x5', '\x6', '\x4', '\x2', '\x3B2', '\x3B3', '\a', '\x13', '\x2', 
		'\x2', '\x3B3', '\x3B5', '\x5', '\x6', '\x4', '\x2', '\x3B4', '\x3B2', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'\x3B6', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B7', '\x3', 
		'\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x3B9', '\a', '\x4', '\x2', '\x2', '\x3B9', '\x3C2', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\x3BB', '\t', '\x13', '\x2', '\x2', '\x3BB', '\x3BC', 
		'\a', '\x3', '\x2', '\x2', '\x3BC', '\x3BD', '\x5', '\x6', '\x4', '\x2', 
		'\x3BD', '\x3BE', '\a', '\x13', '\x2', '\x2', '\x3BE', '\x3BF', '\x5', 
		'\x6', '\x4', '\x2', '\x3BF', '\x3C0', '\a', '\x4', '\x2', '\x2', '\x3C0', 
		'\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3A4', '\x3', '\x2', '\x2', 
		'\x2', '\x3C1', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3BA', 
		'\x3', '\x2', '\x2', '\x2', '\x3C2', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x3C3', '\x3C4', '\a', 'h', '\x2', '\x2', '\x3C4', '\x3C5', '\a', '\x3', 
		'\x2', '\x2', '\x3C5', '\x3C6', '\x5', '\x6', '\x4', '\x2', '\x3C6', '\x3C7', 
		'\a', '\x13', '\x2', '\x2', '\x3C7', '\x3C9', '\a', '\xEB', '\x2', '\x2', 
		'\x3C8', '\x3CA', '\x5', '\xB0', 'Y', '\x2', '\x3C9', '\x3C8', '\x3', 
		'\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CA', 
		'\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\a', 'v', '\x2', 
		'\x2', '\x3CC', '\x3CE', '\x5', '\xC0', '\x61', '\x2', '\x3CD', '\x3CB', 
		'\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\x3', '\x2', '\x2', '\x2', 
		'\x3CE', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D1', '\x5', 
		'\xAE', 'X', '\x2', '\x3D0', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D3', '\x3', '\x2', '\x2', 
		'\x2', '\x3D2', '\x3D4', '\x5', '\xB6', '\\', '\x2', '\x3D3', '\x3D2', 
		'\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D4', '\x3', '\x2', '\x2', '\x2', 
		'\x3D4', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D7', '\x5', 
		'\xB8', ']', '\x2', '\x3D6', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D8', '\x3', '\x2', '\x2', 
		'\x2', '\x3D8', '\x3D9', '\a', '\x4', '\x2', '\x2', '\x3D9', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x3DA', '\x3DB', '\a', '\xD4', '\x2', '\x2', '\x3DB', 
		'\x3DC', '\a', '\x3', '\x2', '\x2', '\x3DC', '\x3DD', '\x5', '\x6', '\x4', 
		'\x2', '\x3DD', '\x3DE', '\a', '\x13', '\x2', '\x2', '\x3DE', '\x3E8', 
		'\a', '\xEB', '\x2', '\x2', '\x3DF', '\x3E0', '\a', '\xDD', '\x2', '\x2', 
		'\x3E0', '\x3E5', '\x5', '\xC0', '\x61', '\x2', '\x3E1', '\x3E2', '\a', 
		'\x13', '\x2', '\x2', '\x3E2', '\x3E4', '\x5', '\xC0', '\x61', '\x2', 
		'\x3E3', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E7', '\x3', 
		'\x2', '\x2', '\x2', '\x3E5', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3E5', 
		'\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E9', '\x3', '\x2', '\x2', 
		'\x2', '\x3E7', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\x3', '\x2', '\x2', '\x2', 
		'\x3E9', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EC', '\x5', 
		'\xAC', 'W', '\x2', '\x3EB', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3EB', 
		'\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\x3', '\x2', '\x2', 
		'\x2', '\x3ED', '\x3EE', '\a', '\x4', '\x2', '\x2', '\x3EE', '\x418', 
		'\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\xD5', '\x2', '\x2', 
		'\x3F0', '\x3F1', '\a', '\x3', '\x2', '\x2', '\x3F1', '\x3F2', '\x5', 
		'\x6', '\x4', '\x2', '\x3F2', '\x3F3', '\a', '\x13', '\x2', '\x2', '\x3F3', 
		'\x3F5', '\a', '\xEB', '\x2', '\x2', '\x3F4', '\x3F6', '\x5', '\xB0', 
		'Y', '\x2', '\x3F5', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', 
		'\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x3F7', '\x3F8', '\a', 'v', '\x2', '\x2', '\x3F8', '\x3FA', '\x5', '\xC0', 
		'\x61', '\x2', '\x3F9', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F9', 
		'\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FC', '\x3', '\x2', '\x2', 
		'\x2', '\x3FB', '\x3FD', '\x5', '\xAE', 'X', '\x2', '\x3FC', '\x3FB', 
		'\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', '\x2', '\x2', '\x2', 
		'\x3FD', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x400', '\x5', 
		'\xB2', 'Z', '\x2', '\x3FF', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x3FF', 
		'\x400', '\x3', '\x2', '\x2', '\x2', '\x400', '\x402', '\x3', '\x2', '\x2', 
		'\x2', '\x401', '\x403', '\x5', '\xAC', 'W', '\x2', '\x402', '\x401', 
		'\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\x3', '\x2', '\x2', '\x2', 
		'\x403', '\x404', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\a', 
		'\x4', '\x2', '\x2', '\x405', '\x418', '\x3', '\x2', '\x2', '\x2', '\x406', 
		'\x407', '\a', '\x38', '\x2', '\x2', '\x407', '\x408', '\a', '\x3', '\x2', 
		'\x2', '\x408', '\x40A', '\x5', '\x6', '\x4', '\x2', '\x409', '\x40B', 
		'\x5', '\xC4', '\x63', '\x2', '\x40A', '\x409', '\x3', '\x2', '\x2', '\x2', 
		'\x40A', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40D', '\x3', 
		'\x2', '\x2', '\x2', '\x40C', '\x40E', '\x5', '\xC6', '\x64', '\x2', '\x40D', 
		'\x40C', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x40E', '\x3', '\x2', '\x2', 
		'\x2', '\x40E', '\x410', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x411', 
		'\x5', '\xB4', '[', '\x2', '\x410', '\x40F', '\x3', '\x2', '\x2', '\x2', 
		'\x410', '\x411', '\x3', '\x2', '\x2', '\x2', '\x411', '\x413', '\x3', 
		'\x2', '\x2', '\x2', '\x412', '\x414', '\t', '\x14', '\x2', '\x2', '\x413', 
		'\x412', '\x3', '\x2', '\x2', '\x2', '\x413', '\x414', '\x3', '\x2', '\x2', 
		'\x2', '\x414', '\x415', '\x3', '\x2', '\x2', '\x2', '\x415', '\x416', 
		'\a', '\x4', '\x2', '\x2', '\x416', '\x418', '\x3', '\x2', '\x2', '\x2', 
		'\x417', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x417', '\x3EF', '\x3', 
		'\x2', '\x2', '\x2', '\x417', '\x406', '\x3', '\x2', '\x2', '\x2', '\x418', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x419', '\x41A', '\a', 'g', '\x2', 
		'\x2', '\x41A', '\x41B', '\a', '\x3', '\x2', '\x2', '\x41B', '\x41C', 
		'\x5', '\x6', '\x4', '\x2', '\x41C', '\x41D', '\a', '\x13', '\x2', '\x2', 
		'\x41D', '\x41E', '\x5', '\x6', '\x4', '\x2', '\x41E', '\x41F', '\a', 
		'\x4', '\x2', '\x2', '\x41F', '\x43', '\x3', '\x2', '\x2', '\x2', '\x420', 
		'\x421', '\a', 'g', '\x2', '\x2', '\x421', '\x422', '\a', '\x3', '\x2', 
		'\x2', '\x422', '\x423', '\x5', '\b', '\x5', '\x2', '\x423', '\x424', 
		'\a', '\x13', '\x2', '\x2', '\x424', '\x425', '\x5', '\b', '\x5', '\x2', 
		'\x425', '\x426', '\a', '\x4', '\x2', '\x2', '\x426', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x427', '\x428', '\t', '\x15', '\x2', '\x2', '\x428', '\x429', 
		'\a', '\x3', '\x2', '\x2', '\x429', '\x42A', '\x5', '\b', '\x5', '\x2', 
		'\x42A', '\x42B', '\a', '\x4', '\x2', '\x2', '\x42B', '\x430', '\x3', 
		'\x2', '\x2', '\x2', '\x42C', '\x42D', '\a', '\\', '\x2', '\x2', '\x42D', 
		'\x42E', '\a', '\x3', '\x2', '\x2', '\x42E', '\x430', '\a', '\x4', '\x2', 
		'\x2', '\x42F', '\x427', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x42C', 
		'\x3', '\x2', '\x2', '\x2', '\x430', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x431', '\x432', '\t', '\x15', '\x2', '\x2', '\x432', '\x433', '\a', 
		'\x3', '\x2', '\x2', '\x433', '\x438', '\x5', '\x6', '\x4', '\x2', '\x434', 
		'\x436', '\x5', 'p', '\x39', '\x2', '\x435', '\x437', '\x5', 'r', ':', 
		'\x2', '\x436', '\x435', '\x3', '\x2', '\x2', '\x2', '\x436', '\x437', 
		'\x3', '\x2', '\x2', '\x2', '\x437', '\x439', '\x3', '\x2', '\x2', '\x2', 
		'\x438', '\x434', '\x3', '\x2', '\x2', '\x2', '\x438', '\x439', '\x3', 
		'\x2', '\x2', '\x2', '\x439', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x43B', '\a', '\x4', '\x2', '\x2', '\x43B', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x43C', '\x43D', '\t', '\x16', '\x2', '\x2', '\x43D', '\x43E', 
		'\a', '\x3', '\x2', '\x2', '\x43E', '\x43F', '\x5', '\x6', '\x4', '\x2', 
		'\x43F', '\x440', '\a', '\x8E', '\x2', '\x2', '\x440', '\x442', '\a', 
		'\x3', '\x2', '\x2', '\x441', '\x443', '\x5', '\x64', '\x33', '\x2', '\x442', 
		'\x441', '\x3', '\x2', '\x2', '\x2', '\x442', '\x443', '\x3', '\x2', '\x2', 
		'\x2', '\x443', '\x445', '\x3', '\x2', '\x2', '\x2', '\x444', '\x446', 
		'\x5', '\x66', '\x34', '\x2', '\x445', '\x444', '\x3', '\x2', '\x2', '\x2', 
		'\x445', '\x446', '\x3', '\x2', '\x2', '\x2', '\x446', '\x448', '\x3', 
		'\x2', '\x2', '\x2', '\x447', '\x449', '\x5', 'j', '\x36', '\x2', '\x448', 
		'\x447', '\x3', '\x2', '\x2', '\x2', '\x448', '\x449', '\x3', '\x2', '\x2', 
		'\x2', '\x449', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', 
		'\a', '\x4', '\x2', '\x2', '\x44B', '\x44C', '\a', '\x4', '\x2', '\x2', 
		'\x44C', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x44D', '\x44E', '\t', 
		'\x17', '\x2', '\x2', '\x44E', '\x44F', '\a', '\x3', '\x2', '\x2', '\x44F', 
		'\x455', '\x5', '\x6', '\x4', '\x2', '\x450', '\x451', '\a', '\x13', '\x2', 
		'\x2', '\x451', '\x453', '\x5', 'l', '\x37', '\x2', '\x452', '\x454', 
		'\x5', 'X', '-', '\x2', '\x453', '\x452', '\x3', '\x2', '\x2', '\x2', 
		'\x453', '\x454', '\x3', '\x2', '\x2', '\x2', '\x454', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x455', '\x450', '\x3', '\x2', '\x2', '\x2', '\x455', 
		'\x456', '\x3', '\x2', '\x2', '\x2', '\x456', '\x457', '\x3', '\x2', '\x2', 
		'\x2', '\x457', '\x458', '\a', '\x8E', '\x2', '\x2', '\x458', '\x45A', 
		'\a', '\x3', '\x2', '\x2', '\x459', '\x45B', '\x5', '\x64', '\x33', '\x2', 
		'\x45A', '\x459', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x45B', '\x3', 
		'\x2', '\x2', '\x2', '\x45B', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x45C', 
		'\x45D', '\x5', '\x66', '\x34', '\x2', '\x45D', '\x45E', '\x3', '\x2', 
		'\x2', '\x2', '\x45E', '\x45F', '\a', '\x4', '\x2', '\x2', '\x45F', '\x460', 
		'\a', '\x4', '\x2', '\x2', '\x460', '\x46B', '\x3', '\x2', '\x2', '\x2', 
		'\x461', '\x462', '\a', '\x8D', '\x2', '\x2', '\x462', '\x463', '\a', 
		'\x3', '\x2', '\x2', '\x463', '\x464', '\x5', '\x6', '\x4', '\x2', '\x464', 
		'\x465', '\a', '\x8E', '\x2', '\x2', '\x465', '\x466', '\a', '\x3', '\x2', 
		'\x2', '\x466', '\x467', '\x5', '\x64', '\x33', '\x2', '\x467', '\x468', 
		'\a', '\x4', '\x2', '\x2', '\x468', '\x469', '\a', '\x4', '\x2', '\x2', 
		'\x469', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x46A', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x46A', 
		'\x461', '\x3', '\x2', '\x2', '\x2', '\x46B', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x46C', '\x46D', '\t', '\x16', '\x2', '\x2', '\x46D', '\x46E', 
		'\a', '\x3', '\x2', '\x2', '\x46E', '\x46F', '\x5', '\b', '\x5', '\x2', 
		'\x46F', '\x470', '\a', '\x8E', '\x2', '\x2', '\x470', '\x472', '\a', 
		'\x3', '\x2', '\x2', '\x471', '\x473', '\x5', '\x64', '\x33', '\x2', '\x472', 
		'\x471', '\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x475', '\x3', '\x2', '\x2', '\x2', '\x474', '\x476', 
		'\x5', '\x66', '\x34', '\x2', '\x475', '\x474', '\x3', '\x2', '\x2', '\x2', 
		'\x475', '\x476', '\x3', '\x2', '\x2', '\x2', '\x476', '\x478', '\x3', 
		'\x2', '\x2', '\x2', '\x477', '\x479', '\x5', 'j', '\x36', '\x2', '\x478', 
		'\x477', '\x3', '\x2', '\x2', '\x2', '\x478', '\x479', '\x3', '\x2', '\x2', 
		'\x2', '\x479', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x47B', 
		'\a', '\x4', '\x2', '\x2', '\x47B', '\x47C', '\a', '\x4', '\x2', '\x2', 
		'\x47C', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x47D', '\x47E', '\t', 
		'\x17', '\x2', '\x2', '\x47E', '\x47F', '\a', '\x3', '\x2', '\x2', '\x47F', 
		'\x485', '\x5', '\b', '\x5', '\x2', '\x480', '\x481', '\a', '\x13', '\x2', 
		'\x2', '\x481', '\x483', '\x5', 'l', '\x37', '\x2', '\x482', '\x484', 
		'\x5', 'X', '-', '\x2', '\x483', '\x482', '\x3', '\x2', '\x2', '\x2', 
		'\x483', '\x484', '\x3', '\x2', '\x2', '\x2', '\x484', '\x486', '\x3', 
		'\x2', '\x2', '\x2', '\x485', '\x480', '\x3', '\x2', '\x2', '\x2', '\x485', 
		'\x486', '\x3', '\x2', '\x2', '\x2', '\x486', '\x487', '\x3', '\x2', '\x2', 
		'\x2', '\x487', '\x488', '\a', '\x8E', '\x2', '\x2', '\x488', '\x48A', 
		'\a', '\x3', '\x2', '\x2', '\x489', '\x48B', '\x5', '\x64', '\x33', '\x2', 
		'\x48A', '\x489', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x48B', '\x3', 
		'\x2', '\x2', '\x2', '\x48B', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x48C', 
		'\x48D', '\x5', '\x66', '\x34', '\x2', '\x48D', '\x48E', '\x3', '\x2', 
		'\x2', '\x2', '\x48E', '\x48F', '\a', '\x4', '\x2', '\x2', '\x48F', '\x490', 
		'\a', '\x4', '\x2', '\x2', '\x490', '\x4A7', '\x3', '\x2', '\x2', '\x2', 
		'\x491', '\x492', '\a', '\x43', '\x2', '\x2', '\x492', '\x493', '\a', 
		'\x3', '\x2', '\x2', '\x493', '\x494', '\a', '\x8E', '\x2', '\x2', '\x494', 
		'\x496', '\a', '\x3', '\x2', '\x2', '\x495', '\x497', '\x5', '\x64', '\x33', 
		'\x2', '\x496', '\x495', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', 
		'\x3', '\x2', '\x2', '\x2', '\x497', '\x498', '\x3', '\x2', '\x2', '\x2', 
		'\x498', '\x499', '\x5', '\x66', '\x34', '\x2', '\x499', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x49A', '\x49B', '\a', '\x4', '\x2', '\x2', '\x49B', 
		'\x49C', '\a', '\x4', '\x2', '\x2', '\x49C', '\x4A7', '\x3', '\x2', '\x2', 
		'\x2', '\x49D', '\x49E', '\a', '\x8D', '\x2', '\x2', '\x49E', '\x49F', 
		'\a', '\x3', '\x2', '\x2', '\x49F', '\x4A0', '\x5', '\b', '\x5', '\x2', 
		'\x4A0', '\x4A1', '\a', '\x8E', '\x2', '\x2', '\x4A1', '\x4A2', '\a', 
		'\x3', '\x2', '\x2', '\x4A2', '\x4A3', '\x5', '\x64', '\x33', '\x2', '\x4A3', 
		'\x4A4', '\a', '\x4', '\x2', '\x2', '\x4A4', '\x4A5', '\a', '\x4', '\x2', 
		'\x2', '\x4A5', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x46C', 
		'\x3', '\x2', '\x2', '\x2', '\x4A6', '\x47D', '\x3', '\x2', '\x2', '\x2', 
		'\x4A6', '\x491', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x49D', '\x3', 
		'\x2', '\x2', '\x2', '\x4A7', 'M', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x4A9', '\x5', '\xC0', '\x61', '\x2', '\x4A9', '\x4AA', '\a', ':', '\x2', 
		'\x2', '\x4AA', '\x4AB', '\x5', '\xC0', '\x61', '\x2', '\x4AB', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x4AC', '\x4B1', '\x5', 'R', '*', '\x2', '\x4AD', 
		'\x4AE', '\a', '\x13', '\x2', '\x2', '\x4AE', '\x4B0', '\x5', 'R', '*', 
		'\x2', '\x4AF', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B3', 
		'\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4AF', '\x3', '\x2', '\x2', '\x2', 
		'\x4B1', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B2', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x4B3', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B6', 
		'\x5', '\xCE', 'h', '\x2', '\x4B5', '\x4B4', '\x3', '\x2', '\x2', '\x2', 
		'\x4B5', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B7', '\x3', 
		'\x2', '\x2', '\x2', '\x4B7', '\x4B8', '\x5', '\xC0', '\x61', '\x2', '\x4B8', 
		'\x4B9', '\a', '\x16', '\x2', '\x2', '\x4B9', '\x4BA', '\x5', '\x46', 
		'$', '\x2', '\x4BA', 'S', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BD', 
		'\x5', '\xCE', 'h', '\x2', '\x4BC', '\x4BB', '\x3', '\x2', '\x2', '\x2', 
		'\x4BC', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4BE', '\x3', 
		'\x2', '\x2', '\x2', '\x4BE', '\x4BF', '\x5', '\xC0', '\x61', '\x2', '\x4BF', 
		'\x4C0', '\a', '\x16', '\x2', '\x2', '\x4C0', '\x4C1', '\x5', '\b', '\x5', 
		'\x2', '\x4C1', 'U', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\x5', 
		'\xC0', '\x61', '\x2', '\x4C3', '\x4C4', '\a', '\t', '\x2', '\x2', '\x4C4', 
		'\x4C5', '\x5', 'X', '-', '\x2', '\x4C5', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x4C6', '\x4D3', '\x5', '\xD8', 'm', '\x2', '\x4C7', '\x4C8', '\a', '\xD0', 
		'\x2', '\x2', '\x4C8', '\x4C9', '\a', '\x3', '\x2', '\x2', '\x4C9', '\x4CA', 
		'\x5', '\xD8', 'm', '\x2', '\x4CA', '\x4CB', '\a', '\x13', '\x2', '\x2', 
		'\x4CB', '\x4CE', '\x5', '\xDA', 'n', '\x2', '\x4CC', '\x4CD', '\a', '\x13', 
		'\x2', '\x2', '\x4CD', '\x4CF', '\a', '\xEA', '\x2', '\x2', '\x4CE', '\x4CC', 
		'\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\x4CF', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D1', '\a', 
		'\x4', '\x2', '\x2', '\x4D1', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D2', 
		'\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4C7', '\x3', '\x2', '\x2', 
		'\x2', '\x4D3', 'Y', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D9', '\x5', 
		'^', '\x30', '\x2', '\x4D5', '\x4D6', '\a', '\x13', '\x2', '\x2', '\x4D6', 
		'\x4D8', '\x5', '^', '\x30', '\x2', '\x4D7', '\x4D5', '\x3', '\x2', '\x2', 
		'\x2', '\x4D8', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4D7', 
		'\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DA', '\x3', '\x2', '\x2', '\x2', 
		'\x4DA', '[', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4D9', '\x3', '\x2', 
		'\x2', '\x2', '\x4DC', '\x4E1', '\x5', '^', '\x30', '\x2', '\x4DD', '\x4DE', 
		'\a', '\x13', '\x2', '\x2', '\x4DE', '\x4E0', '\x5', '^', '\x30', '\x2', 
		'\x4DF', '\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E3', '\x3', 
		'\x2', '\x2', '\x2', '\x4E1', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4E1', 
		'\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4ED', '\x3', '\x2', '\x2', 
		'\x2', '\x4E3', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', 
		'\a', '\x1C', '\x2', '\x2', '\x4E5', '\x4EA', '\x5', '\xC0', '\x61', '\x2', 
		'\x4E6', '\x4E7', '\a', '\x13', '\x2', '\x2', '\x4E7', '\x4E9', '\x5', 
		'\xC0', '\x61', '\x2', '\x4E8', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4E9', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4E8', '\x3', '\x2', '\x2', 
		'\x2', '\x4EA', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EA', '\x3', '\x2', '\x2', '\x2', 
		'\x4ED', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EE', '\x3', 
		'\x2', '\x2', '\x2', '\x4EE', ']', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F2', '\x5', '\x6', '\x4', '\x2', '\x4F0', '\x4F1', '\a', '%', '\x2', 
		'\x2', '\x4F1', '\x4F3', '\x5', '\xBA', '^', '\x2', '\x4F2', '\x4F0', 
		'\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', '\x2', 
		'\x4F3', '_', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F6', '\x5', '\x14', 
		'\v', '\x2', '\x4F5', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F5', '\x4F6', 
		'\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4FA', '\x3', '\x2', '\x2', '\x2', 
		'\x4F7', '\x4FB', '\x5', '\x16', '\f', '\x2', '\x4F8', '\x4FB', '\x5', 
		'\x62', '\x32', '\x2', '\x4F9', '\x4FB', '\x5', '\x12', '\n', '\x2', '\x4FA', 
		'\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4F8', '\x3', '\x2', '\x2', 
		'\x2', '\x4FA', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'\x4FC', '\x4FE', '\x5', '\x18', '\r', '\x2', '\x4FD', '\x4FC', '\x3', 
		'\x2', '\x2', '\x2', '\x4FD', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x4FE', 
		'\x500', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x501', '\x5', '\x10', 
		'\t', '\x2', '\x500', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x500', '\x501', 
		'\x3', '\x2', '\x2', '\x2', '\x501', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x502', '\x503', '\a', '\xC4', '\x2', '\x2', '\x503', '\x504', '\x5', 
		'\x6', '\x4', '\x2', '\x504', '\x63', '\x3', '\x2', '\x2', '\x2', '\x505', 
		'\x506', '\a', '\x92', '\x2', '\x2', '\x506', '\x507', '\a', '\x42', '\x2', 
		'\x2', '\x507', '\x50C', '\x5', '\xC0', '\x61', '\x2', '\x508', '\x509', 
		'\a', '\x13', '\x2', '\x2', '\x509', '\x50B', '\x5', '\xC0', '\x61', '\x2', 
		'\x50A', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x50E', '\x3', 
		'\x2', '\x2', '\x2', '\x50C', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50C', 
		'\x50D', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x50E', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x510', 
		'\a', '\x41', '\x2', '\x2', '\x510', '\x511', '\a', '\x42', '\x2', '\x2', 
		'\x511', '\x516', '\x5', 'h', '\x35', '\x2', '\x512', '\x513', '\a', '\x13', 
		'\x2', '\x2', '\x513', '\x515', '\x5', 'h', '\x35', '\x2', '\x514', '\x512', 
		'\x3', '\x2', '\x2', '\x2', '\x515', '\x518', '\x3', '\x2', '\x2', '\x2', 
		'\x516', '\x514', '\x3', '\x2', '\x2', '\x2', '\x516', '\x517', '\x3', 
		'\x2', '\x2', '\x2', '\x517', 'g', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x516', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51B', '\x5', '\xC0', 
		'\x61', '\x2', '\x51A', '\x51C', '\t', '\x18', '\x2', '\x2', '\x51B', 
		'\x51A', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x51C', '\x3', '\x2', '\x2', 
		'\x2', '\x51C', 'i', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\a', 
		'm', '\x2', '\x2', '\x51E', '\x521', '\a', '\xB2', '\x2', '\x2', '\x51F', 
		'\x521', '\a', '\x94', '\x2', '\x2', '\x520', '\x51D', '\x3', '\x2', '\x2', 
		'\x2', '\x520', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', 
		'\x3', '\x2', '\x2', '\x2', '\x522', '\x523', '\a', '*', '\x2', '\x2', 
		'\x523', '\x524', '\x5', 'n', '\x38', '\x2', '\x524', '\x525', '\a', '&', 
		'\x2', '\x2', '\x525', '\x526', '\x5', 'n', '\x38', '\x2', '\x526', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\x527', '\x528', '\a', '\xE7', '\x2', '\x2', 
		'\x528', 'm', '\x3', '\x2', '\x2', '\x2', '\x529', '\x52A', '\a', '\xE7', 
		'\x2', '\x2', '\x52A', '\x535', '\a', '\x8F', '\x2', '\x2', '\x52B', '\x52C', 
		'\a', '\xE7', '\x2', '\x2', '\x52C', '\x535', '\a', '\x90', '\x2', '\x2', 
		'\x52D', '\x52E', '\a', '\x95', '\x2', '\x2', '\x52E', '\x52F', '\a', 
		'm', '\x2', '\x2', '\x52F', '\x535', '\a', '\xB3', '\x2', '\x2', '\x530', 
		'\x531', '\a', '\x91', '\x2', '\x2', '\x531', '\x535', '\a', '\x8F', '\x2', 
		'\x2', '\x532', '\x533', '\a', '\x91', '\x2', '\x2', '\x533', '\x535', 
		'\a', '\x90', '\x2', '\x2', '\x534', '\x529', '\x3', '\x2', '\x2', '\x2', 
		'\x534', '\x52B', '\x3', '\x2', '\x2', '\x2', '\x534', '\x52D', '\x3', 
		'\x2', '\x2', '\x2', '\x534', '\x530', '\x3', '\x2', '\x2', '\x2', '\x534', 
		'\x532', '\x3', '\x2', '\x2', '\x2', '\x535', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x536', '\x537', '\a', '\x86', '\x2', '\x2', '\x537', '\x538', 
		'\t', '\x19', '\x2', '\x2', '\x538', '\x53D', '\x5', '\xC0', '\x61', '\x2', 
		'\x539', '\x53A', '\a', '\x13', '\x2', '\x2', '\x53A', '\x53C', '\x5', 
		'\xC0', '\x61', '\x2', '\x53B', '\x539', '\x3', '\x2', '\x2', '\x2', '\x53C', 
		'\x53F', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53B', '\x3', '\x2', '\x2', 
		'\x2', '\x53D', '\x53E', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x544', 
		'\x3', '\x2', '\x2', '\x2', '\x53F', '\x53D', '\x3', '\x2', '\x2', '\x2', 
		'\x540', '\x541', '\a', '\x86', '\x2', '\x2', '\x541', '\x542', '\a', 
		'>', '\x2', '\x2', '\x542', '\x544', '\x5', '\b', '\x5', '\x2', '\x543', 
		'\x536', '\x3', '\x2', '\x2', '\x2', '\x543', '\x540', '\x3', '\x2', '\x2', 
		'\x2', '\x544', 'q', '\x3', '\x2', '\x2', '\x2', '\x545', '\x546', '\a', 
		'\x88', '\x2', '\x2', '\x546', '\x547', '\x5', '\b', '\x5', '\x2', '\x547', 
		's', '\x3', '\x2', '\x2', '\x2', '\x548', '\x549', '\x5', '\xBC', '_', 
		'\x2', '\x549', '\x54C', '\x5', 'z', '>', '\x2', '\x54A', '\x54B', '\a', 
		'\xD3', '\x2', '\x2', '\x54B', '\x54D', '\x5', 'X', '-', '\x2', '\x54C', 
		'\x54A', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54D', '\x3', '\x2', '\x2', 
		'\x2', '\x54D', 'u', '\x3', '\x2', '\x2', '\x2', '\x54E', '\x552', '\x5', 
		'~', '@', '\x2', '\x54F', '\x552', '\x5', '\x82', '\x42', '\x2', '\x550', 
		'\x552', '\x5', '\x80', '\x41', '\x2', '\x551', '\x54E', '\x3', '\x2', 
		'\x2', '\x2', '\x551', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x551', '\x550', 
		'\x3', '\x2', '\x2', '\x2', '\x552', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x553', '\x556', '\x5', '\x80', '\x41', '\x2', '\x554', '\x556', '\x5', 
		'~', '@', '\x2', '\x555', '\x553', '\x3', '\x2', '\x2', '\x2', '\x555', 
		'\x554', '\x3', '\x2', '\x2', '\x2', '\x556', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x557', '\x55D', '\x5', '~', '@', '\x2', '\x558', '\x55D', '\x5', 
		'\x82', '\x42', '\x2', '\x559', '\x55D', '\x5', '\x86', '\x44', '\x2', 
		'\x55A', '\x55D', '\x5', '|', '?', '\x2', '\x55B', '\x55D', '\x5', '\x80', 
		'\x41', '\x2', '\x55C', '\x557', '\x3', '\x2', '\x2', '\x2', '\x55C', 
		'\x558', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x559', '\x3', '\x2', '\x2', 
		'\x2', '\x55C', '\x55A', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55B', 
		'\x3', '\x2', '\x2', '\x2', '\x55D', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x55E', '\x562', '\a', 'u', '\x2', '\x2', '\x55F', '\x562', '\x5', '\x88', 
		'\x45', '\x2', '\x560', '\x562', '\x5', '\x8A', '\x46', '\x2', '\x561', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x561', '\x55F', '\x3', '\x2', '\x2', 
		'\x2', '\x561', '\x560', '\x3', '\x2', '\x2', '\x2', '\x562', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x563', '\x566', '\x5', '\xDA', 'n', '\x2', '\x564', 
		'\x566', '\x5', '\x8C', 'G', '\x2', '\x565', '\x563', '\x3', '\x2', '\x2', 
		'\x2', '\x565', '\x564', '\x3', '\x2', '\x2', '\x2', '\x566', '\x568', 
		'\x3', '\x2', '\x2', '\x2', '\x567', '\x569', '\x5', '\xA6', 'T', '\x2', 
		'\x568', '\x567', '\x3', '\x2', '\x2', '\x2', '\x568', '\x569', '\x3', 
		'\x2', '\x2', '\x2', '\x569', '\x56E', '\x3', '\x2', '\x2', '\x2', '\x56A', 
		'\x56C', '\a', ')', '\x2', '\x2', '\x56B', '\x56A', '\x3', '\x2', '\x2', 
		'\x2', '\x56B', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56C', '\x56D', 
		'\x3', '\x2', '\x2', '\x2', '\x56D', '\x56F', '\a', '-', '\x2', '\x2', 
		'\x56E', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x56F', '\x3', 
		'\x2', '\x2', '\x2', '\x56F', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x570', 
		'\x575', '\x5', '\xCE', 'h', '\x2', '\x571', '\x572', '\a', '\n', '\x2', 
		'\x2', '\x572', '\x573', '\x5', '~', '@', '\x2', '\x573', '\x574', '\a', 
		'\v', '\x2', '\x2', '\x574', '\x576', '\x3', '\x2', '\x2', '\x2', '\x575', 
		'\x571', '\x3', '\x2', '\x2', '\x2', '\x575', '\x576', '\x3', '\x2', '\x2', 
		'\x2', '\x576', '\x81', '\x3', '\x2', '\x2', '\x2', '\x577', '\x583', 
		'\a', 'o', '\x2', '\x2', '\x578', '\x579', '\a', '\a', '\x2', '\x2', '\x579', 
		'\x57E', '\x5', '\xA8', 'U', '\x2', '\x57A', '\x57B', '\a', '\x13', '\x2', 
		'\x2', '\x57B', '\x57D', '\x5', '\xA8', 'U', '\x2', '\x57C', '\x57A', 
		'\x3', '\x2', '\x2', '\x2', '\x57D', '\x580', '\x3', '\x2', '\x2', '\x2', 
		'\x57E', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', '\x3', 
		'\x2', '\x2', '\x2', '\x57F', '\x581', '\x3', '\x2', '\x2', '\x2', '\x580', 
		'\x57E', '\x3', '\x2', '\x2', '\x2', '\x581', '\x582', '\a', '\b', '\x2', 
		'\x2', '\x582', '\x584', '\x3', '\x2', '\x2', '\x2', '\x583', '\x578', 
		'\x3', '\x2', '\x2', '\x2', '\x583', '\x584', '\x3', '\x2', '\x2', '\x2', 
		'\x584', '\x83', '\x3', '\x2', '\x2', '\x2', '\x585', '\x588', '\x5', 
		'\x82', '\x42', '\x2', '\x586', '\x588', '\x5', '~', '@', '\x2', '\x587', 
		'\x585', '\x3', '\x2', '\x2', '\x2', '\x587', '\x586', '\x3', '\x2', '\x2', 
		'\x2', '\x588', '\x85', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58E', 
		'\a', '\xE5', '\x2', '\x2', '\x58A', '\x58B', '\a', '\n', '\x2', '\x2', 
		'\x58B', '\x58C', '\x5', '~', '@', '\x2', '\x58C', '\x58D', '\a', '\v', 
		'\x2', '\x2', '\x58D', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58A', 
		'\x3', '\x2', '\x2', '\x2', '\x58E', '\x58F', '\x3', '\x2', '\x2', '\x2', 
		'\x58F', '\x87', '\x3', '\x2', '\x2', '\x2', '\x590', '\x5AE', '\a', 's', 
		'\x2', '\x2', '\x591', '\x59D', '\a', '\xE1', '\x2', '\x2', '\x592', '\x593', 
		'\a', '\a', '\x2', '\x2', '\x593', '\x598', '\x5', '\x8C', 'G', '\x2', 
		'\x594', '\x595', '\a', '\x11', '\x2', '\x2', '\x595', '\x597', '\x5', 
		'\x8C', 'G', '\x2', '\x596', '\x594', '\x3', '\x2', '\x2', '\x2', '\x597', 
		'\x59A', '\x3', '\x2', '\x2', '\x2', '\x598', '\x596', '\x3', '\x2', '\x2', 
		'\x2', '\x598', '\x599', '\x3', '\x2', '\x2', '\x2', '\x599', '\x59B', 
		'\x3', '\x2', '\x2', '\x2', '\x59A', '\x598', '\x3', '\x2', '\x2', '\x2', 
		'\x59B', '\x59C', '\a', '\b', '\x2', '\x2', '\x59C', '\x59E', '\x3', '\x2', 
		'\x2', '\x2', '\x59D', '\x592', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x59E', '\x5AE', '\x3', '\x2', '\x2', '\x2', 
		'\x59F', '\x5AB', '\a', '\xE2', '\x2', '\x2', '\x5A0', '\x5A1', '\a', 
		'\a', '\x2', '\x2', '\x5A1', '\x5A6', '\x5', '\xBC', '_', '\x2', '\x5A2', 
		'\x5A3', '\a', '\x11', '\x2', '\x2', '\x5A3', '\x5A5', '\x5', '\xBC', 
		'_', '\x2', '\x5A4', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A5', '\x5A8', 
		'\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A4', '\x3', '\x2', '\x2', '\x2', 
		'\x5A6', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A9', '\x3', 
		'\x2', '\x2', '\x2', '\x5A8', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A9', 
		'\x5AA', '\a', '\b', '\x2', '\x2', '\x5AA', '\x5AC', '\x3', '\x2', '\x2', 
		'\x2', '\x5AB', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5AC', 
		'\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AE', '\x3', '\x2', '\x2', '\x2', 
		'\x5AD', '\x590', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x5AD', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x5AE', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5D8', '\a', 't', '\x2', 
		'\x2', '\x5B0', '\x5C1', '\a', '\xE3', '\x2', '\x2', '\x5B1', '\x5B2', 
		'\a', '\a', '\x2', '\x2', '\x5B2', '\x5BE', '\a', '\xEB', '\x2', '\x2', 
		'\x5B3', '\x5B4', '\a', '\x3', '\x2', '\x2', '\x5B4', '\x5B9', '\x5', 
		'\x8C', 'G', '\x2', '\x5B5', '\x5B6', '\a', '\x11', '\x2', '\x2', '\x5B6', 
		'\x5B8', '\x5', '\x8C', 'G', '\x2', '\x5B7', '\x5B5', '\x3', '\x2', '\x2', 
		'\x2', '\x5B8', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5B7', 
		'\x3', '\x2', '\x2', '\x2', '\x5B9', '\x5BA', '\x3', '\x2', '\x2', '\x2', 
		'\x5BA', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5B9', '\x3', 
		'\x2', '\x2', '\x2', '\x5BC', '\x5BD', '\a', '\x4', '\x2', '\x2', '\x5BD', 
		'\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5B3', '\x3', '\x2', '\x2', 
		'\x2', '\x5BE', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5C0', 
		'\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5C2', '\a', '\b', '\x2', '\x2', 
		'\x5C1', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C2', '\x3', 
		'\x2', '\x2', '\x2', '\x5C2', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5C3', 
		'\x5D5', '\a', '\xE4', '\x2', '\x2', '\x5C4', '\x5C5', '\a', '\a', '\x2', 
		'\x2', '\x5C5', '\x5D1', '\x5', '\xBC', '_', '\x2', '\x5C6', '\x5C7', 
		'\a', '\x3', '\x2', '\x2', '\x5C7', '\x5CC', '\x5', '\xBC', '_', '\x2', 
		'\x5C8', '\x5C9', '\a', '\x11', '\x2', '\x2', '\x5C9', '\x5CB', '\x5', 
		'\xBC', '_', '\x2', '\x5CA', '\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5CB', 
		'\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CA', '\x3', '\x2', '\x2', 
		'\x2', '\x5CC', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CF', 
		'\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CC', '\x3', '\x2', '\x2', '\x2', 
		'\x5CF', '\x5D0', '\a', '\x4', '\x2', '\x2', '\x5D0', '\x5D2', '\x3', 
		'\x2', '\x2', '\x2', '\x5D1', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\x5D1', 
		'\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5D3', '\x3', '\x2', '\x2', 
		'\x2', '\x5D3', '\x5D4', '\a', '\b', '\x2', '\x2', '\x5D4', '\x5D6', '\x3', 
		'\x2', '\x2', '\x2', '\x5D5', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5D5', 
		'\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D8', '\x3', '\x2', '\x2', 
		'\x2', '\x5D7', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5B0', 
		'\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5C3', '\x3', '\x2', '\x2', '\x2', 
		'\x5D8', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x5D9', '\x5DA', '\a', '\xEB', 
		'\x2', '\x2', '\x5DA', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DC', 
		'\a', '\xEB', '\x2', '\x2', '\x5DC', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x5DD', '\x5DE', '\t', '\x1A', '\x2', '\x2', '\x5DE', '\x5E3', '\x5', 
		'\x92', 'J', '\x2', '\x5DF', '\x5E0', '\a', '\x13', '\x2', '\x2', '\x5E0', 
		'\x5E2', '\x5', '\x92', 'J', '\x2', '\x5E1', '\x5DF', '\x3', '\x2', '\x2', 
		'\x2', '\x5E2', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E1', 
		'\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E4', '\x3', '\x2', '\x2', '\x2', 
		'\x5E4', '\x91', '\x3', '\x2', '\x2', '\x2', '\x5E5', '\x5E3', '\x3', 
		'\x2', '\x2', '\x2', '\x5E6', '\x5E9', '\x5', '\xBC', '_', '\x2', '\x5E7', 
		'\x5E8', '\a', '%', '\x2', '\x2', '\x5E8', '\x5EA', '\x5', '\xBA', '^', 
		'\x2', '\x5E9', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5EA', 
		'\x3', '\x2', '\x2', '\x2', '\x5EA', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x5EB', '\x5F0', '\x5', '\x96', 'L', '\x2', '\x5EC', '\x5ED', '\a', '\xED', 
		'\x2', '\x2', '\x5ED', '\x5EF', '\x5', '\x96', 'L', '\x2', '\x5EE', '\x5EC', 
		'\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F2', '\x3', '\x2', '\x2', '\x2', 
		'\x5F0', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5F1', '\x3', 
		'\x2', '\x2', '\x2', '\x5F1', '\x95', '\x3', '\x2', '\x2', '\x2', '\x5F2', 
		'\x5F0', '\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F4', '\a', '\xEB', '\x2', 
		'\x2', '\x5F4', '\x5F6', '\a', '\x15', '\x2', '\x2', '\x5F5', '\x5F3', 
		'\x3', '\x2', '\x2', '\x2', '\x5F5', '\x5F6', '\x3', '\x2', '\x2', '\x2', 
		'\x5F6', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5F8', '\a', 
		'\xAF', '\x2', '\x2', '\x5F8', '\x5F9', '\x5', '\b', '\x5', '\x2', '\x5F9', 
		'\x5FA', '\a', '\x1A', '\x2', '\x2', '\x5FA', '\x5FC', '\x3', '\x2', '\x2', 
		'\x2', '\x5FB', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5FC', 
		'\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FD', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x5FF', '\x5', '\b', '\x5', '\x2', '\x5FE', '\x600', '\x5', 
		'\xC4', '\x63', '\x2', '\x5FF', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FF', 
		'\x600', '\x3', '\x2', '\x2', '\x2', '\x600', '\x602', '\x3', '\x2', '\x2', 
		'\x2', '\x601', '\x603', '\x5', '\xC6', '\x64', '\x2', '\x602', '\x601', 
		'\x3', '\x2', '\x2', '\x2', '\x602', '\x603', '\x3', '\x2', '\x2', '\x2', 
		'\x603', '\x97', '\x3', '\x2', '\x2', '\x2', '\x604', '\x609', '\x5', 
		'\x9A', 'N', '\x2', '\x605', '\x606', '\a', '\xED', '\x2', '\x2', '\x606', 
		'\x608', '\x5', '\x9A', 'N', '\x2', '\x607', '\x605', '\x3', '\x2', '\x2', 
		'\x2', '\x608', '\x60B', '\x3', '\x2', '\x2', '\x2', '\x609', '\x607', 
		'\x3', '\x2', '\x2', '\x2', '\x609', '\x60A', '\x3', '\x2', '\x2', '\x2', 
		'\x60A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x60B', '\x609', '\x3', 
		'\x2', '\x2', '\x2', '\x60C', '\x60D', '\a', '\xEB', '\x2', '\x2', '\x60D', 
		'\x60F', '\a', '\x15', '\x2', '\x2', '\x60E', '\x60C', '\x3', '\x2', '\x2', 
		'\x2', '\x60E', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x610', 
		'\x3', '\x2', '\x2', '\x2', '\x610', '\x612', '\x5', '\xA0', 'Q', '\x2', 
		'\x611', '\x613', '\x5', '\xC4', '\x63', '\x2', '\x612', '\x611', '\x3', 
		'\x2', '\x2', '\x2', '\x612', '\x613', '\x3', '\x2', '\x2', '\x2', '\x613', 
		'\x615', '\x3', '\x2', '\x2', '\x2', '\x614', '\x616', '\x5', '\xC6', 
		'\x64', '\x2', '\x615', '\x614', '\x3', '\x2', '\x2', '\x2', '\x615', 
		'\x616', '\x3', '\x2', '\x2', '\x2', '\x616', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x617', '\x61A', '\t', '\x1A', '\x2', '\x2', '\x618', '\x619', 
		'\a', '\x9D', '\x2', '\x2', '\x619', '\x61B', '\x5', '\x9E', 'P', '\x2', 
		'\x61A', '\x618', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x61B', '\x3', 
		'\x2', '\x2', '\x2', '\x61B', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x61C', 
		'\x61D', '\a', 'v', '\x2', '\x2', '\x61D', '\x61E', '\a', '\xEB', '\x2', 
		'\x2', '\x61E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x61F', '\x624', 
		'\x5', '\x92', 'J', '\x2', '\x620', '\x621', '\a', '\x13', '\x2', '\x2', 
		'\x621', '\x623', '\x5', '\x92', 'J', '\x2', '\x622', '\x620', '\x3', 
		'\x2', '\x2', '\x2', '\x623', '\x626', '\x3', '\x2', '\x2', '\x2', '\x624', 
		'\x622', '\x3', '\x2', '\x2', '\x2', '\x624', '\x625', '\x3', '\x2', '\x2', 
		'\x2', '\x625', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x626', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x627', '\x628', '\a', '\xAF', '\x2', '\x2', 
		'\x628', '\x629', '\x5', '\b', '\x5', '\x2', '\x629', '\x62A', '\a', '\x1A', 
		'\x2', '\x2', '\x62A', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x627', 
		'\x3', '\x2', '\x2', '\x2', '\x62B', '\x62C', '\x3', '\x2', '\x2', '\x2', 
		'\x62C', '\x62D', '\x3', '\x2', '\x2', '\x2', '\x62D', '\x62F', '\x5', 
		'\xA4', 'S', '\x2', '\x62E', '\x630', '\x5', '\xC8', '\x65', '\x2', '\x62F', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x630', '\x3', '\x2', '\x2', 
		'\x2', '\x630', '\x631', '\x3', '\x2', '\x2', '\x2', '\x631', '\x635', 
		'\x5', '\xA2', 'R', '\x2', '\x632', '\x634', '\x5', '\xA2', 'R', '\x2', 
		'\x633', '\x632', '\x3', '\x2', '\x2', '\x2', '\x634', '\x637', '\x3', 
		'\x2', '\x2', '\x2', '\x635', '\x633', '\x3', '\x2', '\x2', '\x2', '\x635', 
		'\x636', '\x3', '\x2', '\x2', '\x2', '\x636', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x637', '\x635', '\x3', '\x2', '\x2', '\x2', '\x638', '\x63A', 
		'\t', '\x1B', '\x2', '\x2', '\x639', '\x638', '\x3', '\x2', '\x2', '\x2', 
		'\x639', '\x63A', '\x3', '\x2', '\x2', '\x2', '\x63A', '\x63B', '\x3', 
		'\x2', '\x2', '\x2', '\x63B', '\x640', '\x5', '\xA4', 'S', '\x2', '\x63C', 
		'\x63D', '\a', '\x5', '\x2', '\x2', '\x63D', '\x63E', '\x5', '\b', '\x5', 
		'\x2', '\x63E', '\x63F', '\a', '\x6', '\x2', '\x2', '\x63F', '\x641', 
		'\x3', '\x2', '\x2', '\x2', '\x640', '\x63C', '\x3', '\x2', '\x2', '\x2', 
		'\x640', '\x641', '\x3', '\x2', '\x2', '\x2', '\x641', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x642', '\x643', '\t', '\x1C', '\x2', '\x2', '\x643', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x644', '\x645', '\a', '\x5', '\x2', 
		'\x2', '\x645', '\x646', '\x5', '\b', '\x5', '\x2', '\x646', '\x647', 
		'\a', '\x6', '\x2', '\x2', '\x647', '\x654', '\x3', '\x2', '\x2', '\x2', 
		'\x648', '\x649', '\a', '\a', '\x2', '\x2', '\x649', '\x64E', '\x5', 'X', 
		'-', '\x2', '\x64A', '\x64B', '\a', '\x13', '\x2', '\x2', '\x64B', '\x64D', 
		'\x5', 'X', '-', '\x2', '\x64C', '\x64A', '\x3', '\x2', '\x2', '\x2', 
		'\x64D', '\x650', '\x3', '\x2', '\x2', '\x2', '\x64E', '\x64C', '\x3', 
		'\x2', '\x2', '\x2', '\x64E', '\x64F', '\x3', '\x2', '\x2', '\x2', '\x64F', 
		'\x651', '\x3', '\x2', '\x2', '\x2', '\x650', '\x64E', '\x3', '\x2', '\x2', 
		'\x2', '\x651', '\x652', '\a', '\b', '\x2', '\x2', '\x652', '\x654', '\x3', 
		'\x2', '\x2', '\x2', '\x653', '\x644', '\x3', '\x2', '\x2', '\x2', '\x653', 
		'\x648', '\x3', '\x2', '\x2', '\x2', '\x654', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x655', '\x658', '\x5', '\x80', '\x41', '\x2', '\x656', '\x659', 
		'\x5', '\xC0', '\x61', '\x2', '\x657', '\x659', '\x5', '\xAA', 'V', '\x2', 
		'\x658', '\x656', '\x3', '\x2', '\x2', '\x2', '\x658', '\x657', '\x3', 
		'\x2', '\x2', '\x2', '\x659', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x65A', 
		'\x65C', '\a', 'i', '\x2', '\x2', '\x65B', '\x65D', '\t', '\x1D', '\x2', 
		'\x2', '\x65C', '\x65B', '\x3', '\x2', '\x2', '\x2', '\x65C', '\x65D', 
		'\x3', '\x2', '\x2', '\x2', '\x65D', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x65E', '\x65F', '\t', '\x1E', '\x2', '\x2', '\x65F', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x660', '\x661', '\t', '\x1F', '\x2', '\x2', '\x661', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x662', '\x663', '\a', '\x9D', '\x2', 
		'\x2', '\x663', '\x668', '\x5', '\xC0', '\x61', '\x2', '\x664', '\x665', 
		'\a', '\x13', '\x2', '\x2', '\x665', '\x667', '\x5', '\xC0', '\x61', '\x2', 
		'\x666', '\x664', '\x3', '\x2', '\x2', '\x2', '\x667', '\x66A', '\x3', 
		'\x2', '\x2', '\x2', '\x668', '\x666', '\x3', '\x2', '\x2', '\x2', '\x668', 
		'\x669', '\x3', '\x2', '\x2', '\x2', '\x669', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x66A', '\x668', '\x3', '\x2', '\x2', '\x2', '\x66B', '\x66C', 
		'\t', ' ', '\x2', '\x2', '\x66C', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x66D', '\x66E', '\a', '<', '\x2', '\x2', '\x66E', '\x66F', '\x5', '\x6', 
		'\x4', '\x2', '\x66F', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x670', '\x671', 
		'\t', '!', '\x2', '\x2', '\x671', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x672', '\x673', '\t', '\"', '\x2', '\x2', '\x673', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x674', '\x675', '\a', '\xEB', '\x2', '\x2', '\x675', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x676', '\x677', '\a', '\xEB', '\x2', '\x2', 
		'\x677', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x678', '\x679', '\a', '\xEB', 
		'\x2', '\x2', '\x679', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x67A', '\x67D', 
		'\a', '\xEB', '\x2', '\x2', '\x67B', '\x67C', '\a', '\x17', '\x2', '\x2', 
		'\x67C', '\x67E', '\a', '\xEB', '\x2', '\x2', '\x67D', '\x67B', '\x3', 
		'\x2', '\x2', '\x2', '\x67D', '\x67E', '\x3', '\x2', '\x2', '\x2', '\x67E', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x680', '\a', '\a', '\x2', 
		'\x2', '\x680', '\x685', '\x5', 'X', '-', '\x2', '\x681', '\x682', '\a', 
		'\x13', '\x2', '\x2', '\x682', '\x684', '\x5', 'X', '-', '\x2', '\x683', 
		'\x681', '\x3', '\x2', '\x2', '\x2', '\x684', '\x687', '\x3', '\x2', '\x2', 
		'\x2', '\x685', '\x683', '\x3', '\x2', '\x2', '\x2', '\x685', '\x686', 
		'\x3', '\x2', '\x2', '\x2', '\x686', '\x688', '\x3', '\x2', '\x2', '\x2', 
		'\x687', '\x685', '\x3', '\x2', '\x2', '\x2', '\x688', '\x689', '\a', 
		'\b', '\x2', '\x2', '\x689', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x68A', 
		'\x68B', '\a', '=', '\x2', '\x2', '\x68B', '\x68C', '\x5', '\xD8', 'm', 
		'\x2', '\x68C', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x68D', '\x68E', 
		'\a', '@', '\x2', '\x2', '\x68E', '\x68F', '\x5', '\xD8', 'm', '\x2', 
		'\x68F', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x690', '\x691', '\t', '#', 
		'\x2', '\x2', '\x691', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x692', '\x695', 
		'\x5', '\x6', '\x4', '\x2', '\x693', '\x695', '\a', 'i', '\x2', '\x2', 
		'\x694', '\x692', '\x3', '\x2', '\x2', '\x2', '\x694', '\x693', '\x3', 
		'\x2', '\x2', '\x2', '\x695', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x696', 
		'\x699', '\x5', '\b', '\x5', '\x2', '\x697', '\x699', '\a', 'i', '\x2', 
		'\x2', '\x698', '\x696', '\x3', '\x2', '\x2', '\x2', '\x698', '\x697', 
		'\x3', '\x2', '\x2', '\x2', '\x699', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\x69A', '\x6A0', '\a', '^', '\x2', '\x2', '\x69B', '\x6A0', '\a', '\xE0', 
		'\x2', '\x2', '\x69C', '\x6A0', '\a', ']', '\x2', '\x2', '\x69D', '\x6A0', 
		'\a', '_', '\x2', '\x2', '\x69E', '\x6A0', '\x5', '\xD0', 'i', '\x2', 
		'\x69F', '\x69A', '\x3', '\x2', '\x2', '\x2', '\x69F', '\x69B', '\x3', 
		'\x2', '\x2', '\x2', '\x69F', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69F', 
		'\x69D', '\x3', '\x2', '\x2', '\x2', '\x69F', '\x69E', '\x3', '\x2', '\x2', 
		'\x2', '\x6A0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x6A1', '\x6A2', 
		'\a', '\x64', '\x2', '\x2', '\x6A2', '\x6A3', '\a', '_', '\x2', '\x2', 
		'\x6A3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\a', '\xEB', 
		'\x2', '\x2', '\x6A5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A7', 
		'\a', '\xEB', '\x2', '\x2', '\x6A7', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A8', '\x6A9', '\a', '\xEB', '\x2', '\x2', '\x6A9', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\x6AA', '\x6AB', '\t', '$', '\x2', '\x2', '\x6AB', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6AD', '\t', '%', '\x2', 
		'\x2', '\x6AD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6AF', 
		'\t', '&', '\x2', '\x2', '\x6AF', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xE3', '\xF1', '\x104', '\x122', '\x124', '\x126', '\x13A', '\x150', 
		'\x152', '\x154', '\x15F', '\x16D', '\x176', '\x17E', '\x185', '\x187', 
		'\x192', '\x19B', '\x1AD', '\x1B6', '\x1C5', '\x1D0', '\x1D3', '\x1D8', 
		'\x1F9', '\x202', '\x205', '\x20F', '\x214', '\x218', '\x21E', '\x222', 
		'\x22C', '\x230', '\x234', '\x23D', '\x240', '\x24A', '\x24E', '\x258', 
		'\x25D', '\x261', '\x267', '\x26B', '\x26F', '\x273', '\x277', '\x287', 
		'\x28B', '\x296', '\x2A1', '\x2A5', '\x2A9', '\x2B9', '\x2BD', '\x2C8', 
		'\x2D3', '\x2D7', '\x2DB', '\x2E7', '\x2F2', '\x2FE', '\x309', '\x327', 
		'\x32B', '\x342', '\x347', '\x34F', '\x364', '\x368', '\x36C', '\x372', 
		'\x377', '\x37F', '\x394', '\x398', '\x39C', '\x3A2', '\x3AB', '\x3B6', 
		'\x3C1', '\x3C9', '\x3CD', '\x3D0', '\x3D3', '\x3D6', '\x3E5', '\x3E8', 
		'\x3EB', '\x3F5', '\x3F9', '\x3FC', '\x3FF', '\x402', '\x40A', '\x40D', 
		'\x410', '\x413', '\x417', '\x42F', '\x436', '\x438', '\x442', '\x445', 
		'\x448', '\x453', '\x455', '\x45A', '\x46A', '\x472', '\x475', '\x478', 
		'\x483', '\x485', '\x48A', '\x496', '\x4A6', '\x4B1', '\x4B5', '\x4BC', 
		'\x4CE', '\x4D2', '\x4D9', '\x4E1', '\x4EA', '\x4ED', '\x4F2', '\x4F5', 
		'\x4FA', '\x4FD', '\x500', '\x50C', '\x516', '\x51B', '\x520', '\x534', 
		'\x53D', '\x543', '\x54C', '\x551', '\x555', '\x55C', '\x561', '\x565', 
		'\x568', '\x56B', '\x56E', '\x575', '\x57E', '\x583', '\x587', '\x58E', 
		'\x598', '\x59D', '\x5A6', '\x5AB', '\x5AD', '\x5B9', '\x5BE', '\x5C1', 
		'\x5CC', '\x5D1', '\x5D5', '\x5D7', '\x5E3', '\x5E9', '\x5F0', '\x5F5', 
		'\x5FB', '\x5FF', '\x602', '\x609', '\x60E', '\x612', '\x615', '\x61A', 
		'\x624', '\x62B', '\x62F', '\x635', '\x639', '\x640', '\x64E', '\x653', 
		'\x658', '\x65C', '\x668', '\x67D', '\x685', '\x694', '\x698', '\x69F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
